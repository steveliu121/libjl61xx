//reg_ladp_access.h
/*
* Automatically generated by gen_c_api.py, don't edit it
*/
#ifndef __JL_REG_LADP_ACCESS_H__
#define __JL_REG_LADP_ACCESS_H__

#include <jl_types.h>

#define LADP_ACCESS4_BASE                                                                      ((jl_uint32)0x00203200U)
#define LADP_ACCESS4_BLOCK_SIZE                                                                ((jl_uint32)0x00000080U)
#define LADP_ACCESS3_BASE                                                                      ((jl_uint32)0x00203180U)
#define LADP_ACCESS3_BLOCK_SIZE                                                                ((jl_uint32)0x00000080U)
#define LADP_ACCESS2_BASE                                                                      ((jl_uint32)0x00203100U)
#define LADP_ACCESS2_BLOCK_SIZE                                                                ((jl_uint32)0x00000080U)
#define LADP_ACCESS1_BASE                                                                      ((jl_uint32)0x00203080U)
#define LADP_ACCESS1_BLOCK_SIZE                                                                ((jl_uint32)0x00000080U)
#define LADP_ACCESS0_BASE                                                                      ((jl_uint32)0x00203000U)
#define LADP_ACCESS0_BLOCK_SIZE                                                                ((jl_uint32)0x00000080U)

#define LADP_ACCESS_SAG_NO_USED                                                                ((jl_uint32)0x00203000U)
#define LADP_ACCESS_SAG_NO_USED_NUM                                                            ((jl_uint32)0x00000001U)
#define LADP_ACCESS_SAG_NO_USED_ENTRY_SIZE                                                                          (1)
#define LADP_ACCESS_SAG_NO_USED_OFFSET_RSVD0                                                                        (1)
#define LADP_ACCESS_SAG_NO_USED_OFFSET_RSVD0_WIDTH                                                                 (31)
#define LADP_ACCESS_SAG_NO_USED_OFFSET_SAG_NO_USED                                                                  (0)
#define LADP_ACCESS_SAG_NO_USED_OFFSET_SAG_NO_USED_WIDTH                                                            (1)
typedef union LADP_ACCESS_SAG_NO_USED_u {
    struct __attribute__ ((packed)) {
        jl_uint32 sag_no_used:LADP_ACCESS_SAG_NO_USED_OFFSET_SAG_NO_USED_WIDTH;                                           //[ 0: 0]
        jl_uint32 rsvd0:LADP_ACCESS_SAG_NO_USED_OFFSET_RSVD0_WIDTH;                                                       //[31: 1]
    } BF;
    jl_uint32 val[LADP_ACCESS_SAG_NO_USED_ENTRY_SIZE];
} LADP_ACCESS_SAG_NO_USED_t;

#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG                                                      ((jl_uint32)0x00203004U)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_NUM                                                  ((jl_uint32)0x00000001U)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_ENTRY_SIZE                                                                (1)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_RSVD1                                                             (31)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_RSVD1_WIDTH                                                        (1)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_RX_EXPIRE                                                (0)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_RX_EXPIRE_WIDTH                                          (7)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_RX_TRIGGER                                               (7)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_RX_TRIGGER_WIDTH                                         (7)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_RX_CLR                                                  (14)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_RX_CLR_WIDTH                                             (1)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_RSVD0                                                             (15)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_RSVD0_WIDTH                                                        (1)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_TX_EXPIRE                                               (16)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_TX_EXPIRE_WIDTH                                          (7)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_TX_TRIGGER                                              (23)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_TX_TRIGGER_WIDTH                                         (7)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_TX_CLR                                                  (30)
#define LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_TX_CLR_WIDTH                                             (1)
typedef union LADP_ACCESS_ADAPTER_PHY_1000M_CFG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 phy_1000m_rx_expire:LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_RX_EXPIRE_WIDTH;                 //[ 6: 0]
        jl_uint32 phy_1000m_rx_trigger:LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_RX_TRIGGER_WIDTH;               //[13: 7]
        jl_uint32 phy_1000m_rx_clr:LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_RX_CLR_WIDTH;                       //[14:14]
        jl_uint32 rsvd0:LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_RSVD0_WIDTH;                                             //[15:15]
        jl_uint32 phy_1000m_tx_expire:LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_TX_EXPIRE_WIDTH;                 //[22:16]
        jl_uint32 phy_1000m_tx_trigger:LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_TX_TRIGGER_WIDTH;               //[29:23]
        jl_uint32 phy_1000m_tx_clr:LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_PHY_1000M_TX_CLR_WIDTH;                       //[30:30]
        jl_uint32 rsvd1:LADP_ACCESS_ADAPTER_PHY_1000M_CFG_OFFSET_RSVD1_WIDTH;                                             //[31:31]
    } BF;
    jl_uint32 val[LADP_ACCESS_ADAPTER_PHY_1000M_CFG_ENTRY_SIZE];
} LADP_ACCESS_ADAPTER_PHY_1000M_CFG_t;

#define LADP_ACCESS_ADAPTER_PHY_100M_CFG                                                       ((jl_uint32)0x00203008U)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_NUM                                                   ((jl_uint32)0x00000001U)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_ENTRY_SIZE                                                                 (1)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_RSVD1                                                              (31)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_RSVD1_WIDTH                                                         (1)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_RX_EXPIRE                                                  (0)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_RX_EXPIRE_WIDTH                                            (7)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_RX_TRIGGER                                                 (7)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_RX_TRIGGER_WIDTH                                           (7)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_RX_CLR                                                    (14)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_RX_CLR_WIDTH                                               (1)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_RSVD0                                                              (15)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_RSVD0_WIDTH                                                         (1)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_TX_EXPIRE                                                 (16)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_TX_EXPIRE_WIDTH                                            (7)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_TX_TRIGGER                                                (23)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_TX_TRIGGER_WIDTH                                           (7)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_TX_CLR                                                    (30)
#define LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_TX_CLR_WIDTH                                               (1)
typedef union LADP_ACCESS_ADAPTER_PHY_100M_CFG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 phy_100m_rx_expire:LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_RX_EXPIRE_WIDTH;                    //[ 6: 0]
        jl_uint32 phy_100m_rx_trigger:LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_RX_TRIGGER_WIDTH;                  //[13: 7]
        jl_uint32 phy_100m_rx_clr:LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_RX_CLR_WIDTH;                          //[14:14]
        jl_uint32 rsvd0:LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_RSVD0_WIDTH;                                              //[15:15]
        jl_uint32 phy_100m_tx_expire:LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_TX_EXPIRE_WIDTH;                    //[22:16]
        jl_uint32 phy_100m_tx_trigger:LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_TX_TRIGGER_WIDTH;                  //[29:23]
        jl_uint32 phy_100m_tx_clr:LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_PHY_100M_TX_CLR_WIDTH;                          //[30:30]
        jl_uint32 rsvd1:LADP_ACCESS_ADAPTER_PHY_100M_CFG_OFFSET_RSVD1_WIDTH;                                              //[31:31]
    } BF;
    jl_uint32 val[LADP_ACCESS_ADAPTER_PHY_100M_CFG_ENTRY_SIZE];
} LADP_ACCESS_ADAPTER_PHY_100M_CFG_t;

#define LADP_ACCESS_ADAPTER_PHY_10M_CFG                                                        ((jl_uint32)0x0020300CU)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_NUM                                                    ((jl_uint32)0x00000001U)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_ENTRY_SIZE                                                                  (1)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_RSVD1                                                               (31)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_RSVD1_WIDTH                                                          (1)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_RX_EXPIRE                                                    (0)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_RX_EXPIRE_WIDTH                                              (7)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_RX_TRIGGER                                                   (7)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_RX_TRIGGER_WIDTH                                             (7)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_RX_CLR                                                      (14)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_RX_CLR_WIDTH                                                 (1)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_RSVD0                                                               (15)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_RSVD0_WIDTH                                                          (1)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_TX_EXPIRE                                                   (16)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_TX_EXPIRE_WIDTH                                              (7)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_TX_TRIGGER                                                  (23)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_TX_TRIGGER_WIDTH                                             (7)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_TX_CLR                                                      (30)
#define LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_TX_CLR_WIDTH                                                 (1)
typedef union LADP_ACCESS_ADAPTER_PHY_10M_CFG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 phy_10m_rx_expire:LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_RX_EXPIRE_WIDTH;                       //[ 6: 0]
        jl_uint32 phy_10m_rx_trigger:LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_RX_TRIGGER_WIDTH;                     //[13: 7]
        jl_uint32 phy_10m_rx_clr:LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_RX_CLR_WIDTH;                             //[14:14]
        jl_uint32 rsvd0:LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_RSVD0_WIDTH;                                               //[15:15]
        jl_uint32 phy_10m_tx_expire:LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_TX_EXPIRE_WIDTH;                       //[22:16]
        jl_uint32 phy_10m_tx_trigger:LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_TX_TRIGGER_WIDTH;                     //[29:23]
        jl_uint32 phy_10m_tx_clr:LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_PHY_10M_TX_CLR_WIDTH;                             //[30:30]
        jl_uint32 rsvd1:LADP_ACCESS_ADAPTER_PHY_10M_CFG_OFFSET_RSVD1_WIDTH;                                               //[31:31]
    } BF;
    jl_uint32 val[LADP_ACCESS_ADAPTER_PHY_10M_CFG_ENTRY_SIZE];
} LADP_ACCESS_ADAPTER_PHY_10M_CFG_t;

#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG                                                ((jl_uint32)0x00203010U)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_NUM                                            ((jl_uint32)0x00000001U)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_ENTRY_SIZE                                                          (1)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_RSVD0                                                       (24)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_RSVD0_WIDTH                                                  (8)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_RX_RTHR                                           (0)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_RX_RTHR_WIDTH                                     (6)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_RX_WTHR                                           (6)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_RX_WTHR_WIDTH                                     (6)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_TX_RTHR                                          (12)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_TX_RTHR_WIDTH                                     (6)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_TX_WTHR                                          (18)
#define LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_TX_WTHR_WIDTH                                     (6)
typedef union LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 lmac_1000m_rx_rthr:LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_RX_RTHR_WIDTH;             //[ 5: 0]
        jl_uint32 lmac_1000m_rx_wthr:LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_RX_WTHR_WIDTH;             //[11: 6]
        jl_uint32 lmac_1000m_tx_rthr:LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_TX_RTHR_WIDTH;             //[17:12]
        jl_uint32 lmac_1000m_tx_wthr:LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_LMAC_1000M_TX_WTHR_WIDTH;             //[23:18]
        jl_uint32 rsvd0:LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_OFFSET_RSVD0_WIDTH;                                       //[31:24]
    } BF;
    jl_uint32 val[LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_ENTRY_SIZE];
} LADP_ACCESS_ADAPTER_QUEUE_1000M_THR_CFG_t;

#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG                                                 ((jl_uint32)0x00203014U)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_NUM                                             ((jl_uint32)0x00000001U)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_ENTRY_SIZE                                                           (1)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_RSVD0                                                        (24)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_RSVD0_WIDTH                                                   (8)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_RX_RTHR                                             (0)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_RX_RTHR_WIDTH                                       (6)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_RX_WTHR                                             (6)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_RX_WTHR_WIDTH                                       (6)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_TX_RTHR                                            (12)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_TX_RTHR_WIDTH                                       (6)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_TX_WTHR                                            (18)
#define LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_TX_WTHR_WIDTH                                       (6)
typedef union LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 lmac_100m_rx_rthr:LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_RX_RTHR_WIDTH;                //[ 5: 0]
        jl_uint32 lmac_100m_rx_wthr:LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_RX_WTHR_WIDTH;                //[11: 6]
        jl_uint32 lmac_100m_tx_rthr:LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_TX_RTHR_WIDTH;                //[17:12]
        jl_uint32 lmac_100m_tx_wthr:LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_LMAC_100M_TX_WTHR_WIDTH;                //[23:18]
        jl_uint32 rsvd0:LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_OFFSET_RSVD0_WIDTH;                                        //[31:24]
    } BF;
    jl_uint32 val[LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_ENTRY_SIZE];
} LADP_ACCESS_ADAPTER_QUEUE_100M_THR_CFG_t;

#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG                                                  ((jl_uint32)0x00203018U)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_NUM                                              ((jl_uint32)0x00000001U)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_ENTRY_SIZE                                                            (1)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_RSVD0                                                         (24)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_RSVD0_WIDTH                                                    (8)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_RX_RTHR                                               (0)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_RX_RTHR_WIDTH                                         (6)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_RX_WTHR                                               (6)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_RX_WTHR_WIDTH                                         (6)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_TX_RTHR                                              (12)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_TX_RTHR_WIDTH                                         (6)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_TX_WTHR                                              (18)
#define LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_TX_WTHR_WIDTH                                         (6)
typedef union LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 lmac_10m_rx_rthr:LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_RX_RTHR_WIDTH;                   //[ 5: 0]
        jl_uint32 lmac_10m_rx_wthr:LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_RX_WTHR_WIDTH;                   //[11: 6]
        jl_uint32 lmac_10m_tx_rthr:LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_TX_RTHR_WIDTH;                   //[17:12]
        jl_uint32 lmac_10m_tx_wthr:LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_LMAC_10M_TX_WTHR_WIDTH;                   //[23:18]
        jl_uint32 rsvd0:LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_OFFSET_RSVD0_WIDTH;                                         //[31:24]
    } BF;
    jl_uint32 val[LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_ENTRY_SIZE];
} LADP_ACCESS_ADAPTER_QUEUE_10M_THR_CFG_t;

#define LADP_ACCESS_ADAPTER_AFIFO_TX_EN                                                        ((jl_uint32)0x0020301CU)
#define LADP_ACCESS_ADAPTER_AFIFO_TX_EN_NUM                                                    ((jl_uint32)0x00000001U)
#define LADP_ACCESS_ADAPTER_AFIFO_TX_EN_ENTRY_SIZE                                                                  (1)
#define LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_RSVD1                                                                (9)
#define LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_RSVD1_WIDTH                                                         (23)
#define LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_TX_DIN_EN                                                            (0)
#define LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_TX_DIN_EN_WIDTH                                                      (1)
#define LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_RSVD0                                                                (1)
#define LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_RSVD0_WIDTH                                                          (7)
#define LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_TX_DOUT_EN                                                           (8)
#define LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_TX_DOUT_EN_WIDTH                                                     (1)
typedef union LADP_ACCESS_ADAPTER_AFIFO_TX_EN_u {
    struct __attribute__ ((packed)) {
        jl_uint32 tx_din_en:LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_TX_DIN_EN_WIDTH;                                       //[ 0: 0]
        jl_uint32 rsvd0:LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_RSVD0_WIDTH;                                               //[ 7: 1]
        jl_uint32 tx_dout_en:LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_TX_DOUT_EN_WIDTH;                                     //[ 8: 8]
        jl_uint32 rsvd1:LADP_ACCESS_ADAPTER_AFIFO_TX_EN_OFFSET_RSVD1_WIDTH;                                               //[31: 9]
    } BF;
    jl_uint32 val[LADP_ACCESS_ADAPTER_AFIFO_TX_EN_ENTRY_SIZE];
} LADP_ACCESS_ADAPTER_AFIFO_TX_EN_t;

#define LADP_ACCESS_ADAPTER_AFIFO_RX_EN                                                        ((jl_uint32)0x00203020U)
#define LADP_ACCESS_ADAPTER_AFIFO_RX_EN_NUM                                                    ((jl_uint32)0x00000001U)
#define LADP_ACCESS_ADAPTER_AFIFO_RX_EN_ENTRY_SIZE                                                                  (1)
#define LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RSVD1                                                               (17)
#define LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RSVD1_WIDTH                                                         (15)
#define LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RX_DIN_EN                                                            (0)
#define LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RX_DIN_EN_WIDTH                                                      (1)
#define LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RSVD0                                                                (1)
#define LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RSVD0_WIDTH                                                         (15)
#define LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RX_DOUT_EN                                                          (16)
#define LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RX_DOUT_EN_WIDTH                                                     (1)
typedef union LADP_ACCESS_ADAPTER_AFIFO_RX_EN_u {
    struct __attribute__ ((packed)) {
        jl_uint32 rx_din_en:LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RX_DIN_EN_WIDTH;                                       //[ 0: 0]
        jl_uint32 rsvd0:LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RSVD0_WIDTH;                                               //[15: 1]
        jl_uint32 rx_dout_en:LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RX_DOUT_EN_WIDTH;                                     //[16:16]
        jl_uint32 rsvd1:LADP_ACCESS_ADAPTER_AFIFO_RX_EN_OFFSET_RSVD1_WIDTH;                                               //[31:17]
    } BF;
    jl_uint32 val[LADP_ACCESS_ADAPTER_AFIFO_RX_EN_ENTRY_SIZE];
} LADP_ACCESS_ADAPTER_AFIFO_RX_EN_t;

#define LADP_ACCESS_CPU_REQ_MODE_REG                                                           ((jl_uint32)0x00203024U)
#define LADP_ACCESS_CPU_REQ_MODE_REG_NUM                                                       ((jl_uint32)0x00000001U)
#define LADP_ACCESS_CPU_REQ_MODE_REG_ENTRY_SIZE                                                                     (1)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_RSVD1                                                                   (9)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_RSVD1_WIDTH                                                            (23)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_REG_MODE                                                            (0)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_REG_MODE_WIDTH                                                      (3)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_FORCE_IFM_RX_EN                                                     (3)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_FORCE_IFM_RX_EN_WIDTH                                               (1)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_FORCE_IFM_TX_EN                                                     (4)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_FORCE_IFM_TX_EN_WIDTH                                               (1)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_RSVD0                                                                   (5)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_RSVD0_WIDTH                                                             (3)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_FORCE_MODE                                                          (8)
#define LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_FORCE_MODE_WIDTH                                                    (1)
typedef union LADP_ACCESS_CPU_REQ_MODE_REG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cpu_reg_mode:LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_REG_MODE_WIDTH;                                    //[ 2: 0]
        jl_uint32 cpu_force_ifm_rx_en:LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_FORCE_IFM_RX_EN_WIDTH;                      //[ 3: 3]
        jl_uint32 cpu_force_ifm_tx_en:LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_FORCE_IFM_TX_EN_WIDTH;                      //[ 4: 4]
        jl_uint32 rsvd0:LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_RSVD0_WIDTH;                                                  //[ 7: 5]
        jl_uint32 cpu_force_mode:LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_CPU_FORCE_MODE_WIDTH;                                //[ 8: 8]
        jl_uint32 rsvd1:LADP_ACCESS_CPU_REQ_MODE_REG_OFFSET_RSVD1_WIDTH;                                                  //[31: 9]
    } BF;
    jl_uint32 val[LADP_ACCESS_CPU_REQ_MODE_REG_ENTRY_SIZE];
} LADP_ACCESS_CPU_REQ_MODE_REG_t;

#define LADP_ACCESS_INT_STATUS                                                                 ((jl_uint32)0x00203028U)
#define LADP_ACCESS_INT_STATUS_NUM                                                             ((jl_uint32)0x00000001U)
#define LADP_ACCESS_INT_STATUS_ENTRY_SIZE                                                                           (1)
#define LADP_ACCESS_INT_STATUS_OFFSET_RSVD0                                                                         (4)
#define LADP_ACCESS_INT_STATUS_OFFSET_RSVD0_WIDTH                                                                  (28)
#define LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_TX_WFULL                                                        (0)
#define LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_TX_WFULL_WIDTH                                                  (1)
#define LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_RX_WFULL                                                        (1)
#define LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_RX_WFULL_WIDTH                                                  (1)
#define LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_TX_REMPTY                                                       (2)
#define LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_TX_REMPTY_WIDTH                                                 (1)
#define LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_RX_REMPTY                                                       (3)
#define LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_RX_REMPTY_WIDTH                                                 (1)
typedef union LADP_ACCESS_INT_STATUS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 sag_cfg_afifo_tx_wfull:LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_TX_WFULL_WIDTH;                      //[ 0: 0]
        jl_uint32 sag_cfg_afifo_rx_wfull:LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_RX_WFULL_WIDTH;                      //[ 1: 1]
        jl_uint32 sag_cfg_afifo_tx_rempty:LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_TX_REMPTY_WIDTH;                    //[ 2: 2]
        jl_uint32 sag_cfg_afifo_rx_rempty:LADP_ACCESS_INT_STATUS_OFFSET_SAG_CFG_AFIFO_RX_REMPTY_WIDTH;                    //[ 3: 3]
        jl_uint32 rsvd0:LADP_ACCESS_INT_STATUS_OFFSET_RSVD0_WIDTH;                                                        //[31: 4]
    } BF;
    jl_uint32 val[LADP_ACCESS_INT_STATUS_ENTRY_SIZE];
} LADP_ACCESS_INT_STATUS_t;

#define LADP_ACCESS_INT_ENABLE                                                                 ((jl_uint32)0x0020302CU)
#define LADP_ACCESS_INT_ENABLE_NUM                                                             ((jl_uint32)0x00000001U)
#define LADP_ACCESS_INT_ENABLE_ENTRY_SIZE                                                                           (1)
#define LADP_ACCESS_INT_ENABLE_OFFSET_RSVD0                                                                         (4)
#define LADP_ACCESS_INT_ENABLE_OFFSET_RSVD0_WIDTH                                                                  (28)
#define LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_TX_WFULL_EN                                                     (0)
#define LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_TX_WFULL_EN_WIDTH                                               (1)
#define LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_RX_WFULL_EN                                                     (1)
#define LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_RX_WFULL_EN_WIDTH                                               (1)
#define LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_TX_REMPTY_EN                                                    (2)
#define LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_TX_REMPTY_EN_WIDTH                                              (1)
#define LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_RX_REMPTY_EN                                                    (3)
#define LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_RX_REMPTY_EN_WIDTH                                              (1)
typedef union LADP_ACCESS_INT_ENABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 sag_cfg_afifo_tx_wfull_en:LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_TX_WFULL_EN_WIDTH;                //[ 0: 0]
        jl_uint32 sag_cfg_afifo_rx_wfull_en:LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_RX_WFULL_EN_WIDTH;                //[ 1: 1]
        jl_uint32 sag_cfg_afifo_tx_rempty_en:LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_TX_REMPTY_EN_WIDTH;              //[ 2: 2]
        jl_uint32 sag_cfg_afifo_rx_rempty_en:LADP_ACCESS_INT_ENABLE_OFFSET_SAG_CFG_AFIFO_RX_REMPTY_EN_WIDTH;              //[ 3: 3]
        jl_uint32 rsvd0:LADP_ACCESS_INT_ENABLE_OFFSET_RSVD0_WIDTH;                                                        //[31: 4]
    } BF;
    jl_uint32 val[LADP_ACCESS_INT_ENABLE_ENTRY_SIZE];
} LADP_ACCESS_INT_ENABLE_t;

#define LADP_ACCESS_INT_SET                                                                    ((jl_uint32)0x00203030U)
#define LADP_ACCESS_INT_SET_NUM                                                                ((jl_uint32)0x00000001U)
#define LADP_ACCESS_INT_SET_ENTRY_SIZE                                                                              (1)
#define LADP_ACCESS_INT_SET_OFFSET_RSVD0                                                                            (4)
#define LADP_ACCESS_INT_SET_OFFSET_RSVD0_WIDTH                                                                     (28)
#define LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_TX_WFULL_SET                                                       (0)
#define LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_TX_WFULL_SET_WIDTH                                                 (1)
#define LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_RX_WFULL_SET                                                       (1)
#define LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_RX_WFULL_SET_WIDTH                                                 (1)
#define LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_TX_REMPTY_SET                                                      (2)
#define LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_TX_REMPTY_SET_WIDTH                                                (1)
#define LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_RX_REMPTY_SET                                                      (3)
#define LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_RX_REMPTY_SET_WIDTH                                                (1)
typedef union LADP_ACCESS_INT_SET_u {
    struct __attribute__ ((packed)) {
        jl_uint32 sag_cfg_afifo_tx_wfull_set:LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_TX_WFULL_SET_WIDTH;                 //[ 0: 0]
        jl_uint32 sag_cfg_afifo_rx_wfull_set:LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_RX_WFULL_SET_WIDTH;                 //[ 1: 1]
        jl_uint32 sag_cfg_afifo_tx_rempty_set:LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_TX_REMPTY_SET_WIDTH;               //[ 2: 2]
        jl_uint32 sag_cfg_afifo_rx_rempty_set:LADP_ACCESS_INT_SET_OFFSET_SAG_CFG_AFIFO_RX_REMPTY_SET_WIDTH;               //[ 3: 3]
        jl_uint32 rsvd0:LADP_ACCESS_INT_SET_OFFSET_RSVD0_WIDTH;                                                           //[31: 4]
    } BF;
    jl_uint32 val[LADP_ACCESS_INT_SET_ENTRY_SIZE];
} LADP_ACCESS_INT_SET_t;

#define LADP_ACCESS_SAG_SCRATCH_REG                                                            ((jl_uint32)0x00203034U)
#define LADP_ACCESS_SAG_SCRATCH_REG_NUM                                                        ((jl_uint32)0x00000001U)
#define LADP_ACCESS_SAG_SCRATCH_REG_ENTRY_SIZE                                                                      (1)
#define LADP_ACCESS_SAG_SCRATCH_REG_OFFSET_SAG_SCRATCH_REG                                                          (0)
#define LADP_ACCESS_SAG_SCRATCH_REG_OFFSET_SAG_SCRATCH_REG_WIDTH                                                   (32)
typedef union LADP_ACCESS_SAG_SCRATCH_REG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 sag_scratch_reg:LADP_ACCESS_SAG_SCRATCH_REG_OFFSET_SAG_SCRATCH_REG_WIDTH;                               //[31: 0]
    } BF;
    jl_uint32 val[LADP_ACCESS_SAG_SCRATCH_REG_ENTRY_SIZE];
} LADP_ACCESS_SAG_SCRATCH_REG_t;

#define LADP_ACCESS_RX_IN_PKT_CNT                                                              ((jl_uint32)0x00203038U)
#define LADP_ACCESS_RX_IN_PKT_CNT_NUM                                                          ((jl_uint32)0x00000001U)
#define LADP_ACCESS_RX_IN_PKT_CNT_ENTRY_SIZE                                                                        (1)
#define LADP_ACCESS_RX_IN_PKT_CNT_OFFSET_RX_IN_PKT_EXIST                                                            (0)
#define LADP_ACCESS_RX_IN_PKT_CNT_OFFSET_RX_IN_PKT_EXIST_WIDTH                                                     (32)
typedef union LADP_ACCESS_RX_IN_PKT_CNT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 rx_in_pkt_exist:LADP_ACCESS_RX_IN_PKT_CNT_OFFSET_RX_IN_PKT_EXIST_WIDTH;                                 //[31: 0]
    } BF;
    jl_uint32 val[LADP_ACCESS_RX_IN_PKT_CNT_ENTRY_SIZE];
} LADP_ACCESS_RX_IN_PKT_CNT_t;

#define LADP_ACCESS_RX_OUT_PKT_CNT                                                             ((jl_uint32)0x0020303CU)
#define LADP_ACCESS_RX_OUT_PKT_CNT_NUM                                                         ((jl_uint32)0x00000001U)
#define LADP_ACCESS_RX_OUT_PKT_CNT_ENTRY_SIZE                                                                       (1)
#define LADP_ACCESS_RX_OUT_PKT_CNT_OFFSET_RX_OUT_PKT_EXIST                                                          (0)
#define LADP_ACCESS_RX_OUT_PKT_CNT_OFFSET_RX_OUT_PKT_EXIST_WIDTH                                                   (32)
typedef union LADP_ACCESS_RX_OUT_PKT_CNT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 rx_out_pkt_exist:LADP_ACCESS_RX_OUT_PKT_CNT_OFFSET_RX_OUT_PKT_EXIST_WIDTH;                              //[31: 0]
    } BF;
    jl_uint32 val[LADP_ACCESS_RX_OUT_PKT_CNT_ENTRY_SIZE];
} LADP_ACCESS_RX_OUT_PKT_CNT_t;

#define LADP_ACCESS_TX_IN_PKT_CNT                                                              ((jl_uint32)0x00203040U)
#define LADP_ACCESS_TX_IN_PKT_CNT_NUM                                                          ((jl_uint32)0x00000001U)
#define LADP_ACCESS_TX_IN_PKT_CNT_ENTRY_SIZE                                                                        (1)
#define LADP_ACCESS_TX_IN_PKT_CNT_OFFSET_TX_IN_PKT_EXIST                                                            (0)
#define LADP_ACCESS_TX_IN_PKT_CNT_OFFSET_TX_IN_PKT_EXIST_WIDTH                                                     (32)
typedef union LADP_ACCESS_TX_IN_PKT_CNT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 tx_in_pkt_exist:LADP_ACCESS_TX_IN_PKT_CNT_OFFSET_TX_IN_PKT_EXIST_WIDTH;                                 //[31: 0]
    } BF;
    jl_uint32 val[LADP_ACCESS_TX_IN_PKT_CNT_ENTRY_SIZE];
} LADP_ACCESS_TX_IN_PKT_CNT_t;

#define LADP_ACCESS_TX_OUT_PKT_CNT                                                             ((jl_uint32)0x00203044U)
#define LADP_ACCESS_TX_OUT_PKT_CNT_NUM                                                         ((jl_uint32)0x00000001U)
#define LADP_ACCESS_TX_OUT_PKT_CNT_ENTRY_SIZE                                                                       (1)
#define LADP_ACCESS_TX_OUT_PKT_CNT_OFFSET_TX_OUT_PKT_EXIST                                                          (0)
#define LADP_ACCESS_TX_OUT_PKT_CNT_OFFSET_TX_OUT_PKT_EXIST_WIDTH                                                   (32)
typedef union LADP_ACCESS_TX_OUT_PKT_CNT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 tx_out_pkt_exist:LADP_ACCESS_TX_OUT_PKT_CNT_OFFSET_TX_OUT_PKT_EXIST_WIDTH;                              //[31: 0]
    } BF;
    jl_uint32 val[LADP_ACCESS_TX_OUT_PKT_CNT_ENTRY_SIZE];
} LADP_ACCESS_TX_OUT_PKT_CNT_t;

#define LADP_ACCESS_SAG_CAR_CNT_CLR                                                            ((jl_uint32)0x00203048U)
#define LADP_ACCESS_SAG_CAR_CNT_CLR_NUM                                                        ((jl_uint32)0x00000001U)
#define LADP_ACCESS_SAG_CAR_CNT_CLR_ENTRY_SIZE                                                                      (1)
#define LADP_ACCESS_SAG_CAR_CNT_CLR_OFFSET_RSVD0                                                                    (1)
#define LADP_ACCESS_SAG_CAR_CNT_CLR_OFFSET_RSVD0_WIDTH                                                             (31)
#define LADP_ACCESS_SAG_CAR_CNT_CLR_OFFSET_SAG_CAR_CNT_CLR                                                          (0)
#define LADP_ACCESS_SAG_CAR_CNT_CLR_OFFSET_SAG_CAR_CNT_CLR_WIDTH                                                    (1)
typedef union LADP_ACCESS_SAG_CAR_CNT_CLR_u {
    struct __attribute__ ((packed)) {
        jl_uint32 sag_car_cnt_clr:LADP_ACCESS_SAG_CAR_CNT_CLR_OFFSET_SAG_CAR_CNT_CLR_WIDTH;                               //[ 0: 0]
        jl_uint32 rsvd0:LADP_ACCESS_SAG_CAR_CNT_CLR_OFFSET_RSVD0_WIDTH;                                                   //[31: 1]
    } BF;
    jl_uint32 val[LADP_ACCESS_SAG_CAR_CNT_CLR_ENTRY_SIZE];
} LADP_ACCESS_SAG_CAR_CNT_CLR_t;

#define LADP_ACCESS_DBG_MODE                                                                   ((jl_uint32)0x0020304CU)
#define LADP_ACCESS_DBG_MODE_NUM                                                               ((jl_uint32)0x00000001U)
#define LADP_ACCESS_DBG_MODE_ENTRY_SIZE                                                                             (1)
#define LADP_ACCESS_DBG_MODE_OFFSET_RSVD2                                                                          (24)
#define LADP_ACCESS_DBG_MODE_OFFSET_RSVD2_WIDTH                                                                     (8)
#define LADP_ACCESS_DBG_MODE_OFFSET_DBG_MODE                                                                        (0)
#define LADP_ACCESS_DBG_MODE_OFFSET_DBG_MODE_WIDTH                                                                  (3)
#define LADP_ACCESS_DBG_MODE_OFFSET_RSVD1                                                                           (3)
#define LADP_ACCESS_DBG_MODE_OFFSET_RSVD1_WIDTH                                                                     (5)
#define LADP_ACCESS_DBG_MODE_OFFSET_DBG_IFM_RX_EN                                                                   (8)
#define LADP_ACCESS_DBG_MODE_OFFSET_DBG_IFM_RX_EN_WIDTH                                                             (1)
#define LADP_ACCESS_DBG_MODE_OFFSET_DBG_IFM_TX_EN                                                                   (9)
#define LADP_ACCESS_DBG_MODE_OFFSET_DBG_IFM_TX_EN_WIDTH                                                             (1)
#define LADP_ACCESS_DBG_MODE_OFFSET_RSVD0                                                                          (10)
#define LADP_ACCESS_DBG_MODE_OFFSET_RSVD0_WIDTH                                                                     (6)
#define LADP_ACCESS_DBG_MODE_OFFSET_DBG_SAG2MAG_VECTOR                                                             (16)
#define LADP_ACCESS_DBG_MODE_OFFSET_DBG_SAG2MAG_VECTOR_WIDTH                                                        (8)
typedef union LADP_ACCESS_DBG_MODE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 dbg_mode:LADP_ACCESS_DBG_MODE_OFFSET_DBG_MODE_WIDTH;                                                    //[ 2: 0]
        jl_uint32 rsvd1:LADP_ACCESS_DBG_MODE_OFFSET_RSVD1_WIDTH;                                                          //[ 7: 3]
        jl_uint32 dbg_ifm_rx_en:LADP_ACCESS_DBG_MODE_OFFSET_DBG_IFM_RX_EN_WIDTH;                                          //[ 8: 8]
        jl_uint32 dbg_ifm_tx_en:LADP_ACCESS_DBG_MODE_OFFSET_DBG_IFM_TX_EN_WIDTH;                                          //[ 9: 9]
        jl_uint32 rsvd0:LADP_ACCESS_DBG_MODE_OFFSET_RSVD0_WIDTH;                                                          //[15:10]
        jl_uint32 dbg_sag2mag_vector:LADP_ACCESS_DBG_MODE_OFFSET_DBG_SAG2MAG_VECTOR_WIDTH;                                //[23:16]
        jl_uint32 rsvd2:LADP_ACCESS_DBG_MODE_OFFSET_RSVD2_WIDTH;                                                          //[31:24]
    } BF;
    jl_uint32 val[LADP_ACCESS_DBG_MODE_ENTRY_SIZE];
} LADP_ACCESS_DBG_MODE_t;

#define LADP_ACCESS_CLK_DETECT_THR                                                             ((jl_uint32)0x00203050U)
#define LADP_ACCESS_CLK_DETECT_THR_NUM                                                         ((jl_uint32)0x00000001U)
#define LADP_ACCESS_CLK_DETECT_THR_ENTRY_SIZE                                                                       (1)
#define LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_RX_RECOV_THR                                                      (0)
#define LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_RX_RECOV_THR_WIDTH                                                (8)
#define LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_RX_LOSS_THR                                                       (8)
#define LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_RX_LOSS_THR_WIDTH                                                 (8)
#define LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_TX_RECOV_THR                                                     (16)
#define LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_TX_RECOV_THR_WIDTH                                                (8)
#define LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_TX_LOSS_THR                                                      (24)
#define LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_TX_LOSS_THR_WIDTH                                                 (8)
typedef union LADP_ACCESS_CLK_DETECT_THR_u {
    struct __attribute__ ((packed)) {
        jl_uint32 sag_cfg_rx_recov_thr:LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_RX_RECOV_THR_WIDTH;                      //[ 7: 0]
        jl_uint32 sag_cfg_rx_loss_thr:LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_RX_LOSS_THR_WIDTH;                        //[15: 8]
        jl_uint32 sag_cfg_tx_recov_thr:LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_TX_RECOV_THR_WIDTH;                      //[23:16]
        jl_uint32 sag_cfg_tx_loss_thr:LADP_ACCESS_CLK_DETECT_THR_OFFSET_SAG_CFG_TX_LOSS_THR_WIDTH;                        //[31:24]
    } BF;
    jl_uint32 val[LADP_ACCESS_CLK_DETECT_THR_ENTRY_SIZE];
} LADP_ACCESS_CLK_DETECT_THR_t;

#define LADP_ACCESS_PHY_CLK_LOSS                                                               ((jl_uint32)0x00203054U)
#define LADP_ACCESS_PHY_CLK_LOSS_NUM                                                           ((jl_uint32)0x00000001U)
#define LADP_ACCESS_PHY_CLK_LOSS_ENTRY_SIZE                                                                         (1)
#define LADP_ACCESS_PHY_CLK_LOSS_OFFSET_RSVD0                                                                       (2)
#define LADP_ACCESS_PHY_CLK_LOSS_OFFSET_RSVD0_WIDTH                                                                (30)
#define LADP_ACCESS_PHY_CLK_LOSS_OFFSET_DBG_TX_CLK_LOSS                                                             (0)
#define LADP_ACCESS_PHY_CLK_LOSS_OFFSET_DBG_TX_CLK_LOSS_WIDTH                                                       (1)
#define LADP_ACCESS_PHY_CLK_LOSS_OFFSET_DBG_RX_CLK_LOSS                                                             (1)
#define LADP_ACCESS_PHY_CLK_LOSS_OFFSET_DBG_RX_CLK_LOSS_WIDTH                                                       (1)
typedef union LADP_ACCESS_PHY_CLK_LOSS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 dbg_tx_clk_loss:LADP_ACCESS_PHY_CLK_LOSS_OFFSET_DBG_TX_CLK_LOSS_WIDTH;                                  //[ 0: 0]
        jl_uint32 dbg_rx_clk_loss:LADP_ACCESS_PHY_CLK_LOSS_OFFSET_DBG_RX_CLK_LOSS_WIDTH;                                  //[ 1: 1]
        jl_uint32 rsvd0:LADP_ACCESS_PHY_CLK_LOSS_OFFSET_RSVD0_WIDTH;                                                      //[31: 2]
    } BF;
    jl_uint32 val[LADP_ACCESS_PHY_CLK_LOSS_ENTRY_SIZE];
} LADP_ACCESS_PHY_CLK_LOSS_t;

#define LADP_ACCESS_RULE_MASK                                                                  ((jl_uint32)0x00203058U)
#define LADP_ACCESS_RULE_MASK_NUM                                                              ((jl_uint32)0x00000001U)
#define LADP_ACCESS_RULE_MASK_ENTRY_SIZE                                                                            (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_RSVD1                                                                         (13)
#define LADP_ACCESS_RULE_MASK_OFFSET_RSVD1_WIDTH                                                                   (19)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE0_MASK                                                                  (0)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE0_MASK_WIDTH                                                            (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE1_MASK                                                                  (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE1_MASK_WIDTH                                                            (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE2_MASK                                                                  (2)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE2_MASK_WIDTH                                                            (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE3_MASK                                                                  (3)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE3_MASK_WIDTH                                                            (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE4_MASK                                                                  (4)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE4_MASK_WIDTH                                                            (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE5_MASK                                                                  (5)
#define LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE5_MASK_WIDTH                                                            (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_RSVD0                                                                          (6)
#define LADP_ACCESS_RULE_MASK_OFFSET_RSVD0_WIDTH                                                                    (2)
#define LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE0_MASK                                                                  (8)
#define LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE0_MASK_WIDTH                                                            (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE1_MASK                                                                  (9)
#define LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE1_MASK_WIDTH                                                            (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE2_MASK                                                                 (10)
#define LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE2_MASK_WIDTH                                                            (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE3_MASK                                                                 (11)
#define LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE3_MASK_WIDTH                                                            (1)
#define LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE4_MASK                                                                 (12)
#define LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE4_MASK_WIDTH                                                            (1)
typedef union LADP_ACCESS_RULE_MASK_u {
    struct __attribute__ ((packed)) {
        jl_uint32 rx_rule0_mask:LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE0_MASK_WIDTH;                                         //[ 0: 0]
        jl_uint32 rx_rule1_mask:LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE1_MASK_WIDTH;                                         //[ 1: 1]
        jl_uint32 rx_rule2_mask:LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE2_MASK_WIDTH;                                         //[ 2: 2]
        jl_uint32 rx_rule3_mask:LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE3_MASK_WIDTH;                                         //[ 3: 3]
        jl_uint32 rx_rule4_mask:LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE4_MASK_WIDTH;                                         //[ 4: 4]
        jl_uint32 rx_rule5_mask:LADP_ACCESS_RULE_MASK_OFFSET_RX_RULE5_MASK_WIDTH;                                         //[ 5: 5]
        jl_uint32 rsvd0:LADP_ACCESS_RULE_MASK_OFFSET_RSVD0_WIDTH;                                                         //[ 7: 6]
        jl_uint32 tx_rule0_mask:LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE0_MASK_WIDTH;                                         //[ 8: 8]
        jl_uint32 tx_rule1_mask:LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE1_MASK_WIDTH;                                         //[ 9: 9]
        jl_uint32 tx_rule2_mask:LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE2_MASK_WIDTH;                                         //[10:10]
        jl_uint32 tx_rule3_mask:LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE3_MASK_WIDTH;                                         //[11:11]
        jl_uint32 tx_rule4_mask:LADP_ACCESS_RULE_MASK_OFFSET_TX_RULE4_MASK_WIDTH;                                         //[12:12]
        jl_uint32 rsvd1:LADP_ACCESS_RULE_MASK_OFFSET_RSVD1_WIDTH;                                                         //[31:13]
    } BF;
    jl_uint32 val[LADP_ACCESS_RULE_MASK_ENTRY_SIZE];
} LADP_ACCESS_RULE_MASK_t;

#define LADP_ACCESS_RX_EXT_CRS_COL_SEL                                                         ((jl_uint32)0x0020305CU)
#define LADP_ACCESS_RX_EXT_CRS_COL_SEL_NUM                                                     ((jl_uint32)0x00000001U)
#define LADP_ACCESS_RX_EXT_CRS_COL_SEL_ENTRY_SIZE                                                                   (1)
#define LADP_ACCESS_RX_EXT_CRS_COL_SEL_OFFSET_RSVD0                                                                 (1)
#define LADP_ACCESS_RX_EXT_CRS_COL_SEL_OFFSET_RSVD0_WIDTH                                                          (31)
#define LADP_ACCESS_RX_EXT_CRS_COL_SEL_OFFSET_RX_EXT_CRS_COL_SEL                                                    (0)
#define LADP_ACCESS_RX_EXT_CRS_COL_SEL_OFFSET_RX_EXT_CRS_COL_SEL_WIDTH                                              (1)
typedef union LADP_ACCESS_RX_EXT_CRS_COL_SEL_u {
    struct __attribute__ ((packed)) {
        jl_uint32 rx_ext_crs_col_sel:LADP_ACCESS_RX_EXT_CRS_COL_SEL_OFFSET_RX_EXT_CRS_COL_SEL_WIDTH;                      //[ 0: 0]
        jl_uint32 rsvd0:LADP_ACCESS_RX_EXT_CRS_COL_SEL_OFFSET_RSVD0_WIDTH;                                                //[31: 1]
    } BF;
    jl_uint32 val[LADP_ACCESS_RX_EXT_CRS_COL_SEL_ENTRY_SIZE];
} LADP_ACCESS_RX_EXT_CRS_COL_SEL_t;

#endif /* __JL_REG_LADP_ACCESS_H__ */

