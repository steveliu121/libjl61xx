//reg_ccs.h
/*
* Automatically generated by gen_c_api.py, don't edit it
*/
#ifndef __JL_REG_CCS_H__
#define __JL_REG_CCS_H__

#include <jl_types.h>

#define CCS_BASE                                                                               ((jl_uint32)0x00201000U)
#define CCS_BLOCK_SIZE                                                                         ((jl_uint32)0x00001000U)

#define CCS_CHIP_INT                                                                           ((jl_uint32)0x00201000U)
#define CCS_CHIP_INT_NUM                                                                       ((jl_uint32)0x00000001U)
#define CCS_CHIP_INT_ENTRY_SIZE                                                                                     (1)
#define CCS_CHIP_INT_OFFSET_RSVD0                                                                                   (4)
#define CCS_CHIP_INT_OFFSET_RSVD0_WIDTH                                                                            (28)
#define CCS_CHIP_INT_OFFSET_CCS_INT                                                                                 (0)
#define CCS_CHIP_INT_OFFSET_CCS_INT_WIDTH                                                                           (1)
#define CCS_CHIP_INT_OFFSET_SWC_INT                                                                                 (1)
#define CCS_CHIP_INT_OFFSET_SWC_INT_WIDTH                                                                           (1)
#define CCS_CHIP_INT_OFFSET_MAG_INT                                                                                 (2)
#define CCS_CHIP_INT_OFFSET_MAG_INT_WIDTH                                                                           (1)
#define CCS_CHIP_INT_OFFSET_SAG_INT                                                                                 (3)
#define CCS_CHIP_INT_OFFSET_SAG_INT_WIDTH                                                                           (1)
typedef union CCS_CHIP_INT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 ccs_int:CCS_CHIP_INT_OFFSET_CCS_INT_WIDTH;                                                              //[ 0: 0]
        jl_uint32 swc_int:CCS_CHIP_INT_OFFSET_SWC_INT_WIDTH;                                                              //[ 1: 1]
        jl_uint32 mag_int:CCS_CHIP_INT_OFFSET_MAG_INT_WIDTH;                                                              //[ 2: 2]
        jl_uint32 sag_int:CCS_CHIP_INT_OFFSET_SAG_INT_WIDTH;                                                              //[ 3: 3]
        jl_uint32 rsvd0:CCS_CHIP_INT_OFFSET_RSVD0_WIDTH;                                                                  //[31: 4]
    } BF;
    jl_uint32 val[CCS_CHIP_INT_ENTRY_SIZE];
} CCS_CHIP_INT_t;

#define CCS_INT_STATUS                                                                         ((jl_uint32)0x00201004U)
#define CCS_INT_STATUS_NUM                                                                     ((jl_uint32)0x00000001U)
#define CCS_INT_STATUS_ENTRY_SIZE                                                                                   (1)
#define CCS_INT_STATUS_OFFSET_AHBL_SYS_TO                                                                           (0)
#define CCS_INT_STATUS_OFFSET_AHBL_SYS_TO_WIDTH                                                                     (1)
#define CCS_INT_STATUS_OFFSET_APB_SYS_TO                                                                            (1)
#define CCS_INT_STATUS_OFFSET_APB_SYS_TO_WIDTH                                                                      (1)
#define CCS_INT_STATUS_OFFSET_APB_PHY_TO                                                                            (2)
#define CCS_INT_STATUS_OFFSET_APB_PHY_TO_WIDTH                                                                      (1)
#define CCS_INT_STATUS_OFFSET_EIFS_AHBL_ADDR_OOR                                                                    (3)
#define CCS_INT_STATUS_OFFSET_EIFS_AHBL_ADDR_OOR_WIDTH                                                              (1)
#define CCS_INT_STATUS_OFFSET_EIFS_APB_PHY_ADDR_OOR                                                                 (4)
#define CCS_INT_STATUS_OFFSET_EIFS_APB_PHY_ADDR_OOR_WIDTH                                                           (1)
#define CCS_INT_STATUS_OFFSET_CPU_AHBL_ADDR_OOR                                                                     (5)
#define CCS_INT_STATUS_OFFSET_CPU_AHBL_ADDR_OOR_WIDTH                                                               (1)
#define CCS_INT_STATUS_OFFSET_CPU_APB_ADDR_OOR                                                                      (6)
#define CCS_INT_STATUS_OFFSET_CPU_APB_ADDR_OOR_WIDTH                                                                (1)
#define CCS_INT_STATUS_OFFSET_EIFS_AHBL_MUL_OVERLAP                                                                 (7)
#define CCS_INT_STATUS_OFFSET_EIFS_AHBL_MUL_OVERLAP_WIDTH                                                           (1)
#define CCS_INT_STATUS_OFFSET_CPU_AHBL_MUL_OVERLAP                                                                  (8)
#define CCS_INT_STATUS_OFFSET_CPU_AHBL_MUL_OVERLAP_WIDTH                                                            (1)
#define CCS_INT_STATUS_OFFSET_RSVD0                                                                                 (9)
#define CCS_INT_STATUS_OFFSET_RSVD0_WIDTH                                                                           (3)
#define CCS_INT_STATUS_OFFSET_EIFS_I2C_NACK_ERR                                                                    (12)
#define CCS_INT_STATUS_OFFSET_EIFS_I2C_NACK_ERR_WIDTH                                                               (1)
#define CCS_INT_STATUS_OFFSET_EIFS_I2C_DEVID_ERR                                                                   (13)
#define CCS_INT_STATUS_OFFSET_EIFS_I2C_DEVID_ERR_WIDTH                                                              (1)
#define CCS_INT_STATUS_OFFSET_EIFS_I2C_START_ERR                                                                   (14)
#define CCS_INT_STATUS_OFFSET_EIFS_I2C_START_ERR_WIDTH                                                              (1)
#define CCS_INT_STATUS_OFFSET_EIFS_I2C_STOP_ERR                                                                    (15)
#define CCS_INT_STATUS_OFFSET_EIFS_I2C_STOP_ERR_WIDTH                                                               (1)
#define CCS_INT_STATUS_OFFSET_EIFS_SPI_ERR                                                                         (16)
#define CCS_INT_STATUS_OFFSET_EIFS_SPI_ERR_WIDTH                                                                    (1)
#define CCS_INT_STATUS_OFFSET_EIFS_MIIM_ERR                                                                        (17)
#define CCS_INT_STATUS_OFFSET_EIFS_MIIM_ERR_WIDTH                                                                   (1)
#define CCS_INT_STATUS_OFFSET_EIFS_IDA_ERR                                                                         (18)
#define CCS_INT_STATUS_OFFSET_EIFS_IDA_ERR_WIDTH                                                                    (1)
#define CCS_INT_STATUS_OFFSET_EIFS_APB_MISS_ERR                                                                    (19)
#define CCS_INT_STATUS_OFFSET_EIFS_APB_MISS_ERR_WIDTH                                                               (1)
#define CCS_INT_STATUS_OFFSET_EIFS_PAGE_SEL_ERR                                                                    (20)
#define CCS_INT_STATUS_OFFSET_EIFS_PAGE_SEL_ERR_WIDTH                                                               (1)
#define CCS_INT_STATUS_OFFSET_EIFS_IDA_RD_FIFO_EMPTY_ERR                                                           (21)
#define CCS_INT_STATUS_OFFSET_EIFS_IDA_RD_FIFO_EMPTY_ERR_WIDTH                                                      (1)
#define CCS_INT_STATUS_OFFSET_EIFS_IDA_RD_FIFO_FULL_ERR                                                            (22)
#define CCS_INT_STATUS_OFFSET_EIFS_IDA_RD_FIFO_FULL_ERR_WIDTH                                                       (1)
#define CCS_INT_STATUS_OFFSET_EIFS_IDA_WR_FIFO_EMPTY_ERR                                                           (23)
#define CCS_INT_STATUS_OFFSET_EIFS_IDA_WR_FIFO_EMPTY_ERR_WIDTH                                                      (1)
#define CCS_INT_STATUS_OFFSET_EIFS_IDA_WR_FIFO_FULL_ERR                                                            (24)
#define CCS_INT_STATUS_OFFSET_EIFS_IDA_WR_FIFO_FULL_ERR_WIDTH                                                       (1)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_0                                                                       (25)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_0_WIDTH                                                                  (1)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_1                                                                       (26)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_1_WIDTH                                                                  (1)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_2                                                                       (27)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_2_WIDTH                                                                  (1)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_3                                                                       (28)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_3_WIDTH                                                                  (1)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_4                                                                       (29)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_4_WIDTH                                                                  (1)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_5                                                                       (30)
#define CCS_INT_STATUS_OFFSET_USER_DEF_INT_5_WIDTH                                                                  (1)
#define CCS_INT_STATUS_OFFSET_PHY_INT                                                                              (31)
#define CCS_INT_STATUS_OFFSET_PHY_INT_WIDTH                                                                         (1)
typedef union CCS_INT_STATUS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 ahbl_sys_to:CCS_INT_STATUS_OFFSET_AHBL_SYS_TO_WIDTH;                                                    //[ 0: 0]
        jl_uint32 apb_sys_to:CCS_INT_STATUS_OFFSET_APB_SYS_TO_WIDTH;                                                      //[ 1: 1]
        jl_uint32 apb_phy_to:CCS_INT_STATUS_OFFSET_APB_PHY_TO_WIDTH;                                                      //[ 2: 2]
        jl_uint32 eifs_ahbl_addr_oor:CCS_INT_STATUS_OFFSET_EIFS_AHBL_ADDR_OOR_WIDTH;                                      //[ 3: 3]
        jl_uint32 eifs_apb_phy_addr_oor:CCS_INT_STATUS_OFFSET_EIFS_APB_PHY_ADDR_OOR_WIDTH;                                //[ 4: 4]
        jl_uint32 cpu_ahbl_addr_oor:CCS_INT_STATUS_OFFSET_CPU_AHBL_ADDR_OOR_WIDTH;                                        //[ 5: 5]
        jl_uint32 cpu_apb_addr_oor:CCS_INT_STATUS_OFFSET_CPU_APB_ADDR_OOR_WIDTH;                                          //[ 6: 6]
        jl_uint32 eifs_ahbl_mul_overlap:CCS_INT_STATUS_OFFSET_EIFS_AHBL_MUL_OVERLAP_WIDTH;                                //[ 7: 7]
        jl_uint32 cpu_ahbl_mul_overlap:CCS_INT_STATUS_OFFSET_CPU_AHBL_MUL_OVERLAP_WIDTH;                                  //[ 8: 8]
        jl_uint32 rsvd0:CCS_INT_STATUS_OFFSET_RSVD0_WIDTH;                                                                //[11: 9]
        jl_uint32 eifs_i2c_nack_err:CCS_INT_STATUS_OFFSET_EIFS_I2C_NACK_ERR_WIDTH;                                        //[12:12]
        jl_uint32 eifs_i2c_devid_err:CCS_INT_STATUS_OFFSET_EIFS_I2C_DEVID_ERR_WIDTH;                                      //[13:13]
        jl_uint32 eifs_i2c_start_err:CCS_INT_STATUS_OFFSET_EIFS_I2C_START_ERR_WIDTH;                                      //[14:14]
        jl_uint32 eifs_i2c_stop_err:CCS_INT_STATUS_OFFSET_EIFS_I2C_STOP_ERR_WIDTH;                                        //[15:15]
        jl_uint32 eifs_spi_err:CCS_INT_STATUS_OFFSET_EIFS_SPI_ERR_WIDTH;                                                  //[16:16]
        jl_uint32 eifs_miim_err:CCS_INT_STATUS_OFFSET_EIFS_MIIM_ERR_WIDTH;                                                //[17:17]
        jl_uint32 eifs_ida_err:CCS_INT_STATUS_OFFSET_EIFS_IDA_ERR_WIDTH;                                                  //[18:18]
        jl_uint32 eifs_apb_miss_err:CCS_INT_STATUS_OFFSET_EIFS_APB_MISS_ERR_WIDTH;                                        //[19:19]
        jl_uint32 eifs_page_sel_err:CCS_INT_STATUS_OFFSET_EIFS_PAGE_SEL_ERR_WIDTH;                                        //[20:20]
        jl_uint32 eifs_ida_rd_fifo_empty_err:CCS_INT_STATUS_OFFSET_EIFS_IDA_RD_FIFO_EMPTY_ERR_WIDTH;                      //[21:21]
        jl_uint32 eifs_ida_rd_fifo_full_err:CCS_INT_STATUS_OFFSET_EIFS_IDA_RD_FIFO_FULL_ERR_WIDTH;                        //[22:22]
        jl_uint32 eifs_ida_wr_fifo_empty_err:CCS_INT_STATUS_OFFSET_EIFS_IDA_WR_FIFO_EMPTY_ERR_WIDTH;                      //[23:23]
        jl_uint32 eifs_ida_wr_fifo_full_err:CCS_INT_STATUS_OFFSET_EIFS_IDA_WR_FIFO_FULL_ERR_WIDTH;                        //[24:24]
        jl_uint32 user_def_int_0:CCS_INT_STATUS_OFFSET_USER_DEF_INT_0_WIDTH;                                              //[25:25]
        jl_uint32 user_def_int_1:CCS_INT_STATUS_OFFSET_USER_DEF_INT_1_WIDTH;                                              //[26:26]
        jl_uint32 user_def_int_2:CCS_INT_STATUS_OFFSET_USER_DEF_INT_2_WIDTH;                                              //[27:27]
        jl_uint32 user_def_int_3:CCS_INT_STATUS_OFFSET_USER_DEF_INT_3_WIDTH;                                              //[28:28]
        jl_uint32 user_def_int_4:CCS_INT_STATUS_OFFSET_USER_DEF_INT_4_WIDTH;                                              //[29:29]
        jl_uint32 user_def_int_5:CCS_INT_STATUS_OFFSET_USER_DEF_INT_5_WIDTH;                                              //[30:30]
        jl_uint32 phy_int:CCS_INT_STATUS_OFFSET_PHY_INT_WIDTH;                                                            //[31:31]
    } BF;
    jl_uint32 val[CCS_INT_STATUS_ENTRY_SIZE];
} CCS_INT_STATUS_t;

#define CCS_INT_ENABLE                                                                         ((jl_uint32)0x00201008U)
#define CCS_INT_ENABLE_NUM                                                                     ((jl_uint32)0x00000001U)
#define CCS_INT_ENABLE_ENTRY_SIZE                                                                                   (1)
#define CCS_INT_ENABLE_OFFSET_AHBL_SYS_TO_EN                                                                        (0)
#define CCS_INT_ENABLE_OFFSET_AHBL_SYS_TO_EN_WIDTH                                                                  (1)
#define CCS_INT_ENABLE_OFFSET_APB_SYS_TO_EN                                                                         (1)
#define CCS_INT_ENABLE_OFFSET_APB_SYS_TO_EN_WIDTH                                                                   (1)
#define CCS_INT_ENABLE_OFFSET_APB_PHY_TO_EN                                                                         (2)
#define CCS_INT_ENABLE_OFFSET_APB_PHY_TO_EN_WIDTH                                                                   (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_AHBL_ADDR_OOR_EN                                                                 (3)
#define CCS_INT_ENABLE_OFFSET_EIFS_AHBL_ADDR_OOR_EN_WIDTH                                                           (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_APB_PHY_ADDR_OOR_EN                                                              (4)
#define CCS_INT_ENABLE_OFFSET_EIFS_APB_PHY_ADDR_OOR_EN_WIDTH                                                        (1)
#define CCS_INT_ENABLE_OFFSET_CPU_AHBL_ADDR_OOR_EN                                                                  (5)
#define CCS_INT_ENABLE_OFFSET_CPU_AHBL_ADDR_OOR_EN_WIDTH                                                            (1)
#define CCS_INT_ENABLE_OFFSET_CPU_APB_ADDR_OOR_EN                                                                   (6)
#define CCS_INT_ENABLE_OFFSET_CPU_APB_ADDR_OOR_EN_WIDTH                                                             (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_AHBL_MUL_OVERLAP_EN                                                              (7)
#define CCS_INT_ENABLE_OFFSET_EIFS_AHBL_MUL_OVERLAP_EN_WIDTH                                                        (1)
#define CCS_INT_ENABLE_OFFSET_CPU_AHBL_MUL_OVERLAP_EN                                                               (8)
#define CCS_INT_ENABLE_OFFSET_CPU_AHBL_MUL_OVERLAP_EN_WIDTH                                                         (1)
#define CCS_INT_ENABLE_OFFSET_RSVD0                                                                                 (9)
#define CCS_INT_ENABLE_OFFSET_RSVD0_WIDTH                                                                           (3)
#define CCS_INT_ENABLE_OFFSET_EIFS_I2C_NACK_ERR_EN                                                                 (12)
#define CCS_INT_ENABLE_OFFSET_EIFS_I2C_NACK_ERR_EN_WIDTH                                                            (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_I2C_DEVID_ERR_EN                                                                (13)
#define CCS_INT_ENABLE_OFFSET_EIFS_I2C_DEVID_ERR_EN_WIDTH                                                           (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_I2C_START_ERR_EN                                                                (14)
#define CCS_INT_ENABLE_OFFSET_EIFS_I2C_START_ERR_EN_WIDTH                                                           (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_I2C_STOP_ERR_EN                                                                 (15)
#define CCS_INT_ENABLE_OFFSET_EIFS_I2C_STOP_ERR_EN_WIDTH                                                            (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_SPI_ERR_EN                                                                      (16)
#define CCS_INT_ENABLE_OFFSET_EIFS_SPI_ERR_EN_WIDTH                                                                 (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_MIIM_ERR_EN                                                                     (17)
#define CCS_INT_ENABLE_OFFSET_EIFS_MIIM_ERR_EN_WIDTH                                                                (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_IDA_ERR_EN                                                                      (18)
#define CCS_INT_ENABLE_OFFSET_EIFS_IDA_ERR_EN_WIDTH                                                                 (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_APB_MISS_ERR_EN                                                                 (19)
#define CCS_INT_ENABLE_OFFSET_EIFS_APB_MISS_ERR_EN_WIDTH                                                            (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_PAGE_SEL_ERR_EN                                                                 (20)
#define CCS_INT_ENABLE_OFFSET_EIFS_PAGE_SEL_ERR_EN_WIDTH                                                            (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_IDA_RD_FIFO_EMPTY_ERR_EN                                                        (21)
#define CCS_INT_ENABLE_OFFSET_EIFS_IDA_RD_FIFO_EMPTY_ERR_EN_WIDTH                                                   (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_IDA_RD_FIFO_FULL_ERR_EN                                                         (22)
#define CCS_INT_ENABLE_OFFSET_EIFS_IDA_RD_FIFO_FULL_ERR_EN_WIDTH                                                    (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_IDA_WR_FIFO_EMPTY_ERR_EN                                                        (23)
#define CCS_INT_ENABLE_OFFSET_EIFS_IDA_WR_FIFO_EMPTY_ERR_EN_WIDTH                                                   (1)
#define CCS_INT_ENABLE_OFFSET_EIFS_IDA_WR_FIFO_FULL_ERR_EN                                                         (24)
#define CCS_INT_ENABLE_OFFSET_EIFS_IDA_WR_FIFO_FULL_ERR_EN_WIDTH                                                    (1)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_0_EN                                                                    (25)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_0_EN_WIDTH                                                               (1)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_1_EN                                                                    (26)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_1_EN_WIDTH                                                               (1)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_2_EN                                                                    (27)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_2_EN_WIDTH                                                               (1)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_3_EN                                                                    (28)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_3_EN_WIDTH                                                               (1)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_4_EN                                                                    (29)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_4_EN_WIDTH                                                               (1)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_5_EN                                                                    (30)
#define CCS_INT_ENABLE_OFFSET_USER_DEF_INT_5_EN_WIDTH                                                               (1)
#define CCS_INT_ENABLE_OFFSET_PHY_INT_EN                                                                           (31)
#define CCS_INT_ENABLE_OFFSET_PHY_INT_EN_WIDTH                                                                      (1)
typedef union CCS_INT_ENABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 ahbl_sys_to_en:CCS_INT_ENABLE_OFFSET_AHBL_SYS_TO_EN_WIDTH;                                              //[ 0: 0]
        jl_uint32 apb_sys_to_en:CCS_INT_ENABLE_OFFSET_APB_SYS_TO_EN_WIDTH;                                                //[ 1: 1]
        jl_uint32 apb_phy_to_en:CCS_INT_ENABLE_OFFSET_APB_PHY_TO_EN_WIDTH;                                                //[ 2: 2]
        jl_uint32 eifs_ahbl_addr_oor_en:CCS_INT_ENABLE_OFFSET_EIFS_AHBL_ADDR_OOR_EN_WIDTH;                                //[ 3: 3]
        jl_uint32 eifs_apb_phy_addr_oor_en:CCS_INT_ENABLE_OFFSET_EIFS_APB_PHY_ADDR_OOR_EN_WIDTH;                          //[ 4: 4]
        jl_uint32 cpu_ahbl_addr_oor_en:CCS_INT_ENABLE_OFFSET_CPU_AHBL_ADDR_OOR_EN_WIDTH;                                  //[ 5: 5]
        jl_uint32 cpu_apb_addr_oor_en:CCS_INT_ENABLE_OFFSET_CPU_APB_ADDR_OOR_EN_WIDTH;                                    //[ 6: 6]
        jl_uint32 eifs_ahbl_mul_overlap_en:CCS_INT_ENABLE_OFFSET_EIFS_AHBL_MUL_OVERLAP_EN_WIDTH;                          //[ 7: 7]
        jl_uint32 cpu_ahbl_mul_overlap_en:CCS_INT_ENABLE_OFFSET_CPU_AHBL_MUL_OVERLAP_EN_WIDTH;                            //[ 8: 8]
        jl_uint32 rsvd0:CCS_INT_ENABLE_OFFSET_RSVD0_WIDTH;                                                                //[11: 9]
        jl_uint32 eifs_i2c_nack_err_en:CCS_INT_ENABLE_OFFSET_EIFS_I2C_NACK_ERR_EN_WIDTH;                                  //[12:12]
        jl_uint32 eifs_i2c_devid_err_en:CCS_INT_ENABLE_OFFSET_EIFS_I2C_DEVID_ERR_EN_WIDTH;                                //[13:13]
        jl_uint32 eifs_i2c_start_err_en:CCS_INT_ENABLE_OFFSET_EIFS_I2C_START_ERR_EN_WIDTH;                                //[14:14]
        jl_uint32 eifs_i2c_stop_err_en:CCS_INT_ENABLE_OFFSET_EIFS_I2C_STOP_ERR_EN_WIDTH;                                  //[15:15]
        jl_uint32 eifs_spi_err_en:CCS_INT_ENABLE_OFFSET_EIFS_SPI_ERR_EN_WIDTH;                                            //[16:16]
        jl_uint32 eifs_miim_err_en:CCS_INT_ENABLE_OFFSET_EIFS_MIIM_ERR_EN_WIDTH;                                          //[17:17]
        jl_uint32 eifs_ida_err_en:CCS_INT_ENABLE_OFFSET_EIFS_IDA_ERR_EN_WIDTH;                                            //[18:18]
        jl_uint32 eifs_apb_miss_err_en:CCS_INT_ENABLE_OFFSET_EIFS_APB_MISS_ERR_EN_WIDTH;                                  //[19:19]
        jl_uint32 eifs_page_sel_err_en:CCS_INT_ENABLE_OFFSET_EIFS_PAGE_SEL_ERR_EN_WIDTH;                                  //[20:20]
        jl_uint32 eifs_ida_rd_fifo_empty_err_en:CCS_INT_ENABLE_OFFSET_EIFS_IDA_RD_FIFO_EMPTY_ERR_EN_WIDTH;                //[21:21]
        jl_uint32 eifs_ida_rd_fifo_full_err_en:CCS_INT_ENABLE_OFFSET_EIFS_IDA_RD_FIFO_FULL_ERR_EN_WIDTH;                  //[22:22]
        jl_uint32 eifs_ida_wr_fifo_empty_err_en:CCS_INT_ENABLE_OFFSET_EIFS_IDA_WR_FIFO_EMPTY_ERR_EN_WIDTH;                //[23:23]
        jl_uint32 eifs_ida_wr_fifo_full_err_en:CCS_INT_ENABLE_OFFSET_EIFS_IDA_WR_FIFO_FULL_ERR_EN_WIDTH;                  //[24:24]
        jl_uint32 user_def_int_0_en:CCS_INT_ENABLE_OFFSET_USER_DEF_INT_0_EN_WIDTH;                                        //[25:25]
        jl_uint32 user_def_int_1_en:CCS_INT_ENABLE_OFFSET_USER_DEF_INT_1_EN_WIDTH;                                        //[26:26]
        jl_uint32 user_def_int_2_en:CCS_INT_ENABLE_OFFSET_USER_DEF_INT_2_EN_WIDTH;                                        //[27:27]
        jl_uint32 user_def_int_3_en:CCS_INT_ENABLE_OFFSET_USER_DEF_INT_3_EN_WIDTH;                                        //[28:28]
        jl_uint32 user_def_int_4_en:CCS_INT_ENABLE_OFFSET_USER_DEF_INT_4_EN_WIDTH;                                        //[29:29]
        jl_uint32 user_def_int_5_en:CCS_INT_ENABLE_OFFSET_USER_DEF_INT_5_EN_WIDTH;                                        //[30:30]
        jl_uint32 phy_int_en:CCS_INT_ENABLE_OFFSET_PHY_INT_EN_WIDTH;                                                      //[31:31]
    } BF;
    jl_uint32 val[CCS_INT_ENABLE_ENTRY_SIZE];
} CCS_INT_ENABLE_t;

#define CCS_INT_SET                                                                            ((jl_uint32)0x0020100CU)
#define CCS_INT_SET_NUM                                                                        ((jl_uint32)0x00000001U)
#define CCS_INT_SET_ENTRY_SIZE                                                                                      (1)
#define CCS_INT_SET_OFFSET_AHBL_SYS_TO_SET                                                                          (0)
#define CCS_INT_SET_OFFSET_AHBL_SYS_TO_SET_WIDTH                                                                    (1)
#define CCS_INT_SET_OFFSET_APB_SYS_TO_SET                                                                           (1)
#define CCS_INT_SET_OFFSET_APB_SYS_TO_SET_WIDTH                                                                     (1)
#define CCS_INT_SET_OFFSET_APB_PHY_TO_SET                                                                           (2)
#define CCS_INT_SET_OFFSET_APB_PHY_TO_SET_WIDTH                                                                     (1)
#define CCS_INT_SET_OFFSET_EIFS_AHBL_ADDR_OOR_SET                                                                   (3)
#define CCS_INT_SET_OFFSET_EIFS_AHBL_ADDR_OOR_SET_WIDTH                                                             (1)
#define CCS_INT_SET_OFFSET_EIFS_APB_PHY_ADDR_OOR_SET                                                                (4)
#define CCS_INT_SET_OFFSET_EIFS_APB_PHY_ADDR_OOR_SET_WIDTH                                                          (1)
#define CCS_INT_SET_OFFSET_CPU_AHBL_ADDR_OOR_SET                                                                    (5)
#define CCS_INT_SET_OFFSET_CPU_AHBL_ADDR_OOR_SET_WIDTH                                                              (1)
#define CCS_INT_SET_OFFSET_CPU_APB_ADDR_OOR_SET                                                                     (6)
#define CCS_INT_SET_OFFSET_CPU_APB_ADDR_OOR_SET_WIDTH                                                               (1)
#define CCS_INT_SET_OFFSET_EIFS_AHBL_MUL_OVERLAP_SET                                                                (7)
#define CCS_INT_SET_OFFSET_EIFS_AHBL_MUL_OVERLAP_SET_WIDTH                                                          (1)
#define CCS_INT_SET_OFFSET_CPU_AHBL_MUL_OVERLAP_SET                                                                 (8)
#define CCS_INT_SET_OFFSET_CPU_AHBL_MUL_OVERLAP_SET_WIDTH                                                           (1)
#define CCS_INT_SET_OFFSET_RSVD0                                                                                    (9)
#define CCS_INT_SET_OFFSET_RSVD0_WIDTH                                                                              (3)
#define CCS_INT_SET_OFFSET_EIFS_I2C_NACK_ERR_SET                                                                   (12)
#define CCS_INT_SET_OFFSET_EIFS_I2C_NACK_ERR_SET_WIDTH                                                              (1)
#define CCS_INT_SET_OFFSET_EIFS_I2C_DEVID_ERR_SET                                                                  (13)
#define CCS_INT_SET_OFFSET_EIFS_I2C_DEVID_ERR_SET_WIDTH                                                             (1)
#define CCS_INT_SET_OFFSET_EIFS_I2C_START_ERR_SET                                                                  (14)
#define CCS_INT_SET_OFFSET_EIFS_I2C_START_ERR_SET_WIDTH                                                             (1)
#define CCS_INT_SET_OFFSET_EIFS_I2C_STOP_ERR_SET                                                                   (15)
#define CCS_INT_SET_OFFSET_EIFS_I2C_STOP_ERR_SET_WIDTH                                                              (1)
#define CCS_INT_SET_OFFSET_EIFS_SPI_ERR_SET                                                                        (16)
#define CCS_INT_SET_OFFSET_EIFS_SPI_ERR_SET_WIDTH                                                                   (1)
#define CCS_INT_SET_OFFSET_EIFS_MIIM_ERR_SET                                                                       (17)
#define CCS_INT_SET_OFFSET_EIFS_MIIM_ERR_SET_WIDTH                                                                  (1)
#define CCS_INT_SET_OFFSET_EIFS_IDA_ERR_SET                                                                        (18)
#define CCS_INT_SET_OFFSET_EIFS_IDA_ERR_SET_WIDTH                                                                   (1)
#define CCS_INT_SET_OFFSET_EIFS_APB_MISS_ERR_SET                                                                   (19)
#define CCS_INT_SET_OFFSET_EIFS_APB_MISS_ERR_SET_WIDTH                                                              (1)
#define CCS_INT_SET_OFFSET_EIFS_PAGE_SEL_ERR_SET                                                                   (20)
#define CCS_INT_SET_OFFSET_EIFS_PAGE_SEL_ERR_SET_WIDTH                                                              (1)
#define CCS_INT_SET_OFFSET_EIFS_IDA_RD_FIFO_EMPTY_ERR_SET                                                          (21)
#define CCS_INT_SET_OFFSET_EIFS_IDA_RD_FIFO_EMPTY_ERR_SET_WIDTH                                                     (1)
#define CCS_INT_SET_OFFSET_EIFS_IDA_RD_FIFO_FULL_ERR_SET                                                           (22)
#define CCS_INT_SET_OFFSET_EIFS_IDA_RD_FIFO_FULL_ERR_SET_WIDTH                                                      (1)
#define CCS_INT_SET_OFFSET_EIFS_IDA_WR_FIFO_EMPTY_ERR_SET                                                          (23)
#define CCS_INT_SET_OFFSET_EIFS_IDA_WR_FIFO_EMPTY_ERR_SET_WIDTH                                                     (1)
#define CCS_INT_SET_OFFSET_EIFS_IDA_WR_FIFO_FULL_ERR_SET                                                           (24)
#define CCS_INT_SET_OFFSET_EIFS_IDA_WR_FIFO_FULL_ERR_SET_WIDTH                                                      (1)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_0_SET                                                                      (25)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_0_SET_WIDTH                                                                 (1)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_1_SET                                                                      (26)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_1_SET_WIDTH                                                                 (1)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_2_SET                                                                      (27)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_2_SET_WIDTH                                                                 (1)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_3_SET                                                                      (28)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_3_SET_WIDTH                                                                 (1)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_4_SET                                                                      (29)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_4_SET_WIDTH                                                                 (1)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_5_SET                                                                      (30)
#define CCS_INT_SET_OFFSET_USER_DEF_INT_5_SET_WIDTH                                                                 (1)
#define CCS_INT_SET_OFFSET_PHY_INT_SET                                                                             (31)
#define CCS_INT_SET_OFFSET_PHY_INT_SET_WIDTH                                                                        (1)
typedef union CCS_INT_SET_u {
    struct __attribute__ ((packed)) {
        jl_uint32 ahbl_sys_to_set:CCS_INT_SET_OFFSET_AHBL_SYS_TO_SET_WIDTH;                                               //[ 0: 0]
        jl_uint32 apb_sys_to_set:CCS_INT_SET_OFFSET_APB_SYS_TO_SET_WIDTH;                                                 //[ 1: 1]
        jl_uint32 apb_phy_to_set:CCS_INT_SET_OFFSET_APB_PHY_TO_SET_WIDTH;                                                 //[ 2: 2]
        jl_uint32 eifs_ahbl_addr_oor_set:CCS_INT_SET_OFFSET_EIFS_AHBL_ADDR_OOR_SET_WIDTH;                                 //[ 3: 3]
        jl_uint32 eifs_apb_phy_addr_oor_set:CCS_INT_SET_OFFSET_EIFS_APB_PHY_ADDR_OOR_SET_WIDTH;                           //[ 4: 4]
        jl_uint32 cpu_ahbl_addr_oor_set:CCS_INT_SET_OFFSET_CPU_AHBL_ADDR_OOR_SET_WIDTH;                                   //[ 5: 5]
        jl_uint32 cpu_apb_addr_oor_set:CCS_INT_SET_OFFSET_CPU_APB_ADDR_OOR_SET_WIDTH;                                     //[ 6: 6]
        jl_uint32 eifs_ahbl_mul_overlap_set:CCS_INT_SET_OFFSET_EIFS_AHBL_MUL_OVERLAP_SET_WIDTH;                           //[ 7: 7]
        jl_uint32 cpu_ahbl_mul_overlap_set:CCS_INT_SET_OFFSET_CPU_AHBL_MUL_OVERLAP_SET_WIDTH;                             //[ 8: 8]
        jl_uint32 rsvd0:CCS_INT_SET_OFFSET_RSVD0_WIDTH;                                                                   //[11: 9]
        jl_uint32 eifs_i2c_nack_err_set:CCS_INT_SET_OFFSET_EIFS_I2C_NACK_ERR_SET_WIDTH;                                   //[12:12]
        jl_uint32 eifs_i2c_devid_err_set:CCS_INT_SET_OFFSET_EIFS_I2C_DEVID_ERR_SET_WIDTH;                                 //[13:13]
        jl_uint32 eifs_i2c_start_err_set:CCS_INT_SET_OFFSET_EIFS_I2C_START_ERR_SET_WIDTH;                                 //[14:14]
        jl_uint32 eifs_i2c_stop_err_set:CCS_INT_SET_OFFSET_EIFS_I2C_STOP_ERR_SET_WIDTH;                                   //[15:15]
        jl_uint32 eifs_spi_err_set:CCS_INT_SET_OFFSET_EIFS_SPI_ERR_SET_WIDTH;                                             //[16:16]
        jl_uint32 eifs_miim_err_set:CCS_INT_SET_OFFSET_EIFS_MIIM_ERR_SET_WIDTH;                                           //[17:17]
        jl_uint32 eifs_ida_err_set:CCS_INT_SET_OFFSET_EIFS_IDA_ERR_SET_WIDTH;                                             //[18:18]
        jl_uint32 eifs_apb_miss_err_set:CCS_INT_SET_OFFSET_EIFS_APB_MISS_ERR_SET_WIDTH;                                   //[19:19]
        jl_uint32 eifs_page_sel_err_set:CCS_INT_SET_OFFSET_EIFS_PAGE_SEL_ERR_SET_WIDTH;                                   //[20:20]
        jl_uint32 eifs_ida_rd_fifo_empty_err_set:CCS_INT_SET_OFFSET_EIFS_IDA_RD_FIFO_EMPTY_ERR_SET_WIDTH;                 //[21:21]
        jl_uint32 eifs_ida_rd_fifo_full_err_set:CCS_INT_SET_OFFSET_EIFS_IDA_RD_FIFO_FULL_ERR_SET_WIDTH;                   //[22:22]
        jl_uint32 eifs_ida_wr_fifo_empty_err_set:CCS_INT_SET_OFFSET_EIFS_IDA_WR_FIFO_EMPTY_ERR_SET_WIDTH;                 //[23:23]
        jl_uint32 eifs_ida_wr_fifo_full_err_set:CCS_INT_SET_OFFSET_EIFS_IDA_WR_FIFO_FULL_ERR_SET_WIDTH;                   //[24:24]
        jl_uint32 user_def_int_0_set:CCS_INT_SET_OFFSET_USER_DEF_INT_0_SET_WIDTH;                                         //[25:25]
        jl_uint32 user_def_int_1_set:CCS_INT_SET_OFFSET_USER_DEF_INT_1_SET_WIDTH;                                         //[26:26]
        jl_uint32 user_def_int_2_set:CCS_INT_SET_OFFSET_USER_DEF_INT_2_SET_WIDTH;                                         //[27:27]
        jl_uint32 user_def_int_3_set:CCS_INT_SET_OFFSET_USER_DEF_INT_3_SET_WIDTH;                                         //[28:28]
        jl_uint32 user_def_int_4_set:CCS_INT_SET_OFFSET_USER_DEF_INT_4_SET_WIDTH;                                         //[29:29]
        jl_uint32 user_def_int_5_set:CCS_INT_SET_OFFSET_USER_DEF_INT_5_SET_WIDTH;                                         //[30:30]
        jl_uint32 phy_int_set:CCS_INT_SET_OFFSET_PHY_INT_SET_WIDTH;                                                       //[31:31]
    } BF;
    jl_uint32 val[CCS_INT_SET_ENTRY_SIZE];
} CCS_INT_SET_t;

#define CCS_BUS_TO_TH                                                                          ((jl_uint32)0x00201010U)
#define CCS_BUS_TO_TH_NUM                                                                      ((jl_uint32)0x00000001U)
#define CCS_BUS_TO_TH_ENTRY_SIZE                                                                                    (1)
#define CCS_BUS_TO_TH_OFFSET_BUS_TO_CYC_TH                                                                          (0)
#define CCS_BUS_TO_TH_OFFSET_BUS_TO_CYC_TH_WIDTH                                                                   (32)
typedef union CCS_BUS_TO_TH_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bus_to_cyc_th:CCS_BUS_TO_TH_OFFSET_BUS_TO_CYC_TH_WIDTH;                                                 //[31: 0]
    } BF;
    jl_uint32 val[CCS_BUS_TO_TH_ENTRY_SIZE];
} CCS_BUS_TO_TH_t;

#define CCS_MEM_EMA_CFG                                                                        ((jl_uint32)0x00201014U)
#define CCS_MEM_EMA_CFG_NUM                                                                    ((jl_uint32)0x00000001U)
#define CCS_MEM_EMA_CFG_ENTRY_SIZE                                                                                  (1)
#define CCS_MEM_EMA_CFG_OFFSET_RSVD1                                                                                (7)
#define CCS_MEM_EMA_CFG_OFFSET_RSVD1_WIDTH                                                                         (25)
#define CCS_MEM_EMA_CFG_OFFSET_ROM_EMA                                                                              (0)
#define CCS_MEM_EMA_CFG_OFFSET_ROM_EMA_WIDTH                                                                        (3)
#define CCS_MEM_EMA_CFG_OFFSET_RSVD0                                                                                (3)
#define CCS_MEM_EMA_CFG_OFFSET_RSVD0_WIDTH                                                                          (1)
#define CCS_MEM_EMA_CFG_OFFSET_RAM_EMA                                                                              (4)
#define CCS_MEM_EMA_CFG_OFFSET_RAM_EMA_WIDTH                                                                        (3)
typedef union CCS_MEM_EMA_CFG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 rom_ema:CCS_MEM_EMA_CFG_OFFSET_ROM_EMA_WIDTH;                                                           //[ 2: 0]
        jl_uint32 rsvd0:CCS_MEM_EMA_CFG_OFFSET_RSVD0_WIDTH;                                                               //[ 3: 3]
        jl_uint32 ram_ema:CCS_MEM_EMA_CFG_OFFSET_RAM_EMA_WIDTH;                                                           //[ 6: 4]
        jl_uint32 rsvd1:CCS_MEM_EMA_CFG_OFFSET_RSVD1_WIDTH;                                                               //[31: 7]
    } BF;
    jl_uint32 val[CCS_MEM_EMA_CFG_ENTRY_SIZE];
} CCS_MEM_EMA_CFG_t;

#define CCS_MODE_CFG                                                                           ((jl_uint32)0x00201018U)
#define CCS_MODE_CFG_NUM                                                                       ((jl_uint32)0x00000001U)
#define CCS_MODE_CFG_ENTRY_SIZE                                                                                     (1)
#define CCS_MODE_CFG_OFFSET_RSVD0                                                                                  (18)
#define CCS_MODE_CFG_OFFSET_RSVD0_WIDTH                                                                            (14)
#define CCS_MODE_CFG_OFFSET_MIIM_SLAVE_DEVID                                                                        (0)
#define CCS_MODE_CFG_OFFSET_MIIM_SLAVE_DEVID_WIDTH                                                                  (5)
#define CCS_MODE_CFG_OFFSET_MIIM_PRE_DISABLE                                                                        (5)
#define CCS_MODE_CFG_OFFSET_MIIM_PRE_DISABLE_WIDTH                                                                  (1)
#define CCS_MODE_CFG_OFFSET_I2C_SLAVE_DEVID                                                                         (6)
#define CCS_MODE_CFG_OFFSET_I2C_SLAVE_DEVID_WIDTH                                                                   (7)
#define CCS_MODE_CFG_OFFSET_EIFS_SEL                                                                               (13)
#define CCS_MODE_CFG_OFFSET_EIFS_SEL_WIDTH                                                                          (3)
#define CCS_MODE_CFG_OFFSET_WATCH_DOG_EN                                                                           (16)
#define CCS_MODE_CFG_OFFSET_WATCH_DOG_EN_WIDTH                                                                      (1)
#define CCS_MODE_CFG_OFFSET_CPU_ERR_RSP_EN                                                                         (17)
#define CCS_MODE_CFG_OFFSET_CPU_ERR_RSP_EN_WIDTH                                                                    (1)
typedef union CCS_MODE_CFG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 miim_slave_devid:CCS_MODE_CFG_OFFSET_MIIM_SLAVE_DEVID_WIDTH;                                            //[ 4: 0]
        jl_uint32 miim_pre_disable:CCS_MODE_CFG_OFFSET_MIIM_PRE_DISABLE_WIDTH;                                            //[ 5: 5]
        jl_uint32 i2c_slave_devid:CCS_MODE_CFG_OFFSET_I2C_SLAVE_DEVID_WIDTH;                                              //[12: 6]
        jl_uint32 eifs_sel:CCS_MODE_CFG_OFFSET_EIFS_SEL_WIDTH;                                                            //[15:13]
        jl_uint32 watch_dog_en:CCS_MODE_CFG_OFFSET_WATCH_DOG_EN_WIDTH;                                                    //[16:16]
        jl_uint32 cpu_err_rsp_en:CCS_MODE_CFG_OFFSET_CPU_ERR_RSP_EN_WIDTH;                                                //[17:17]
        jl_uint32 rsvd0:CCS_MODE_CFG_OFFSET_RSVD0_WIDTH;                                                                  //[31:18]
    } BF;
    jl_uint32 val[CCS_MODE_CFG_ENTRY_SIZE];
} CCS_MODE_CFG_t;

#define CCS_EIFS_MIIM_SMI_PAGE_CFG                                                             ((jl_uint32)0x0020101CU)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_NUM                                                         ((jl_uint32)0x00000001U)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_ENTRY_SIZE                                                                       (1)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_DATA                                                                 (0)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_DATA_WIDTH                                                          (16)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_ADDR                                                                (16)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_ADDR_WIDTH                                                           (5)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_RSVD0                                                                    (21)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_RSVD0_WIDTH                                                               (9)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_WRITE                                                               (30)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_WRITE_WIDTH                                                          (1)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_ENABLE                                                              (31)
#define CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_ENABLE_WIDTH                                                         (1)
typedef union CCS_EIFS_MIIM_SMI_PAGE_CFG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 page_data:CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_DATA_WIDTH;                                            //[15: 0]
        jl_uint32 page_addr:CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_ADDR_WIDTH;                                            //[20:16]
        jl_uint32 rsvd0:CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_RSVD0_WIDTH;                                                    //[29:21]
        jl_uint32 page_write:CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_WRITE_WIDTH;                                          //[30:30]
        jl_uint32 page_enable:CCS_EIFS_MIIM_SMI_PAGE_CFG_OFFSET_PAGE_ENABLE_WIDTH;                                        //[31:31]
    } BF;
    jl_uint32 val[CCS_EIFS_MIIM_SMI_PAGE_CFG_ENTRY_SIZE];
} CCS_EIFS_MIIM_SMI_PAGE_CFG_t;

#define CCS_EIFS_SPI_INS_CFG                                                                   ((jl_uint32)0x00201020U)
#define CCS_EIFS_SPI_INS_CFG_NUM                                                               ((jl_uint32)0x00000001U)
#define CCS_EIFS_SPI_INS_CFG_ENTRY_SIZE                                                                             (1)
#define CCS_EIFS_SPI_INS_CFG_OFFSET_RSVD0                                                                          (16)
#define CCS_EIFS_SPI_INS_CFG_OFFSET_RSVD0_WIDTH                                                                    (16)
#define CCS_EIFS_SPI_INS_CFG_OFFSET_CFG_SPI_INS_WR                                                                  (0)
#define CCS_EIFS_SPI_INS_CFG_OFFSET_CFG_SPI_INS_WR_WIDTH                                                            (8)
#define CCS_EIFS_SPI_INS_CFG_OFFSET_CFG_SPI_INS_RD                                                                  (8)
#define CCS_EIFS_SPI_INS_CFG_OFFSET_CFG_SPI_INS_RD_WIDTH                                                            (8)
typedef union CCS_EIFS_SPI_INS_CFG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cfg_spi_ins_wr:CCS_EIFS_SPI_INS_CFG_OFFSET_CFG_SPI_INS_WR_WIDTH;                                        //[ 7: 0]
        jl_uint32 cfg_spi_ins_rd:CCS_EIFS_SPI_INS_CFG_OFFSET_CFG_SPI_INS_RD_WIDTH;                                        //[15: 8]
        jl_uint32 rsvd0:CCS_EIFS_SPI_INS_CFG_OFFSET_RSVD0_WIDTH;                                                          //[31:16]
    } BF;
    jl_uint32 val[CCS_EIFS_SPI_INS_CFG_ENTRY_SIZE];
} CCS_EIFS_SPI_INS_CFG_t;

#define CCS_EIFS_I2C_FORMAT_CFG                                                                ((jl_uint32)0x00201024U)
#define CCS_EIFS_I2C_FORMAT_CFG_NUM                                                            ((jl_uint32)0x00000001U)
#define CCS_EIFS_I2C_FORMAT_CFG_ENTRY_SIZE                                                                          (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_RSVD2                                                                       (11)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_RSVD2_WIDTH                                                                 (21)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LSB_I2C_SLAVE_BIT_ORDER                                                      (0)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LSB_I2C_SLAVE_BIT_ORDER_WIDTH                                                (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LSB_I2C_SLAVE_BYTE_ORDER                                                     (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LSB_I2C_SLAVE_BYTE_ORDER_WIDTH                                               (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LSB_I2C_SLAVE_FAST_MODE                                                      (2)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LSB_I2C_SLAVE_FAST_MODE_WIDTH                                                (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_RSVD1                                                                        (3)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_RSVD1_WIDTH                                                                  (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_MSB_I2C_SLAVE_BIT_ORDER                                                      (4)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_MSB_I2C_SLAVE_BIT_ORDER_WIDTH                                                (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_MSB_I2C_SLAVE_BYTE_ORDER                                                     (5)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_MSB_I2C_SLAVE_BYTE_ORDER_WIDTH                                               (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_MSB_I2C_SLAVE_FAST_MODE                                                      (6)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_MSB_I2C_SLAVE_FAST_MODE_WIDTH                                                (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_RSVD0                                                                        (7)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_RSVD0_WIDTH                                                                  (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LITE_I2C_SLAVE_BIT_ORDER                                                     (8)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LITE_I2C_SLAVE_BIT_ORDER_WIDTH                                               (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LITE_I2C_SLAVE_BYTE_ORDER                                                    (9)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LITE_I2C_SLAVE_BYTE_ORDER_WIDTH                                              (1)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LITE_I2C_SLAVE_FAST_MODE                                                    (10)
#define CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LITE_I2C_SLAVE_FAST_MODE_WIDTH                                               (1)
typedef union CCS_EIFS_I2C_FORMAT_CFG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 lsb_i2c_slave_bit_order:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LSB_I2C_SLAVE_BIT_ORDER_WIDTH;                   //[ 0: 0]
        jl_uint32 lsb_i2c_slave_byte_order:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LSB_I2C_SLAVE_BYTE_ORDER_WIDTH;                 //[ 1: 1]
        jl_uint32 lsb_i2c_slave_fast_mode:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LSB_I2C_SLAVE_FAST_MODE_WIDTH;                   //[ 2: 2]
        jl_uint32 rsvd1:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_RSVD1_WIDTH;                                                       //[ 3: 3]
        jl_uint32 msb_i2c_slave_bit_order:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_MSB_I2C_SLAVE_BIT_ORDER_WIDTH;                   //[ 4: 4]
        jl_uint32 msb_i2c_slave_byte_order:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_MSB_I2C_SLAVE_BYTE_ORDER_WIDTH;                 //[ 5: 5]
        jl_uint32 msb_i2c_slave_fast_mode:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_MSB_I2C_SLAVE_FAST_MODE_WIDTH;                   //[ 6: 6]
        jl_uint32 rsvd0:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_RSVD0_WIDTH;                                                       //[ 7: 7]
        jl_uint32 lite_i2c_slave_bit_order:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LITE_I2C_SLAVE_BIT_ORDER_WIDTH;                 //[ 8: 8]
        jl_uint32 lite_i2c_slave_byte_order:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LITE_I2C_SLAVE_BYTE_ORDER_WIDTH;               //[ 9: 9]
        jl_uint32 lite_i2c_slave_fast_mode:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_LITE_I2C_SLAVE_FAST_MODE_WIDTH;                 //[10:10]
        jl_uint32 rsvd2:CCS_EIFS_I2C_FORMAT_CFG_OFFSET_RSVD2_WIDTH;                                                       //[31:11]
    } BF;
    jl_uint32 val[CCS_EIFS_I2C_FORMAT_CFG_ENTRY_SIZE];
} CCS_EIFS_I2C_FORMAT_CFG_t;

#define CCS_CCS_SCRATCH_REG                                                                    ((jl_uint32)0x00201028U)
#define CCS_CCS_SCRATCH_REG_NUM                                                                ((jl_uint32)0x00000001U)
#define CCS_CCS_SCRATCH_REG_ENTRY_SIZE                                                                              (1)
#define CCS_CCS_SCRATCH_REG_OFFSET_CCS_SCRATCH_REG                                                                  (0)
#define CCS_CCS_SCRATCH_REG_OFFSET_CCS_SCRATCH_REG_WIDTH                                                           (32)
typedef union CCS_CCS_SCRATCH_REG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 ccs_scratch_reg:CCS_CCS_SCRATCH_REG_OFFSET_CCS_SCRATCH_REG_WIDTH;                                       //[31: 0]
    } BF;
    jl_uint32 val[CCS_CCS_SCRATCH_REG_ENTRY_SIZE];
} CCS_CCS_SCRATCH_REG_t;

#define CCS_EFUSE_MAGIC_CODE_REG                                                               ((jl_uint32)0x0020102CU)
#define CCS_EFUSE_MAGIC_CODE_REG_NUM                                                           ((jl_uint32)0x00000001U)
#define CCS_EFUSE_MAGIC_CODE_REG_ENTRY_SIZE                                                                         (1)
#define CCS_EFUSE_MAGIC_CODE_REG_OFFSET_EFUSE_MAGIC_CODE                                                            (0)
#define CCS_EFUSE_MAGIC_CODE_REG_OFFSET_EFUSE_MAGIC_CODE_WIDTH                                                     (32)
typedef union CCS_EFUSE_MAGIC_CODE_REG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 efuse_magic_code:CCS_EFUSE_MAGIC_CODE_REG_OFFSET_EFUSE_MAGIC_CODE_WIDTH;                                //[31: 0]
    } BF;
    jl_uint32 val[CCS_EFUSE_MAGIC_CODE_REG_ENTRY_SIZE];
} CCS_EFUSE_MAGIC_CODE_REG_t;

#define CCS_EFUSE_0_REG                                                                        ((jl_uint32)0x00201030U)
#define CCS_EFUSE_0_REG_NUM                                                                    ((jl_uint32)0x00000001U)
#define CCS_EFUSE_0_REG_ENTRY_SIZE                                                                                  (1)
#define CCS_EFUSE_0_REG_OFFSET_RSVD0                                                                                (8)
#define CCS_EFUSE_0_REG_OFFSET_RSVD0_WIDTH                                                                         (24)
#define CCS_EFUSE_0_REG_OFFSET_EFUSE_Q_D                                                                            (0)
#define CCS_EFUSE_0_REG_OFFSET_EFUSE_Q_D_WIDTH                                                                      (8)
typedef union CCS_EFUSE_0_REG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 efuse_q_d:CCS_EFUSE_0_REG_OFFSET_EFUSE_Q_D_WIDTH;                                                       //[ 7: 0]
        jl_uint32 rsvd0:CCS_EFUSE_0_REG_OFFSET_RSVD0_WIDTH;                                                               //[31: 8]
    } BF;
    jl_uint32 val[CCS_EFUSE_0_REG_ENTRY_SIZE];
} CCS_EFUSE_0_REG_t;

#define CCS_EFUSE_1_REG                                                                        ((jl_uint32)0x00201034U)
#define CCS_EFUSE_1_REG_NUM                                                                    ((jl_uint32)0x00000001U)
#define CCS_EFUSE_1_REG_ENTRY_SIZE                                                                                  (1)
#define CCS_EFUSE_1_REG_OFFSET_RSVD1                                                                               (16)
#define CCS_EFUSE_1_REG_OFFSET_RSVD1_WIDTH                                                                         (16)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_A_D                                                                            (0)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_A_D_WIDTH                                                                     (10)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_AEN_D                                                                         (10)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_AEN_D_WIDTH                                                                    (1)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_RDEN_D                                                                        (11)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_RDEN_D_WIDTH                                                                   (1)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_PGMEN_D                                                                       (12)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_PGMEN_D_WIDTH                                                                  (1)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_AVDD_EN                                                                       (13)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_AVDD_EN_WIDTH                                                                  (1)
#define CCS_EFUSE_1_REG_OFFSET_RSVD0                                                                               (14)
#define CCS_EFUSE_1_REG_OFFSET_RSVD0_WIDTH                                                                          (1)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_D_EN                                                                          (15)
#define CCS_EFUSE_1_REG_OFFSET_EFUSE_D_EN_WIDTH                                                                     (1)
typedef union CCS_EFUSE_1_REG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 efuse_a_d:CCS_EFUSE_1_REG_OFFSET_EFUSE_A_D_WIDTH;                                                       //[ 9: 0]
        jl_uint32 efuse_aen_d:CCS_EFUSE_1_REG_OFFSET_EFUSE_AEN_D_WIDTH;                                                   //[10:10]
        jl_uint32 efuse_rden_d:CCS_EFUSE_1_REG_OFFSET_EFUSE_RDEN_D_WIDTH;                                                 //[11:11]
        jl_uint32 efuse_pgmen_d:CCS_EFUSE_1_REG_OFFSET_EFUSE_PGMEN_D_WIDTH;                                               //[12:12]
        jl_uint32 efuse_avdd_en:CCS_EFUSE_1_REG_OFFSET_EFUSE_AVDD_EN_WIDTH;                                               //[13:13]
        jl_uint32 rsvd0:CCS_EFUSE_1_REG_OFFSET_RSVD0_WIDTH;                                                               //[14:14]
        jl_uint32 efuse_d_en:CCS_EFUSE_1_REG_OFFSET_EFUSE_D_EN_WIDTH;                                                     //[15:15]
        jl_uint32 rsvd1:CCS_EFUSE_1_REG_OFFSET_RSVD1_WIDTH;                                                               //[31:16]
    } BF;
    jl_uint32 val[CCS_EFUSE_1_REG_ENTRY_SIZE];
} CCS_EFUSE_1_REG_t;

#define CCS_EFUSE_2_REG                                                                        ((jl_uint32)0x00201038U)
#define CCS_EFUSE_2_REG_NUM                                                                    ((jl_uint32)0x00000001U)
#define CCS_EFUSE_2_REG_ENTRY_SIZE                                                                                  (1)
#define CCS_EFUSE_2_REG_OFFSET_RSVD0                                                                                (2)
#define CCS_EFUSE_2_REG_OFFSET_RSVD0_WIDTH                                                                         (30)
#define CCS_EFUSE_2_REG_OFFSET_EFUSE_BYP_INT_LDO                                                                    (0)
#define CCS_EFUSE_2_REG_OFFSET_EFUSE_BYP_INT_LDO_WIDTH                                                              (1)
#define CCS_EFUSE_2_REG_OFFSET_EFUSE_EXT_LDO_EN                                                                     (1)
#define CCS_EFUSE_2_REG_OFFSET_EFUSE_EXT_LDO_EN_WIDTH                                                               (1)
typedef union CCS_EFUSE_2_REG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 efuse_byp_int_ldo:CCS_EFUSE_2_REG_OFFSET_EFUSE_BYP_INT_LDO_WIDTH;                                       //[ 0: 0]
        jl_uint32 efuse_ext_ldo_en:CCS_EFUSE_2_REG_OFFSET_EFUSE_EXT_LDO_EN_WIDTH;                                         //[ 1: 1]
        jl_uint32 rsvd0:CCS_EFUSE_2_REG_OFFSET_RSVD0_WIDTH;                                                               //[31: 2]
    } BF;
    jl_uint32 val[CCS_EFUSE_2_REG_ENTRY_SIZE];
} CCS_EFUSE_2_REG_t;

#define CCS_USER_DEF_INT                                                                       ((jl_uint32)0x0020103CU)
#define CCS_USER_DEF_INT_NUM                                                                   ((jl_uint32)0x00000001U)
#define CCS_USER_DEF_INT_ENTRY_SIZE                                                                                 (1)
#define CCS_USER_DEF_INT_OFFSET_RSVD0                                                                               (7)
#define CCS_USER_DEF_INT_OFFSET_RSVD0_WIDTH                                                                        (25)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_0                                                                 (0)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_0_WIDTH                                                           (1)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_1                                                                 (1)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_1_WIDTH                                                           (1)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_2                                                                 (2)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_2_WIDTH                                                           (1)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_3                                                                 (3)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_3_WIDTH                                                           (1)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_4                                                                 (4)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_4_WIDTH                                                           (1)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_5                                                                 (5)
#define CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_5_WIDTH                                                           (1)
#define CCS_USER_DEF_INT_OFFSET_PHY_INT_TIRG                                                                        (6)
#define CCS_USER_DEF_INT_OFFSET_PHY_INT_TIRG_WIDTH                                                                  (1)
typedef union CCS_USER_DEF_INT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 user_def_int_trig_0:CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_0_WIDTH;                                  //[ 0: 0]
        jl_uint32 user_def_int_trig_1:CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_1_WIDTH;                                  //[ 1: 1]
        jl_uint32 user_def_int_trig_2:CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_2_WIDTH;                                  //[ 2: 2]
        jl_uint32 user_def_int_trig_3:CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_3_WIDTH;                                  //[ 3: 3]
        jl_uint32 user_def_int_trig_4:CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_4_WIDTH;                                  //[ 4: 4]
        jl_uint32 user_def_int_trig_5:CCS_USER_DEF_INT_OFFSET_USER_DEF_INT_TRIG_5_WIDTH;                                  //[ 5: 5]
        jl_uint32 phy_int_tirg:CCS_USER_DEF_INT_OFFSET_PHY_INT_TIRG_WIDTH;                                                //[ 6: 6]
        jl_uint32 rsvd0:CCS_USER_DEF_INT_OFFSET_RSVD0_WIDTH;                                                              //[31: 7]
    } BF;
    jl_uint32 val[CCS_USER_DEF_INT_ENTRY_SIZE];
} CCS_USER_DEF_INT_t;

#endif /* __JL_REG_CCS_H__ */

