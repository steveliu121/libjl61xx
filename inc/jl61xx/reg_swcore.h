//reg_swcore.h
/*
* Automatically generated by gen_c_api.py, don't edit it
*/
#ifndef __JL_REG_SWCORE_H__
#define __JL_REG_SWCORE_H__

#include <jl_types.h>

#define SWCORE_BASE                                                                                ((jl_uint32)0x00100000U)
#define SWCORE_BLOCK_SIZE                                                                          ((jl_uint32)0x00024000U)

#define SWCORE_CORE_VERSION                                                                        ((jl_uint32)0x00100000U)
#define SWCORE_CORE_VERSION_NUM                                                                    ((jl_uint32)0x00000001U)
#define SWCORE_CORE_VERSION_ENTRY_SIZE                                                                                  (1)
#define SWCORE_CORE_VERSION_OFFSET_VERSION                                                                              (0)
#define SWCORE_CORE_VERSION_OFFSET_VERSION_WIDTH                                                                       (32)
typedef union SWCORE_CORE_VERSION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 version:SWCORE_CORE_VERSION_OFFSET_VERSION_WIDTH;                                                           //[31: 0]
    } BF;
    jl_uint32 val[SWCORE_CORE_VERSION_ENTRY_SIZE];
} SWCORE_CORE_VERSION_t;

#define SWCORE_BUFFER_FREE                                                                         ((jl_uint32)0x00100004U)
#define SWCORE_BUFFER_FREE_NUM                                                                     ((jl_uint32)0x00000001U)
#define SWCORE_BUFFER_FREE_ENTRY_SIZE                                                                                   (1)
#define SWCORE_BUFFER_FREE_OFFSET_CELLS                                                                                 (0)
#define SWCORE_BUFFER_FREE_OFFSET_CELLS_WIDTH                                                                          (10)
#define SWCORE_BUFFER_FREE_OFFSET_RESERVED                                                                             (10)
#define SWCORE_BUFFER_FREE_OFFSET_RESERVED_WIDTH                                                                       (22)
typedef union SWCORE_BUFFER_FREE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cells:SWCORE_BUFFER_FREE_OFFSET_CELLS_WIDTH;                                                                //[ 9: 0]
        jl_uint32 reserved:SWCORE_BUFFER_FREE_OFFSET_RESERVED_WIDTH;                                                          //[31:10]
    } BF;
    jl_uint32 val[SWCORE_BUFFER_FREE_ENTRY_SIZE];
} SWCORE_BUFFER_FREE_t;

#define SWCORE_TICK_CONFIGURATION                                                                  ((jl_uint32)0x00100008U)
#define SWCORE_TICK_CONFIGURATION_NUM                                                              ((jl_uint32)0x00000001U)
#define SWCORE_TICK_CONFIGURATION_ENTRY_SIZE                                                                            (1)
#define SWCORE_TICK_CONFIGURATION_OFFSET_CLK_DIVIDER                                                                    (0)
#define SWCORE_TICK_CONFIGURATION_OFFSET_CLK_DIVIDER_WIDTH                                                             (15)
#define SWCORE_TICK_CONFIGURATION_OFFSET_STEP_DIVIDER                                                                  (15)
#define SWCORE_TICK_CONFIGURATION_OFFSET_STEP_DIVIDER_WIDTH                                                             (4)
#define SWCORE_TICK_CONFIGURATION_OFFSET_RESERVED                                                                      (19)
#define SWCORE_TICK_CONFIGURATION_OFFSET_RESERVED_WIDTH                                                                (13)
typedef union SWCORE_TICK_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 clk_divider:SWCORE_TICK_CONFIGURATION_OFFSET_CLK_DIVIDER_WIDTH;                                             //[14: 0]
        jl_uint32 step_divider:SWCORE_TICK_CONFIGURATION_OFFSET_STEP_DIVIDER_WIDTH;                                           //[18:15]
        jl_uint32 reserved:SWCORE_TICK_CONFIGURATION_OFFSET_RESERVED_WIDTH;                                                   //[31:19]
    } BF;
    jl_uint32 val[SWCORE_TICK_CONFIGURATION_ENTRY_SIZE];
} SWCORE_TICK_CONFIGURATION_t;

#define SWCORE_SCRATCH                                                                             ((jl_uint32)0x0010000CU)
#define SWCORE_SCRATCH_NUM                                                                         ((jl_uint32)0x00000001U)
#define SWCORE_SCRATCH_ENTRY_SIZE                                                                                       (2)
#define SWCORE_SCRATCH_OFFSET_SCRATCH_0_31                                                                              (0)
#define SWCORE_SCRATCH_OFFSET_SCRATCH_0_31_WIDTH                                                                       (32)
#define SWCORE_SCRATCH_OFFSET_SCRATCH_32_63                                                                            (32)
#define SWCORE_SCRATCH_OFFSET_SCRATCH_32_63_WIDTH                                                                      (32)
typedef union SWCORE_SCRATCH_u {
    struct __attribute__ ((packed)) {
        jl_uint64 scratch_0_31:SWCORE_SCRATCH_OFFSET_SCRATCH_0_31_WIDTH;                                                      //[31: 0]
        jl_uint64 scratch_32_63:SWCORE_SCRATCH_OFFSET_SCRATCH_32_63_WIDTH;                                                    //[63:32]
    } BF;
    jl_uint32 val[SWCORE_SCRATCH_ENTRY_SIZE];
} SWCORE_SCRATCH_t;

#define SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH                                                        ((jl_uint32)0x00100014U)
#define SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH_NUM                                                    ((jl_uint32)0x0000000BU)
#define SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH_ENTRY_SIZE                                                                  (1)
#define SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH_OFFSET_BYTES                                                                (0)
#define SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH_OFFSET_BYTES_WIDTH                                                         (24)
#define SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH_OFFSET_RESERVED                                                            (24)
#define SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH_OFFSET_RESERVED_WIDTH                                                       (8)
typedef union SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bytes:SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH_OFFSET_BYTES_WIDTH;                                               //[23: 0]
        jl_uint32 reserved:SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH_OFFSET_RESERVED_WIDTH;                                         //[31:24]
    } BF;
    jl_uint32 val[SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH_ENTRY_SIZE];
} SWCORE_MAC_RX_MAXIMUM_PACKET_LENGTH_t;

#define SWCORE_MAC_RX_BROKEN_PACKETS                                                               ((jl_uint32)0x00100040U)
#define SWCORE_MAC_RX_BROKEN_PACKETS_NUM                                                           ((jl_uint32)0x0000000BU)
#define SWCORE_MAC_RX_BROKEN_PACKETS_ENTRY_SIZE                                                                         (1)
#define SWCORE_MAC_RX_BROKEN_PACKETS_OFFSET_PACKETS                                                                     (0)
#define SWCORE_MAC_RX_BROKEN_PACKETS_OFFSET_PACKETS_WIDTH                                                              (24)
#define SWCORE_MAC_RX_BROKEN_PACKETS_OFFSET_RESERVED                                                                   (24)
#define SWCORE_MAC_RX_BROKEN_PACKETS_OFFSET_RESERVED_WIDTH                                                              (8)
typedef union SWCORE_MAC_RX_BROKEN_PACKETS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_MAC_RX_BROKEN_PACKETS_OFFSET_PACKETS_WIDTH;                                                  //[23: 0]
        jl_uint32 reserved:SWCORE_MAC_RX_BROKEN_PACKETS_OFFSET_RESERVED_WIDTH;                                                //[31:24]
    } BF;
    jl_uint32 val[SWCORE_MAC_RX_BROKEN_PACKETS_ENTRY_SIZE];
} SWCORE_MAC_RX_BROKEN_PACKETS_t;

#define SWCORE_MAC_RX_SHORT_PACKET_DROP                                                            ((jl_uint32)0x0010006CU)
#define SWCORE_MAC_RX_SHORT_PACKET_DROP_NUM                                                        ((jl_uint32)0x0000000BU)
#define SWCORE_MAC_RX_SHORT_PACKET_DROP_ENTRY_SIZE                                                                      (1)
#define SWCORE_MAC_RX_SHORT_PACKET_DROP_OFFSET_PACKETS                                                                  (0)
#define SWCORE_MAC_RX_SHORT_PACKET_DROP_OFFSET_PACKETS_WIDTH                                                           (24)
#define SWCORE_MAC_RX_SHORT_PACKET_DROP_OFFSET_RESERVED                                                                (24)
#define SWCORE_MAC_RX_SHORT_PACKET_DROP_OFFSET_RESERVED_WIDTH                                                           (8)
typedef union SWCORE_MAC_RX_SHORT_PACKET_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_MAC_RX_SHORT_PACKET_DROP_OFFSET_PACKETS_WIDTH;                                               //[23: 0]
        jl_uint32 reserved:SWCORE_MAC_RX_SHORT_PACKET_DROP_OFFSET_RESERVED_WIDTH;                                             //[31:24]
    } BF;
    jl_uint32 val[SWCORE_MAC_RX_SHORT_PACKET_DROP_ENTRY_SIZE];
} SWCORE_MAC_RX_SHORT_PACKET_DROP_t;

#define SWCORE_MAC_RX_LONG_PACKET_DROP                                                             ((jl_uint32)0x00100098U)
#define SWCORE_MAC_RX_LONG_PACKET_DROP_NUM                                                         ((jl_uint32)0x0000000BU)
#define SWCORE_MAC_RX_LONG_PACKET_DROP_ENTRY_SIZE                                                                       (1)
#define SWCORE_MAC_RX_LONG_PACKET_DROP_OFFSET_PACKETS                                                                   (0)
#define SWCORE_MAC_RX_LONG_PACKET_DROP_OFFSET_PACKETS_WIDTH                                                            (24)
#define SWCORE_MAC_RX_LONG_PACKET_DROP_OFFSET_RESERVED                                                                 (24)
#define SWCORE_MAC_RX_LONG_PACKET_DROP_OFFSET_RESERVED_WIDTH                                                            (8)
typedef union SWCORE_MAC_RX_LONG_PACKET_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_MAC_RX_LONG_PACKET_DROP_OFFSET_PACKETS_WIDTH;                                                //[23: 0]
        jl_uint32 reserved:SWCORE_MAC_RX_LONG_PACKET_DROP_OFFSET_RESERVED_WIDTH;                                              //[31:24]
    } BF;
    jl_uint32 val[SWCORE_MAC_RX_LONG_PACKET_DROP_ENTRY_SIZE];
} SWCORE_MAC_RX_LONG_PACKET_DROP_t;

#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION                                       ((jl_uint32)0x001000C4U)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_NUM                                   ((jl_uint32)0x0000000BU)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_ENTRY_SIZE                                                 (1)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES                                   (0)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH                             (1)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TOKENS                                              (1)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH                                       (12)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TICK                                               (13)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TICK_WIDTH                                          (3)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION                                     (16)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH                                (8)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_RESERVED                                           (24)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH                                      (8)
typedef union SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets_not_bytes:SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH;      //[ 0: 0]
        jl_uint32 tokens:SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH;                            //[12: 1]
        jl_uint32 tick:SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TICK_WIDTH;                                //[15:13]
        jl_uint32 ifg_correction:SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH;            //[23:16]
        jl_uint32 reserved:SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH;                        //[31:24]
    } BF;
    jl_uint32 val[SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_ENTRY_SIZE];
} SWCORE_L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_t;

#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION                            ((jl_uint32)0x001000F0U)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_NUM                        ((jl_uint32)0x0000000BU)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE                                      (1)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY                          (0)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH                         (16)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED                                (16)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH                          (16)
typedef union SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bucket_capacity:SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH;  //[15: 0]
        jl_uint32 reserved:SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH;             //[31:16]
    } BF;
    jl_uint32 val[SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE];
} SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_t;

#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION                           ((jl_uint32)0x0010011CU)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_NUM                       ((jl_uint32)0x0000000BU)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE                                     (1)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD                               (0)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH                         (16)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED                               (16)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH                         (16)
typedef union SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 threshold:SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH;          //[15: 0]
        jl_uint32 reserved:SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH;            //[31:16]
    } BF;
    jl_uint32 val[SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE];
} SWCORE_L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_t;

#define SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE                                                   ((jl_uint32)0x00100148U)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE_NUM                                               ((jl_uint32)0x00000001U)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE_ENTRY_SIZE                                                             (1)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE_OFFSET_ENABLE                                                          (0)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE_OFFSET_ENABLE_WIDTH                                                   (11)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE_OFFSET_RESERVED                                                       (11)
#define SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE_OFFSET_RESERVED_WIDTH                                                 (21)
typedef union SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 enable:SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE_OFFSET_ENABLE_WIDTH;                                        //[10: 0]
        jl_uint32 reserved:SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE_OFFSET_RESERVED_WIDTH;                                    //[31:11]
    } BF;
    jl_uint32 val[SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE_ENTRY_SIZE];
} SWCORE_L2_BROADCAST_STORM_CONTROL_ENABLE_t;

#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION                                       ((jl_uint32)0x0010014CU)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_NUM                                   ((jl_uint32)0x0000000BU)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_ENTRY_SIZE                                                 (1)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES                                   (0)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH                             (1)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TOKENS                                              (1)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH                                       (12)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TICK                                               (13)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TICK_WIDTH                                          (3)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION                                     (16)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH                                (8)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_RESERVED                                           (24)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH                                      (8)
typedef union SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets_not_bytes:SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH;      //[ 0: 0]
        jl_uint32 tokens:SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH;                            //[12: 1]
        jl_uint32 tick:SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TICK_WIDTH;                                //[15:13]
        jl_uint32 ifg_correction:SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH;            //[23:16]
        jl_uint32 reserved:SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH;                        //[31:24]
    } BF;
    jl_uint32 val[SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_ENTRY_SIZE];
} SWCORE_L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_t;

#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION                            ((jl_uint32)0x00100178U)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_NUM                        ((jl_uint32)0x0000000BU)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE                                      (1)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY                          (0)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH                         (16)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED                                (16)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH                          (16)
typedef union SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bucket_capacity:SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH;  //[15: 0]
        jl_uint32 reserved:SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH;             //[31:16]
    } BF;
    jl_uint32 val[SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE];
} SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_t;

#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION                           ((jl_uint32)0x001001A4U)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_NUM                       ((jl_uint32)0x0000000BU)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE                                     (1)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD                               (0)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH                         (16)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED                               (16)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH                         (16)
typedef union SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 threshold:SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH;          //[15: 0]
        jl_uint32 reserved:SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH;            //[31:16]
    } BF;
    jl_uint32 val[SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE];
} SWCORE_L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_t;

#define SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE                                                   ((jl_uint32)0x001001D0U)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE_NUM                                               ((jl_uint32)0x00000001U)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE_ENTRY_SIZE                                                             (1)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE_OFFSET_ENABLE                                                          (0)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE_OFFSET_ENABLE_WIDTH                                                   (11)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE_OFFSET_RESERVED                                                       (11)
#define SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE_OFFSET_RESERVED_WIDTH                                                 (21)
typedef union SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 enable:SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE_OFFSET_ENABLE_WIDTH;                                        //[10: 0]
        jl_uint32 reserved:SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE_OFFSET_RESERVED_WIDTH;                                    //[31:11]
    } BF;
    jl_uint32 val[SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE_ENTRY_SIZE];
} SWCORE_L2_MULTICAST_STORM_CONTROL_ENABLE_t;

#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION                                        ((jl_uint32)0x001001D4U)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_NUM                                    ((jl_uint32)0x0000000BU)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_ENTRY_SIZE                                                  (1)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES                                    (0)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH                              (1)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TOKENS                                               (1)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH                                        (12)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TICK                                                (13)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TICK_WIDTH                                           (3)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION                                      (16)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH                                 (8)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_RESERVED                                            (24)
#define SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH                                       (8)
typedef union SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets_not_bytes:SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH;       //[ 0: 0]
        jl_uint32 tokens:SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH;                             //[12: 1]
        jl_uint32 tick:SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_TICK_WIDTH;                                 //[15:13]
        jl_uint32 ifg_correction:SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH;             //[23:16]
        jl_uint32 reserved:SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH;                         //[31:24]
    } BF;
    jl_uint32 val[SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_ENTRY_SIZE];
} SWCORE_L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_t;

#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION                             ((jl_uint32)0x00100200U)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_NUM                         ((jl_uint32)0x0000000BU)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE                                       (1)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY                           (0)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH                         (16)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED                                 (16)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH                           (16)
typedef union SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bucket_capacity:SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH;  //[15: 0]
        jl_uint32 reserved:SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH;              //[31:16]
    } BF;
    jl_uint32 val[SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE];
} SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_t;

#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION                            ((jl_uint32)0x0010022CU)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_NUM                        ((jl_uint32)0x0000000BU)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE                                      (1)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD                                (0)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH                         (16)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED                                (16)
#define SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH                          (16)
typedef union SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 threshold:SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH;           //[15: 0]
        jl_uint32 reserved:SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH;             //[31:16]
    } BF;
    jl_uint32 val[SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE];
} SWCORE_L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_t;

#define SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE                                                    ((jl_uint32)0x00100258U)
#define SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE_NUM                                                ((jl_uint32)0x00000001U)
#define SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE_ENTRY_SIZE                                                              (1)
#define SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE_OFFSET_ENABLE                                                           (0)
#define SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE_OFFSET_ENABLE_WIDTH                                                    (11)
#define SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE_OFFSET_RESERVED                                                        (11)
#define SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE_OFFSET_RESERVED_WIDTH                                                  (21)
typedef union SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 enable:SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE_OFFSET_ENABLE_WIDTH;                                         //[10: 0]
        jl_uint32 reserved:SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE_OFFSET_RESERVED_WIDTH;                                     //[31:11]
    } BF;
    jl_uint32 val[SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE_ENTRY_SIZE];
} SWCORE_L2_FLOODING_STORM_CONTROL_ENABLE_t;

#define SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP                                               ((jl_uint32)0x0010025CU)
#define SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP_NUM                                           ((jl_uint32)0x00000001U)
#define SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP_ENTRY_SIZE                                                         (1)
#define SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP_OFFSET_PACKETS                                                     (0)
#define SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP_OFFSET_PACKETS_WIDTH                                              (24)
#define SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP_OFFSET_RESERVED                                                   (24)
#define SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP_OFFSET_RESERVED_WIDTH                                              (8)
typedef union SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP_OFFSET_PACKETS_WIDTH;                                  //[23: 0]
        jl_uint32 reserved:SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP_OFFSET_RESERVED_WIDTH;                                //[31:24]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP_ENTRY_SIZE];
} SWCORE_INGRESS_EGRESS_ADMISSION_CONTROL_DROP_t;

#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION                                ((jl_uint32)0x00100260U)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_NUM                            ((jl_uint32)0x00000010U)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_ENTRY_SIZE                                          (4)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_CAPACITY_0                            (0)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_CAPACITY_0_WIDTH                         (16)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TOKENS_0                                    (16)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TOKENS_0_WIDTH                              (12)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TICK_0                                      (28)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TICK_0_WIDTH                                 (3)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_CAPACITY_1_0                         (31)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_CAPACITY_1_0_WIDTH                          (1)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_CAPACITY_1_1_15                         (32)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_CAPACITY_1_1_15_WIDTH                         (15)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TOKENS_1                                    (47)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TOKENS_1_WIDTH                              (12)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TICK_1                                      (59)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TICK_1_WIDTH                                 (3)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_MODE                                 (62)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_MODE_WIDTH                            (1)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_COLOR_BLIND                                 (63)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_COLOR_BLIND_WIDTH                            (1)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_DROP_MASK                                   (64)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_DROP_MASK_WIDTH                              (3)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_MAX_LENGTH                                  (67)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_MAX_LENGTH_WIDTH                            (14)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BYTE_CORRECTION_MODE                         (81)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BYTE_CORRECTION_MODE_WIDTH                          (1)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BYTE_CORRECTION                             (82)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BYTE_CORRECTION_WIDTH                          (8)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_RESERVED                                    (90)
#define SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_RESERVED_WIDTH                               (6)
typedef union SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint64 bucket_capacity_0:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_CAPACITY_0_WIDTH;  //[15: 0]
        jl_uint64 tokens_0:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TOKENS_0_WIDTH;                 //[27:16]
        jl_uint64 tick_0:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TICK_0_WIDTH;                     //[30:28]
        jl_uint64 bucket_capacity_1_0:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_CAPACITY_1_0_WIDTH;  //[31:31]
        jl_uint64 bucket_capacity_1_1_15:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_CAPACITY_1_1_15_WIDTH;  //[46:32]
        jl_uint64 tokens_1:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TOKENS_1_WIDTH;                 //[58:47]
        jl_uint64 tick_1:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_TICK_1_WIDTH;                     //[61:59]
        jl_uint64 bucket_mode:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BUCKET_MODE_WIDTH;           //[62:62]
        jl_uint64 color_blind:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_COLOR_BLIND_WIDTH;           //[63:63]
        jl_uint64 drop_mask:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_DROP_MASK_WIDTH;               //[66:64]
        jl_uint64 max_length:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_MAX_LENGTH_WIDTH;             //[80:67]
        jl_uint64 byte_correction_mode:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BYTE_CORRECTION_MODE_WIDTH;  //[81:81]
        jl_uint64 byte_correction:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_BYTE_CORRECTION_WIDTH;   //[89:82]
        jl_uint64 reserved:SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_OFFSET_RESERVED_WIDTH;                 //[95:90]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_ENTRY_SIZE];
} SWCORE_INGRESS_ADMISSION_CONTROL_TOKEN_BUCKET_CONFIGURATION_t;

#define SWCORE_INGRESS_ADMISSION_CONTROL_RESET                                                     ((jl_uint32)0x00100360U)
#define SWCORE_INGRESS_ADMISSION_CONTROL_RESET_NUM                                                 ((jl_uint32)0x00000010U)
#define SWCORE_INGRESS_ADMISSION_CONTROL_RESET_ENTRY_SIZE                                                               (1)
#define SWCORE_INGRESS_ADMISSION_CONTROL_RESET_OFFSET_BUCKET_RESET                                                      (0)
#define SWCORE_INGRESS_ADMISSION_CONTROL_RESET_OFFSET_BUCKET_RESET_WIDTH                                                (1)
#define SWCORE_INGRESS_ADMISSION_CONTROL_RESET_OFFSET_RESERVED                                                          (1)
#define SWCORE_INGRESS_ADMISSION_CONTROL_RESET_OFFSET_RESERVED_WIDTH                                                   (31)
typedef union SWCORE_INGRESS_ADMISSION_CONTROL_RESET_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bucket_reset:SWCORE_INGRESS_ADMISSION_CONTROL_RESET_OFFSET_BUCKET_RESET_WIDTH;                              //[ 0: 0]
        jl_uint32 reserved:SWCORE_INGRESS_ADMISSION_CONTROL_RESET_OFFSET_RESERVED_WIDTH;                                      //[31: 1]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_ADMISSION_CONTROL_RESET_ENTRY_SIZE];
} SWCORE_INGRESS_ADMISSION_CONTROL_RESET_t;

#define SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE                                              ((jl_uint32)0x001003A0U)
#define SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE_NUM                                          ((jl_uint32)0x00000010U)
#define SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE_ENTRY_SIZE                                                        (1)
#define SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE_OFFSET_TOKENS_0                                                   (0)
#define SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE_OFFSET_TOKENS_0_WIDTH                                            (16)
#define SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE_OFFSET_TOKENS_1                                                  (16)
#define SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE_OFFSET_TOKENS_1_WIDTH                                            (16)
typedef union SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 tokens_0:SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE_OFFSET_TOKENS_0_WIDTH;                               //[15: 0]
        jl_uint32 tokens_1:SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE_OFFSET_TOKENS_1_WIDTH;                               //[31:16]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE_ENTRY_SIZE];
} SWCORE_INGRESS_ADMISSION_CONTROL_CURRENT_SIZE_t;

#define SWCORE_LEARNING_AND_AGING_ENABLE                                                           ((jl_uint32)0x001003E0U)
#define SWCORE_LEARNING_AND_AGING_ENABLE_NUM                                                       ((jl_uint32)0x00000001U)
#define SWCORE_LEARNING_AND_AGING_ENABLE_ENTRY_SIZE                                                                     (1)
#define SWCORE_LEARNING_AND_AGING_ENABLE_OFFSET_LEARNING_ENABLE                                                         (0)
#define SWCORE_LEARNING_AND_AGING_ENABLE_OFFSET_LEARNING_ENABLE_WIDTH                                                   (1)
#define SWCORE_LEARNING_AND_AGING_ENABLE_OFFSET_AGING_ENABLE                                                            (1)
#define SWCORE_LEARNING_AND_AGING_ENABLE_OFFSET_AGING_ENABLE_WIDTH                                                      (1)
#define SWCORE_LEARNING_AND_AGING_ENABLE_OFFSET_RESERVED                                                                (2)
#define SWCORE_LEARNING_AND_AGING_ENABLE_OFFSET_RESERVED_WIDTH                                                         (30)
typedef union SWCORE_LEARNING_AND_AGING_ENABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 learning_enable:SWCORE_LEARNING_AND_AGING_ENABLE_OFFSET_LEARNING_ENABLE_WIDTH;                              //[ 0: 0]
        jl_uint32 aging_enable:SWCORE_LEARNING_AND_AGING_ENABLE_OFFSET_AGING_ENABLE_WIDTH;                                    //[ 1: 1]
        jl_uint32 reserved:SWCORE_LEARNING_AND_AGING_ENABLE_OFFSET_RESERVED_WIDTH;                                            //[31: 2]
    } BF;
    jl_uint32 val[SWCORE_LEARNING_AND_AGING_ENABLE_ENTRY_SIZE];
} SWCORE_LEARNING_AND_AGING_ENABLE_t;

#define SWCORE_DEFAULT_LEARNING_STATUS                                                             ((jl_uint32)0x001003E4U)
#define SWCORE_DEFAULT_LEARNING_STATUS_NUM                                                         ((jl_uint32)0x0000000BU)
#define SWCORE_DEFAULT_LEARNING_STATUS_ENTRY_SIZE                                                                       (1)
#define SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_VALID                                                                     (0)
#define SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_VALID_WIDTH                                                               (1)
#define SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_STAT                                                                      (1)
#define SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_STAT_WIDTH                                                                (1)
#define SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_HIT                                                                       (2)
#define SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_HIT_WIDTH                                                                 (1)
#define SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_RESERVED                                                                  (3)
#define SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_RESERVED_WIDTH                                                           (29)
typedef union SWCORE_DEFAULT_LEARNING_STATUS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 valid:SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_VALID_WIDTH;                                                    //[ 0: 0]
        jl_uint32 stat:SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_STAT_WIDTH;                                                      //[ 1: 1]
        jl_uint32 hit:SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_HIT_WIDTH;                                                        //[ 2: 2]
        jl_uint32 reserved:SWCORE_DEFAULT_LEARNING_STATUS_OFFSET_RESERVED_WIDTH;                                              //[31: 3]
    } BF;
    jl_uint32 val[SWCORE_DEFAULT_LEARNING_STATUS_ENTRY_SIZE];
} SWCORE_DEFAULT_LEARNING_STATUS_t;

#define SWCORE_TIME_TO_AGE                                                                         ((jl_uint32)0x00100410U)
#define SWCORE_TIME_TO_AGE_NUM                                                                     ((jl_uint32)0x00000001U)
#define SWCORE_TIME_TO_AGE_ENTRY_SIZE                                                                                   (2)
#define SWCORE_TIME_TO_AGE_OFFSET_TICK_CNT                                                                              (0)
#define SWCORE_TIME_TO_AGE_OFFSET_TICK_CNT_WIDTH                                                                       (32)
#define SWCORE_TIME_TO_AGE_OFFSET_TICK                                                                                 (32)
#define SWCORE_TIME_TO_AGE_OFFSET_TICK_WIDTH                                                                            (3)
#define SWCORE_TIME_TO_AGE_OFFSET_RESERVED                                                                             (35)
#define SWCORE_TIME_TO_AGE_OFFSET_RESERVED_WIDTH                                                                       (29)
typedef union SWCORE_TIME_TO_AGE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 tick_cnt:SWCORE_TIME_TO_AGE_OFFSET_TICK_CNT_WIDTH;                                                          //[31: 0]
        jl_uint64 tick:SWCORE_TIME_TO_AGE_OFFSET_TICK_WIDTH;                                                                  //[34:32]
        jl_uint64 reserved:SWCORE_TIME_TO_AGE_OFFSET_RESERVED_WIDTH;                                                          //[63:35]
    } BF;
    jl_uint32 val[SWCORE_TIME_TO_AGE_ENTRY_SIZE];
} SWCORE_TIME_TO_AGE_t;

#define SWCORE_L2_AGING_COLLISION_SHADOW_TABLE                                                     ((jl_uint32)0x00100418U)
#define SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_NUM                                                 ((jl_uint32)0x00000010U)
#define SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_ENTRY_SIZE                                                               (1)
#define SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_VALID                                                             (0)
#define SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_VALID_WIDTH                                                       (1)
#define SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_STAT                                                              (1)
#define SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_STAT_WIDTH                                                        (1)
#define SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_HIT                                                               (2)
#define SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_HIT_WIDTH                                                         (1)
#define SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_RESERVED                                                          (3)
#define SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_RESERVED_WIDTH                                                   (29)
typedef union SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 valid:SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_VALID_WIDTH;                                            //[ 0: 0]
        jl_uint32 stat:SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_STAT_WIDTH;                                              //[ 1: 1]
        jl_uint32 hit:SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_HIT_WIDTH;                                                //[ 2: 2]
        jl_uint32 reserved:SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_OFFSET_RESERVED_WIDTH;                                      //[31: 3]
    } BF;
    jl_uint32 val[SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_ENTRY_SIZE];
} SWCORE_L2_AGING_COLLISION_SHADOW_TABLE_t;

#define SWCORE_L2_AGING_STATUS_SHADOW_TABLE                                                        ((jl_uint32)0x00100458U)
#define SWCORE_L2_AGING_STATUS_SHADOW_TABLE_NUM                                                    ((jl_uint32)0x00001000U)
#define SWCORE_L2_AGING_STATUS_SHADOW_TABLE_ENTRY_SIZE                                                                  (1)
#define SWCORE_L2_AGING_STATUS_SHADOW_TABLE_OFFSET_VALID                                                                (0)
#define SWCORE_L2_AGING_STATUS_SHADOW_TABLE_OFFSET_VALID_WIDTH                                                          (1)
#define SWCORE_L2_AGING_STATUS_SHADOW_TABLE_OFFSET_RESERVED                                                             (1)
#define SWCORE_L2_AGING_STATUS_SHADOW_TABLE_OFFSET_RESERVED_WIDTH                                                      (31)
typedef union SWCORE_L2_AGING_STATUS_SHADOW_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 valid:SWCORE_L2_AGING_STATUS_SHADOW_TABLE_OFFSET_VALID_WIDTH;                                               //[ 0: 0]
        jl_uint32 reserved:SWCORE_L2_AGING_STATUS_SHADOW_TABLE_OFFSET_RESERVED_WIDTH;                                         //[31: 1]
    } BF;
    jl_uint32 val[SWCORE_L2_AGING_STATUS_SHADOW_TABLE_ENTRY_SIZE];
} SWCORE_L2_AGING_STATUS_SHADOW_TABLE_t;

#define SWCORE_SP_OVERFLOW_DROP                                                                    ((jl_uint32)0x00104458U)
#define SWCORE_SP_OVERFLOW_DROP_NUM                                                                ((jl_uint32)0x0000000BU)
#define SWCORE_SP_OVERFLOW_DROP_ENTRY_SIZE                                                                              (1)
#define SWCORE_SP_OVERFLOW_DROP_OFFSET_PACKETS                                                                          (0)
#define SWCORE_SP_OVERFLOW_DROP_OFFSET_PACKETS_WIDTH                                                                   (24)
#define SWCORE_SP_OVERFLOW_DROP_OFFSET_RESERVED                                                                        (24)
#define SWCORE_SP_OVERFLOW_DROP_OFFSET_RESERVED_WIDTH                                                                   (8)
typedef union SWCORE_SP_OVERFLOW_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_SP_OVERFLOW_DROP_OFFSET_PACKETS_WIDTH;                                                       //[23: 0]
        jl_uint32 reserved:SWCORE_SP_OVERFLOW_DROP_OFFSET_RESERVED_WIDTH;                                                     //[31:24]
    } BF;
    jl_uint32 val[SWCORE_SP_OVERFLOW_DROP_ENTRY_SIZE];
} SWCORE_SP_OVERFLOW_DROP_t;

#define SWCORE_IPP_BROKEN_PACKETS                                                                  ((jl_uint32)0x00104484U)
#define SWCORE_IPP_BROKEN_PACKETS_NUM                                                              ((jl_uint32)0x00000001U)
#define SWCORE_IPP_BROKEN_PACKETS_ENTRY_SIZE                                                                            (1)
#define SWCORE_IPP_BROKEN_PACKETS_OFFSET_PACKETS                                                                        (0)
#define SWCORE_IPP_BROKEN_PACKETS_OFFSET_PACKETS_WIDTH                                                                 (24)
#define SWCORE_IPP_BROKEN_PACKETS_OFFSET_RESERVED                                                                      (24)
#define SWCORE_IPP_BROKEN_PACKETS_OFFSET_RESERVED_WIDTH                                                                 (8)
typedef union SWCORE_IPP_BROKEN_PACKETS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_IPP_BROKEN_PACKETS_OFFSET_PACKETS_WIDTH;                                                     //[23: 0]
        jl_uint32 reserved:SWCORE_IPP_BROKEN_PACKETS_OFFSET_RESERVED_WIDTH;                                                   //[31:24]
    } BF;
    jl_uint32 val[SWCORE_IPP_BROKEN_PACKETS_ENTRY_SIZE];
} SWCORE_IPP_BROKEN_PACKETS_t;

#define SWCORE_IPP_PM_DROP                                                                         ((jl_uint32)0x00104488U)
#define SWCORE_IPP_PM_DROP_NUM                                                                     ((jl_uint32)0x00000001U)
#define SWCORE_IPP_PM_DROP_ENTRY_SIZE                                                                                   (1)
#define SWCORE_IPP_PM_DROP_OFFSET_PACKETS                                                                               (0)
#define SWCORE_IPP_PM_DROP_OFFSET_PACKETS_WIDTH                                                                        (24)
#define SWCORE_IPP_PM_DROP_OFFSET_RESERVED                                                                             (24)
#define SWCORE_IPP_PM_DROP_OFFSET_RESERVED_WIDTH                                                                        (8)
typedef union SWCORE_IPP_PM_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_IPP_PM_DROP_OFFSET_PACKETS_WIDTH;                                                            //[23: 0]
        jl_uint32 reserved:SWCORE_IPP_PM_DROP_OFFSET_RESERVED_WIDTH;                                                          //[31:24]
    } BF;
    jl_uint32 val[SWCORE_IPP_PM_DROP_ENTRY_SIZE];
} SWCORE_IPP_PM_DROP_t;

#define SWCORE_UNKNOWN_INGRESS_DROP                                                                ((jl_uint32)0x0010448CU)
#define SWCORE_UNKNOWN_INGRESS_DROP_NUM                                                            ((jl_uint32)0x00000001U)
#define SWCORE_UNKNOWN_INGRESS_DROP_ENTRY_SIZE                                                                          (1)
#define SWCORE_UNKNOWN_INGRESS_DROP_OFFSET_PACKETS                                                                      (0)
#define SWCORE_UNKNOWN_INGRESS_DROP_OFFSET_PACKETS_WIDTH                                                               (24)
#define SWCORE_UNKNOWN_INGRESS_DROP_OFFSET_RESERVED                                                                    (24)
#define SWCORE_UNKNOWN_INGRESS_DROP_OFFSET_RESERVED_WIDTH                                                               (8)
typedef union SWCORE_UNKNOWN_INGRESS_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_UNKNOWN_INGRESS_DROP_OFFSET_PACKETS_WIDTH;                                                   //[23: 0]
        jl_uint32 reserved:SWCORE_UNKNOWN_INGRESS_DROP_OFFSET_RESERVED_WIDTH;                                                 //[31:24]
    } BF;
    jl_uint32 val[SWCORE_UNKNOWN_INGRESS_DROP_ENTRY_SIZE];
} SWCORE_UNKNOWN_INGRESS_DROP_t;

#define SWCORE_EMPTY_MASK_DROP                                                                     ((jl_uint32)0x00104490U)
#define SWCORE_EMPTY_MASK_DROP_NUM                                                                 ((jl_uint32)0x00000001U)
#define SWCORE_EMPTY_MASK_DROP_ENTRY_SIZE                                                                               (1)
#define SWCORE_EMPTY_MASK_DROP_OFFSET_PACKETS                                                                           (0)
#define SWCORE_EMPTY_MASK_DROP_OFFSET_PACKETS_WIDTH                                                                    (24)
#define SWCORE_EMPTY_MASK_DROP_OFFSET_RESERVED                                                                         (24)
#define SWCORE_EMPTY_MASK_DROP_OFFSET_RESERVED_WIDTH                                                                    (8)
typedef union SWCORE_EMPTY_MASK_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_EMPTY_MASK_DROP_OFFSET_PACKETS_WIDTH;                                                        //[23: 0]
        jl_uint32 reserved:SWCORE_EMPTY_MASK_DROP_OFFSET_RESERVED_WIDTH;                                                      //[31:24]
    } BF;
    jl_uint32 val[SWCORE_EMPTY_MASK_DROP_ENTRY_SIZE];
} SWCORE_EMPTY_MASK_DROP_t;

#define SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN                                                   ((jl_uint32)0x00104494U)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN_NUM                                               ((jl_uint32)0x00000001U)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN_ENTRY_SIZE                                                             (1)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN_OFFSET_PACKETS                                                         (0)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN_OFFSET_PACKETS_WIDTH                                                  (24)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN_OFFSET_RESERVED                                                       (24)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN_OFFSET_RESERVED_WIDTH                                                  (8)
typedef union SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN_OFFSET_PACKETS_WIDTH;                                      //[23: 0]
        jl_uint32 reserved:SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN_OFFSET_RESERVED_WIDTH;                                    //[31:24]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN_ENTRY_SIZE];
} SWCORE_INGRESS_SPANNING_TREE_DROP_LISTEN_t;

#define SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING                                                 ((jl_uint32)0x00104498U)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING_NUM                                             ((jl_uint32)0x00000001U)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING_ENTRY_SIZE                                                           (1)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING_OFFSET_PACKETS                                                       (0)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING_OFFSET_PACKETS_WIDTH                                                (24)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING_OFFSET_RESERVED                                                     (24)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING_OFFSET_RESERVED_WIDTH                                                (8)
typedef union SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING_OFFSET_PACKETS_WIDTH;                                    //[23: 0]
        jl_uint32 reserved:SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING_OFFSET_RESERVED_WIDTH;                                  //[31:24]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING_ENTRY_SIZE];
} SWCORE_INGRESS_SPANNING_TREE_DROP_LEARNING_t;

#define SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING                                                 ((jl_uint32)0x0010449CU)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING_NUM                                             ((jl_uint32)0x00000001U)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING_ENTRY_SIZE                                                           (1)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING_OFFSET_PACKETS                                                       (0)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING_OFFSET_PACKETS_WIDTH                                                (24)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING_OFFSET_RESERVED                                                     (24)
#define SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING_OFFSET_RESERVED_WIDTH                                                (8)
typedef union SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING_OFFSET_PACKETS_WIDTH;                                    //[23: 0]
        jl_uint32 reserved:SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING_OFFSET_RESERVED_WIDTH;                                  //[31:24]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING_ENTRY_SIZE];
} SWCORE_INGRESS_SPANNING_TREE_DROP_BLOCKING_t;

#define SWCORE_L2_LOOKUP_DROP                                                                      ((jl_uint32)0x001044A0U)
#define SWCORE_L2_LOOKUP_DROP_NUM                                                                  ((jl_uint32)0x00000001U)
#define SWCORE_L2_LOOKUP_DROP_ENTRY_SIZE                                                                                (1)
#define SWCORE_L2_LOOKUP_DROP_OFFSET_PACKETS                                                                            (0)
#define SWCORE_L2_LOOKUP_DROP_OFFSET_PACKETS_WIDTH                                                                     (24)
#define SWCORE_L2_LOOKUP_DROP_OFFSET_RESERVED                                                                          (24)
#define SWCORE_L2_LOOKUP_DROP_OFFSET_RESERVED_WIDTH                                                                     (8)
typedef union SWCORE_L2_LOOKUP_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_L2_LOOKUP_DROP_OFFSET_PACKETS_WIDTH;                                                         //[23: 0]
        jl_uint32 reserved:SWCORE_L2_LOOKUP_DROP_OFFSET_RESERVED_WIDTH;                                                       //[31:24]
    } BF;
    jl_uint32 val[SWCORE_L2_LOOKUP_DROP_ENTRY_SIZE];
} SWCORE_L2_LOOKUP_DROP_t;

#define SWCORE_INGRESS_PACKET_FILTERING_DROP                                                       ((jl_uint32)0x001044A4U)
#define SWCORE_INGRESS_PACKET_FILTERING_DROP_NUM                                                   ((jl_uint32)0x00000001U)
#define SWCORE_INGRESS_PACKET_FILTERING_DROP_ENTRY_SIZE                                                                 (1)
#define SWCORE_INGRESS_PACKET_FILTERING_DROP_OFFSET_PACKETS                                                             (0)
#define SWCORE_INGRESS_PACKET_FILTERING_DROP_OFFSET_PACKETS_WIDTH                                                      (24)
#define SWCORE_INGRESS_PACKET_FILTERING_DROP_OFFSET_RESERVED                                                           (24)
#define SWCORE_INGRESS_PACKET_FILTERING_DROP_OFFSET_RESERVED_WIDTH                                                      (8)
typedef union SWCORE_INGRESS_PACKET_FILTERING_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_INGRESS_PACKET_FILTERING_DROP_OFFSET_PACKETS_WIDTH;                                          //[23: 0]
        jl_uint32 reserved:SWCORE_INGRESS_PACKET_FILTERING_DROP_OFFSET_RESERVED_WIDTH;                                        //[31:24]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_PACKET_FILTERING_DROP_ENTRY_SIZE];
} SWCORE_INGRESS_PACKET_FILTERING_DROP_t;

#define SWCORE_RESERVED_MAC_DA_DROP                                                                ((jl_uint32)0x001044A8U)
#define SWCORE_RESERVED_MAC_DA_DROP_NUM                                                            ((jl_uint32)0x00000001U)
#define SWCORE_RESERVED_MAC_DA_DROP_ENTRY_SIZE                                                                          (1)
#define SWCORE_RESERVED_MAC_DA_DROP_OFFSET_PACKETS                                                                      (0)
#define SWCORE_RESERVED_MAC_DA_DROP_OFFSET_PACKETS_WIDTH                                                               (24)
#define SWCORE_RESERVED_MAC_DA_DROP_OFFSET_RESERVED                                                                    (24)
#define SWCORE_RESERVED_MAC_DA_DROP_OFFSET_RESERVED_WIDTH                                                               (8)
typedef union SWCORE_RESERVED_MAC_DA_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_RESERVED_MAC_DA_DROP_OFFSET_PACKETS_WIDTH;                                                   //[23: 0]
        jl_uint32 reserved:SWCORE_RESERVED_MAC_DA_DROP_OFFSET_RESERVED_WIDTH;                                                 //[31:24]
    } BF;
    jl_uint32 val[SWCORE_RESERVED_MAC_DA_DROP_ENTRY_SIZE];
} SWCORE_RESERVED_MAC_DA_DROP_t;

#define SWCORE_RESERVED_MAC_SA_DROP                                                                ((jl_uint32)0x001044ACU)
#define SWCORE_RESERVED_MAC_SA_DROP_NUM                                                            ((jl_uint32)0x00000001U)
#define SWCORE_RESERVED_MAC_SA_DROP_ENTRY_SIZE                                                                          (1)
#define SWCORE_RESERVED_MAC_SA_DROP_OFFSET_PACKETS                                                                      (0)
#define SWCORE_RESERVED_MAC_SA_DROP_OFFSET_PACKETS_WIDTH                                                               (24)
#define SWCORE_RESERVED_MAC_SA_DROP_OFFSET_RESERVED                                                                    (24)
#define SWCORE_RESERVED_MAC_SA_DROP_OFFSET_RESERVED_WIDTH                                                               (8)
typedef union SWCORE_RESERVED_MAC_SA_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_RESERVED_MAC_SA_DROP_OFFSET_PACKETS_WIDTH;                                                   //[23: 0]
        jl_uint32 reserved:SWCORE_RESERVED_MAC_SA_DROP_OFFSET_RESERVED_WIDTH;                                                 //[31:24]
    } BF;
    jl_uint32 val[SWCORE_RESERVED_MAC_SA_DROP_ENTRY_SIZE];
} SWCORE_RESERVED_MAC_SA_DROP_t;

#define SWCORE_VLAN_MEMBER_DROP                                                                    ((jl_uint32)0x001044B0U)
#define SWCORE_VLAN_MEMBER_DROP_NUM                                                                ((jl_uint32)0x00000001U)
#define SWCORE_VLAN_MEMBER_DROP_ENTRY_SIZE                                                                              (1)
#define SWCORE_VLAN_MEMBER_DROP_OFFSET_PACKETS                                                                          (0)
#define SWCORE_VLAN_MEMBER_DROP_OFFSET_PACKETS_WIDTH                                                                   (24)
#define SWCORE_VLAN_MEMBER_DROP_OFFSET_RESERVED                                                                        (24)
#define SWCORE_VLAN_MEMBER_DROP_OFFSET_RESERVED_WIDTH                                                                   (8)
typedef union SWCORE_VLAN_MEMBER_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_VLAN_MEMBER_DROP_OFFSET_PACKETS_WIDTH;                                                       //[23: 0]
        jl_uint32 reserved:SWCORE_VLAN_MEMBER_DROP_OFFSET_RESERVED_WIDTH;                                                     //[31:24]
    } BF;
    jl_uint32 val[SWCORE_VLAN_MEMBER_DROP_ENTRY_SIZE];
} SWCORE_VLAN_MEMBER_DROP_t;

#define SWCORE_MINIMUM_ALLOWED_VLAN_DROP                                                           ((jl_uint32)0x001044B4U)
#define SWCORE_MINIMUM_ALLOWED_VLAN_DROP_NUM                                                       ((jl_uint32)0x00000001U)
#define SWCORE_MINIMUM_ALLOWED_VLAN_DROP_ENTRY_SIZE                                                                     (1)
#define SWCORE_MINIMUM_ALLOWED_VLAN_DROP_OFFSET_PACKETS                                                                 (0)
#define SWCORE_MINIMUM_ALLOWED_VLAN_DROP_OFFSET_PACKETS_WIDTH                                                          (24)
#define SWCORE_MINIMUM_ALLOWED_VLAN_DROP_OFFSET_RESERVED                                                               (24)
#define SWCORE_MINIMUM_ALLOWED_VLAN_DROP_OFFSET_RESERVED_WIDTH                                                          (8)
typedef union SWCORE_MINIMUM_ALLOWED_VLAN_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_MINIMUM_ALLOWED_VLAN_DROP_OFFSET_PACKETS_WIDTH;                                              //[23: 0]
        jl_uint32 reserved:SWCORE_MINIMUM_ALLOWED_VLAN_DROP_OFFSET_RESERVED_WIDTH;                                            //[31:24]
    } BF;
    jl_uint32 val[SWCORE_MINIMUM_ALLOWED_VLAN_DROP_ENTRY_SIZE];
} SWCORE_MINIMUM_ALLOWED_VLAN_DROP_t;

#define SWCORE_MAXIMUM_ALLOWED_VLAN_DROP                                                           ((jl_uint32)0x001044B8U)
#define SWCORE_MAXIMUM_ALLOWED_VLAN_DROP_NUM                                                       ((jl_uint32)0x00000001U)
#define SWCORE_MAXIMUM_ALLOWED_VLAN_DROP_ENTRY_SIZE                                                                     (1)
#define SWCORE_MAXIMUM_ALLOWED_VLAN_DROP_OFFSET_PACKETS                                                                 (0)
#define SWCORE_MAXIMUM_ALLOWED_VLAN_DROP_OFFSET_PACKETS_WIDTH                                                          (24)
#define SWCORE_MAXIMUM_ALLOWED_VLAN_DROP_OFFSET_RESERVED                                                               (24)
#define SWCORE_MAXIMUM_ALLOWED_VLAN_DROP_OFFSET_RESERVED_WIDTH                                                          (8)
typedef union SWCORE_MAXIMUM_ALLOWED_VLAN_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_MAXIMUM_ALLOWED_VLAN_DROP_OFFSET_PACKETS_WIDTH;                                              //[23: 0]
        jl_uint32 reserved:SWCORE_MAXIMUM_ALLOWED_VLAN_DROP_OFFSET_RESERVED_WIDTH;                                            //[31:24]
    } BF;
    jl_uint32 val[SWCORE_MAXIMUM_ALLOWED_VLAN_DROP_ENTRY_SIZE];
} SWCORE_MAXIMUM_ALLOWED_VLAN_DROP_t;

#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP                                                  ((jl_uint32)0x001044BCU)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP_NUM                                              ((jl_uint32)0x00000001U)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP_ENTRY_SIZE                                                            (1)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP_OFFSET_PACKETS                                                        (0)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP_OFFSET_PACKETS_WIDTH                                                 (24)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP_OFFSET_RESERVED                                                      (24)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP_OFFSET_RESERVED_WIDTH                                                 (8)
typedef union SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP_OFFSET_PACKETS_WIDTH;                                     //[23: 0]
        jl_uint32 reserved:SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP_OFFSET_RESERVED_WIDTH;                                   //[31:24]
    } BF;
    jl_uint32 val[SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP_ENTRY_SIZE];
} SWCORE_L2_RESERVED_MULTICAST_ADDRESS_DROP_t;

#define SWCORE_INGRESS_CONFIGURABLE_ACL_DROP                                                       ((jl_uint32)0x001044C0U)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_DROP_NUM                                                   ((jl_uint32)0x00000001U)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_DROP_ENTRY_SIZE                                                                 (1)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_DROP_OFFSET_PACKETS                                                             (0)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_DROP_OFFSET_PACKETS_WIDTH                                                      (24)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_DROP_OFFSET_RESERVED                                                           (24)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_DROP_OFFSET_RESERVED_WIDTH                                                      (8)
typedef union SWCORE_INGRESS_CONFIGURABLE_ACL_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_INGRESS_CONFIGURABLE_ACL_DROP_OFFSET_PACKETS_WIDTH;                                          //[23: 0]
        jl_uint32 reserved:SWCORE_INGRESS_CONFIGURABLE_ACL_DROP_OFFSET_RESERVED_WIDTH;                                        //[31:24]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_CONFIGURABLE_ACL_DROP_ENTRY_SIZE];
} SWCORE_INGRESS_CONFIGURABLE_ACL_DROP_t;

#define SWCORE_IPP_PACKET_HEAD_COUNTER                                                             ((jl_uint32)0x001044C4U)
#define SWCORE_IPP_PACKET_HEAD_COUNTER_NUM                                                         ((jl_uint32)0x00000001U)
#define SWCORE_IPP_PACKET_HEAD_COUNTER_ENTRY_SIZE                                                                       (1)
#define SWCORE_IPP_PACKET_HEAD_COUNTER_OFFSET_PACKETS                                                                   (0)
#define SWCORE_IPP_PACKET_HEAD_COUNTER_OFFSET_PACKETS_WIDTH                                                            (24)
#define SWCORE_IPP_PACKET_HEAD_COUNTER_OFFSET_RESERVED                                                                 (24)
#define SWCORE_IPP_PACKET_HEAD_COUNTER_OFFSET_RESERVED_WIDTH                                                            (8)
typedef union SWCORE_IPP_PACKET_HEAD_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_IPP_PACKET_HEAD_COUNTER_OFFSET_PACKETS_WIDTH;                                                //[23: 0]
        jl_uint32 reserved:SWCORE_IPP_PACKET_HEAD_COUNTER_OFFSET_RESERVED_WIDTH;                                              //[31:24]
    } BF;
    jl_uint32 val[SWCORE_IPP_PACKET_HEAD_COUNTER_ENTRY_SIZE];
} SWCORE_IPP_PACKET_HEAD_COUNTER_t;

#define SWCORE_IPP_PACKET_TAIL_COUNTER                                                             ((jl_uint32)0x001044C8U)
#define SWCORE_IPP_PACKET_TAIL_COUNTER_NUM                                                         ((jl_uint32)0x00000001U)
#define SWCORE_IPP_PACKET_TAIL_COUNTER_ENTRY_SIZE                                                                       (1)
#define SWCORE_IPP_PACKET_TAIL_COUNTER_OFFSET_PACKETS                                                                   (0)
#define SWCORE_IPP_PACKET_TAIL_COUNTER_OFFSET_PACKETS_WIDTH                                                            (24)
#define SWCORE_IPP_PACKET_TAIL_COUNTER_OFFSET_RESERVED                                                                 (24)
#define SWCORE_IPP_PACKET_TAIL_COUNTER_OFFSET_RESERVED_WIDTH                                                            (8)
typedef union SWCORE_IPP_PACKET_TAIL_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_IPP_PACKET_TAIL_COUNTER_OFFSET_PACKETS_WIDTH;                                                //[23: 0]
        jl_uint32 reserved:SWCORE_IPP_PACKET_TAIL_COUNTER_OFFSET_RESERVED_WIDTH;                                              //[31:24]
    } BF;
    jl_uint32 val[SWCORE_IPP_PACKET_TAIL_COUNTER_ENTRY_SIZE];
} SWCORE_IPP_PACKET_TAIL_COUNTER_t;

#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION                                                ((jl_uint32)0x001044CCU)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_NUM                                            ((jl_uint32)0x00000100U)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_ENTRY_SIZE                                                          (1)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_OFFSET_DROP_MASK                                                    (0)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_OFFSET_DROP_MASK_WIDTH                                             (11)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_OFFSET_SEND_TO_CPU_MASK                                            (11)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_OFFSET_SEND_TO_CPU_MASK_WIDTH                                      (11)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_OFFSET_RESERVED                                                    (22)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_OFFSET_RESERVED_WIDTH                                              (10)
typedef union SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 drop_mask:SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_OFFSET_DROP_MASK_WIDTH;                               //[10: 0]
        jl_uint32 send_to_cpu_mask:SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_OFFSET_SEND_TO_CPU_MASK_WIDTH;                 //[21:11]
        jl_uint32 reserved:SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_OFFSET_RESERVED_WIDTH;                                 //[31:22]
    } BF;
    jl_uint32 val[SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_ENTRY_SIZE];
} SWCORE_L2_RESERVED_MULTICAST_ADDRESS_ACTION_t;

#define SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER                                           ((jl_uint32)0x001048CCU)
#define SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_NUM                                       ((jl_uint32)0x00000080U)
#define SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_ENTRY_SIZE                                                     (1)
#define SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_MMP_VALID                                               (0)
#define SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_MMP_VALID_WIDTH                                         (1)
#define SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_MMP_PTR                                                 (1)
#define SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_MMP_PTR_WIDTH                                           (4)
#define SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_MMP_ORDER                                               (5)
#define SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_MMP_ORDER_WIDTH                                         (2)
#define SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_RESERVED                                                (7)
#define SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_RESERVED_WIDTH                                         (25)
typedef union SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 mmp_valid:SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_MMP_VALID_WIDTH;                          //[ 0: 0]
        jl_uint32 mmp_ptr:SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_MMP_PTR_WIDTH;                              //[ 4: 1]
        jl_uint32 mmp_order:SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_MMP_ORDER_WIDTH;                          //[ 6: 5]
        jl_uint32 reserved:SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_OFFSET_RESERVED_WIDTH;                            //[31: 7]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_ENTRY_SIZE];
} SWCORE_INGRESS_ADMISSION_CONTROL_INITIAL_POINTER_t;

#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE                                                        ((jl_uint32)0x00104ACCU)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_NUM                                                    ((jl_uint32)0x00000040U)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_ENTRY_SIZE                                                                 (16)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_VALID                                                                (0)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_VALID_WIDTH                                                          (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_0_30                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_0_30_WIDTH                                             (31)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_31_62                                                  (32)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_31_62_WIDTH                                            (32)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_63_94                                                  (64)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_63_94_WIDTH                                            (32)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_95_126                                                 (96)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_95_126_WIDTH                                           (32)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_127_158                                               (128)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_127_158_WIDTH                                          (32)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_159_190                                               (160)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_159_190_WIDTH                                          (32)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_191_207                                               (192)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_191_207_WIDTH                                          (17)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_DROP_ENABLE                                                        (209)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_DROP_ENABLE_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_SEND_TO_CPU                                                        (210)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_SEND_TO_CPU_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_SEND_TO_PORT                                                       (211)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_SEND_TO_PORT_WIDTH                                                   (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_DEST_PORT                                                          (212)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_DEST_PORT_WIDTH                                                      (4)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_VID_VALID                                                    (216)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_VID_VALID_WIDTH                                                (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_VID_0_6                                                      (217)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_VID_0_6_WIDTH                                                  (7)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_VID_7_11                                                     (224)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_VID_7_11_WIDTH                                                 (5)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_QUEUE                                                        (229)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_QUEUE_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_E_QUEUE                                                            (230)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_E_QUEUE_WIDTH                                                        (3)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_COLOR                                                        (233)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_COLOR_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COLOR                                                              (234)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COLOR_WIDTH                                                          (2)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_MMP_VALID                                                          (236)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_MMP_VALID_WIDTH                                                      (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_MMP_PTR                                                            (237)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_MMP_PTR_WIDTH                                                        (4)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_MMP_ORDER                                                          (241)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_MMP_ORDER_WIDTH                                                      (2)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_COUNTER                                                     (243)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_COUNTER_WIDTH                                                 (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COUNTER                                                            (244)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COUNTER_WIDTH                                                        (5)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NO_LEARNING                                                        (249)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NO_LEARNING_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_CFI_DEI                                                     (250)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_CFI_DEI_WIDTH                                                 (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_CFI_DEI_VALUE                                                  (251)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_CFI_DEI_VALUE_WIDTH                                              (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_PCP                                                         (252)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_PCP_WIDTH                                                     (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_PCP_VALUE                                                      (253)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_PCP_VALUE_WIDTH                                                  (3)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_VID                                                         (256)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_VID_WIDTH                                                     (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_VID_VALUE                                                      (257)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_VID_VALUE_WIDTH                                                 (12)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_ETYPE                                                       (269)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_ETYPE_WIDTH                                                   (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_ETH_TYPE                                                       (270)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_ETH_TYPE_WIDTH                                                   (2)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_INPUT_MIRROR                                                       (272)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_INPUT_MIRROR_WIDTH                                                   (1)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_DEST_INPUT_MIRROR                                                  (273)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_DEST_INPUT_MIRROR_WIDTH                                              (4)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_RESERVED                                                           (277)
#define SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_RESERVED_WIDTH                                                      (11)
typedef union SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 valid:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_VALID_WIDTH;                                               //[ 0: 0]
        jl_uint64 compare_data_0_30:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_0_30_WIDTH;                       //[31: 1]
        jl_uint64 compare_data_31_62:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_31_62_WIDTH;                     //[63:32]
        jl_uint64 compare_data_63_94:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_63_94_WIDTH;                     //[95:64]
        jl_uint64 compare_data_95_126:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_95_126_WIDTH;                  //[127:96]
        jl_uint64 compare_data_127_158:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_127_158_WIDTH;               //[159:128]
        jl_uint64 compare_data_159_190:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_159_190_WIDTH;               //[191:160]
        jl_uint64 compare_data_191_207:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COMPARE_DATA_191_207_WIDTH;               //[208:192]
        jl_uint64 drop_enable:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_DROP_ENABLE_WIDTH;                                 //[209:209]
        jl_uint64 send_to_cpu:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_SEND_TO_CPU_WIDTH;                                 //[210:210]
        jl_uint64 send_to_port:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_SEND_TO_PORT_WIDTH;                               //[211:211]
        jl_uint64 dest_port:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_DEST_PORT_WIDTH;                                     //[215:212]
        jl_uint64 force_vid_valid:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_VID_VALID_WIDTH;                         //[216:216]
        jl_uint64 force_vid_0_6:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_VID_0_6_WIDTH;                             //[223:217]
        jl_uint64 force_vid_7_11:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_VID_7_11_WIDTH;                           //[228:224]
        jl_uint64 force_queue:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_QUEUE_WIDTH;                                 //[229:229]
        jl_uint64 e_queue:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_E_QUEUE_WIDTH;                                         //[232:230]
        jl_uint64 force_color:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_FORCE_COLOR_WIDTH;                                 //[233:233]
        jl_uint64 color:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COLOR_WIDTH;                                             //[235:234]
        jl_uint64 mmp_valid:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_MMP_VALID_WIDTH;                                     //[236:236]
        jl_uint64 mmp_ptr:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_MMP_PTR_WIDTH;                                         //[240:237]
        jl_uint64 mmp_order:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_MMP_ORDER_WIDTH;                                     //[242:241]
        jl_uint64 update_counter:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_COUNTER_WIDTH;                           //[243:243]
        jl_uint64 counter:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_COUNTER_WIDTH;                                         //[248:244]
        jl_uint64 no_learning:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NO_LEARNING_WIDTH;                                 //[249:249]
        jl_uint64 update_cfi_dei:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_CFI_DEI_WIDTH;                           //[250:250]
        jl_uint64 new_cfi_dei_value:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_CFI_DEI_VALUE_WIDTH;                     //[251:251]
        jl_uint64 update_pcp:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_PCP_WIDTH;                                   //[252:252]
        jl_uint64 new_pcp_value:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_PCP_VALUE_WIDTH;                             //[255:253]
        jl_uint64 update_vid:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_VID_WIDTH;                                   //[256:256]
        jl_uint64 new_vid_value:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_VID_VALUE_WIDTH;                             //[268:257]
        jl_uint64 update_etype:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_UPDATE_ETYPE_WIDTH;                               //[269:269]
        jl_uint64 new_eth_type:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_NEW_ETH_TYPE_WIDTH;                               //[271:270]
        jl_uint64 input_mirror:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_INPUT_MIRROR_WIDTH;                               //[272:272]
        jl_uint64 dest_input_mirror:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_DEST_INPUT_MIRROR_WIDTH;                     //[276:273]
        jl_uint64 reserved:SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_OFFSET_RESERVED_WIDTH;                                       //[287:277]
    } BF;
    jl_uint32 val[SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_ENTRY_SIZE];
} SWCORE_CONFIGURABLE_ACL_LARGE_TABLE_t;

#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE                                                        ((jl_uint32)0x00105ACCU)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_NUM                                                    ((jl_uint32)0x00000020U)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_ENTRY_SIZE                                                                 (16)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_VALID                                                                (0)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_VALID_WIDTH                                                          (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_0_30                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_0_30_WIDTH                                             (31)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_31_62                                                  (32)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_31_62_WIDTH                                            (32)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_63_94                                                  (64)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_63_94_WIDTH                                            (32)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_95_126                                                 (96)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_95_126_WIDTH                                           (32)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_127_158                                               (128)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_127_158_WIDTH                                          (32)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_159_190                                               (160)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_159_190_WIDTH                                          (32)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_191_207                                               (192)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_191_207_WIDTH                                          (17)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_DROP_ENABLE                                                        (209)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_DROP_ENABLE_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_SEND_TO_CPU                                                        (210)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_SEND_TO_CPU_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_SEND_TO_PORT                                                       (211)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_SEND_TO_PORT_WIDTH                                                   (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_DEST_PORT                                                          (212)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_DEST_PORT_WIDTH                                                      (4)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_VID_VALID                                                    (216)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_VID_VALID_WIDTH                                                (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_VID_0_6                                                      (217)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_VID_0_6_WIDTH                                                  (7)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_VID_7_11                                                     (224)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_VID_7_11_WIDTH                                                 (5)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_QUEUE                                                        (229)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_QUEUE_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_E_QUEUE                                                            (230)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_E_QUEUE_WIDTH                                                        (3)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_COLOR                                                        (233)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_COLOR_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COLOR                                                              (234)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COLOR_WIDTH                                                          (2)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_MMP_VALID                                                          (236)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_MMP_VALID_WIDTH                                                      (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_MMP_PTR                                                            (237)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_MMP_PTR_WIDTH                                                        (4)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_MMP_ORDER                                                          (241)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_MMP_ORDER_WIDTH                                                      (2)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_COUNTER                                                     (243)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_COUNTER_WIDTH                                                 (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COUNTER                                                            (244)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COUNTER_WIDTH                                                        (5)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NO_LEARNING                                                        (249)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NO_LEARNING_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_CFI_DEI                                                     (250)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_CFI_DEI_WIDTH                                                 (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_CFI_DEI_VALUE                                                  (251)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_CFI_DEI_VALUE_WIDTH                                              (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_PCP                                                         (252)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_PCP_WIDTH                                                     (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_PCP_VALUE                                                      (253)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_PCP_VALUE_WIDTH                                                  (3)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_VID                                                         (256)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_VID_WIDTH                                                     (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_VID_VALUE                                                      (257)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_VID_VALUE_WIDTH                                                 (12)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_ETYPE                                                       (269)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_ETYPE_WIDTH                                                   (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_ETH_TYPE                                                       (270)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_ETH_TYPE_WIDTH                                                   (2)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_INPUT_MIRROR                                                       (272)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_INPUT_MIRROR_WIDTH                                                   (1)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_DEST_INPUT_MIRROR                                                  (273)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_DEST_INPUT_MIRROR_WIDTH                                              (4)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_RESERVED                                                           (277)
#define SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_RESERVED_WIDTH                                                      (11)
typedef union SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 valid:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_VALID_WIDTH;                                               //[ 0: 0]
        jl_uint64 compare_data_0_30:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_0_30_WIDTH;                       //[31: 1]
        jl_uint64 compare_data_31_62:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_31_62_WIDTH;                     //[63:32]
        jl_uint64 compare_data_63_94:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_63_94_WIDTH;                     //[95:64]
        jl_uint64 compare_data_95_126:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_95_126_WIDTH;                  //[127:96]
        jl_uint64 compare_data_127_158:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_127_158_WIDTH;               //[159:128]
        jl_uint64 compare_data_159_190:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_159_190_WIDTH;               //[191:160]
        jl_uint64 compare_data_191_207:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COMPARE_DATA_191_207_WIDTH;               //[208:192]
        jl_uint64 drop_enable:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_DROP_ENABLE_WIDTH;                                 //[209:209]
        jl_uint64 send_to_cpu:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_SEND_TO_CPU_WIDTH;                                 //[210:210]
        jl_uint64 send_to_port:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_SEND_TO_PORT_WIDTH;                               //[211:211]
        jl_uint64 dest_port:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_DEST_PORT_WIDTH;                                     //[215:212]
        jl_uint64 force_vid_valid:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_VID_VALID_WIDTH;                         //[216:216]
        jl_uint64 force_vid_0_6:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_VID_0_6_WIDTH;                             //[223:217]
        jl_uint64 force_vid_7_11:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_VID_7_11_WIDTH;                           //[228:224]
        jl_uint64 force_queue:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_QUEUE_WIDTH;                                 //[229:229]
        jl_uint64 e_queue:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_E_QUEUE_WIDTH;                                         //[232:230]
        jl_uint64 force_color:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_FORCE_COLOR_WIDTH;                                 //[233:233]
        jl_uint64 color:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COLOR_WIDTH;                                             //[235:234]
        jl_uint64 mmp_valid:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_MMP_VALID_WIDTH;                                     //[236:236]
        jl_uint64 mmp_ptr:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_MMP_PTR_WIDTH;                                         //[240:237]
        jl_uint64 mmp_order:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_MMP_ORDER_WIDTH;                                     //[242:241]
        jl_uint64 update_counter:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_COUNTER_WIDTH;                           //[243:243]
        jl_uint64 counter:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_COUNTER_WIDTH;                                         //[248:244]
        jl_uint64 no_learning:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NO_LEARNING_WIDTH;                                 //[249:249]
        jl_uint64 update_cfi_dei:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_CFI_DEI_WIDTH;                           //[250:250]
        jl_uint64 new_cfi_dei_value:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_CFI_DEI_VALUE_WIDTH;                     //[251:251]
        jl_uint64 update_pcp:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_PCP_WIDTH;                                   //[252:252]
        jl_uint64 new_pcp_value:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_PCP_VALUE_WIDTH;                             //[255:253]
        jl_uint64 update_vid:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_VID_WIDTH;                                   //[256:256]
        jl_uint64 new_vid_value:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_VID_VALUE_WIDTH;                             //[268:257]
        jl_uint64 update_etype:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_UPDATE_ETYPE_WIDTH;                               //[269:269]
        jl_uint64 new_eth_type:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_NEW_ETH_TYPE_WIDTH;                               //[271:270]
        jl_uint64 input_mirror:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_INPUT_MIRROR_WIDTH;                               //[272:272]
        jl_uint64 dest_input_mirror:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_DEST_INPUT_MIRROR_WIDTH;                     //[276:273]
        jl_uint64 reserved:SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_OFFSET_RESERVED_WIDTH;                                       //[287:277]
    } BF;
    jl_uint32 val[SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_ENTRY_SIZE];
} SWCORE_CONFIGURABLE_ACL_SMALL_TABLE_t;

#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER                                                        ((jl_uint32)0x001062CCU)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_NUM                                                    ((jl_uint32)0x00000020U)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_ENTRY_SIZE                                                                  (4)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_DROP_ENABLE                                                          (0)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_DROP_ENABLE_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_SEND_TO_CPU                                                          (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_SEND_TO_CPU_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_SEND_TO_PORT                                                         (2)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_SEND_TO_PORT_WIDTH                                                   (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_DEST_PORT                                                            (3)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_DEST_PORT_WIDTH                                                      (4)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_VID_VALID                                                      (7)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_VID_VALID_WIDTH                                                (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_VID                                                            (8)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_VID_WIDTH                                                     (12)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_QUEUE                                                         (20)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_QUEUE_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_E_QUEUE                                                             (21)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_E_QUEUE_WIDTH                                                        (3)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_COLOR                                                         (24)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_COLOR_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_COLOR                                                               (25)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_COLOR_WIDTH                                                          (2)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_MMP_VALID                                                           (27)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_MMP_VALID_WIDTH                                                      (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_MMP_PTR                                                             (28)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_MMP_PTR_WIDTH                                                        (4)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_MMP_ORDER                                                           (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_MMP_ORDER_WIDTH                                                      (2)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_COUNTER                                                      (34)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_COUNTER_WIDTH                                                 (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_COUNTER                                                             (35)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_COUNTER_WIDTH                                                        (5)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NO_LEARNING                                                         (40)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NO_LEARNING_WIDTH                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_CFI_DEI                                                      (41)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_CFI_DEI_WIDTH                                                 (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_CFI_DEI_VALUE                                                   (42)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_CFI_DEI_VALUE_WIDTH                                              (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_PCP                                                          (43)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_PCP_WIDTH                                                     (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_PCP_VALUE                                                       (44)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_PCP_VALUE_WIDTH                                                  (3)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_VID                                                          (47)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_VID_WIDTH                                                     (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_VID_VALUE                                                       (48)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_VID_VALUE_WIDTH                                                 (12)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_ETYPE                                                        (60)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_ETYPE_WIDTH                                                   (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_ETH_TYPE                                                        (61)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_ETH_TYPE_WIDTH                                                   (2)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_INPUT_MIRROR                                                        (63)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_INPUT_MIRROR_WIDTH                                                   (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_DEST_INPUT_MIRROR                                                   (64)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_DEST_INPUT_MIRROR_WIDTH                                              (4)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_RESERVED                                                            (68)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_RESERVED_WIDTH                                                      (28)
typedef union SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_u {
    struct __attribute__ ((packed)) {
        jl_uint64 drop_enable:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_DROP_ENABLE_WIDTH;                                   //[ 0: 0]
        jl_uint64 send_to_cpu:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_SEND_TO_CPU_WIDTH;                                   //[ 1: 1]
        jl_uint64 send_to_port:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_SEND_TO_PORT_WIDTH;                                 //[ 2: 2]
        jl_uint64 dest_port:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_DEST_PORT_WIDTH;                                       //[ 6: 3]
        jl_uint64 force_vid_valid:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_VID_VALID_WIDTH;                           //[ 7: 7]
        jl_uint64 force_vid:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_VID_WIDTH;                                       //[19: 8]
        jl_uint64 force_queue:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_QUEUE_WIDTH;                                   //[20:20]
        jl_uint64 e_queue:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_E_QUEUE_WIDTH;                                           //[23:21]
        jl_uint64 force_color:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_FORCE_COLOR_WIDTH;                                   //[24:24]
        jl_uint64 color:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_COLOR_WIDTH;                                               //[26:25]
        jl_uint64 mmp_valid:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_MMP_VALID_WIDTH;                                       //[27:27]
        jl_uint64 mmp_ptr:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_MMP_PTR_WIDTH;                                           //[31:28]
        jl_uint64 mmp_order:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_MMP_ORDER_WIDTH;                                       //[33:32]
        jl_uint64 update_counter:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_COUNTER_WIDTH;                             //[34:34]
        jl_uint64 counter:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_COUNTER_WIDTH;                                           //[39:35]
        jl_uint64 no_learning:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NO_LEARNING_WIDTH;                                   //[40:40]
        jl_uint64 update_cfi_dei:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_CFI_DEI_WIDTH;                             //[41:41]
        jl_uint64 new_cfi_dei_value:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_CFI_DEI_VALUE_WIDTH;                       //[42:42]
        jl_uint64 update_pcp:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_PCP_WIDTH;                                     //[43:43]
        jl_uint64 new_pcp_value:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_PCP_VALUE_WIDTH;                               //[46:44]
        jl_uint64 update_vid:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_VID_WIDTH;                                     //[47:47]
        jl_uint64 new_vid_value:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_VID_VALUE_WIDTH;                               //[59:48]
        jl_uint64 update_etype:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_UPDATE_ETYPE_WIDTH;                                 //[60:60]
        jl_uint64 new_eth_type:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_NEW_ETH_TYPE_WIDTH;                                 //[62:61]
        jl_uint64 input_mirror:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_INPUT_MIRROR_WIDTH;                                 //[63:63]
        jl_uint64 dest_input_mirror:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_DEST_INPUT_MIRROR_WIDTH;                       //[67:64]
        jl_uint64 reserved:SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_OFFSET_RESERVED_WIDTH;                                         //[95:68]
    } BF;
    jl_uint32 val[SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_ENTRY_SIZE];
} SWCORE_CONFIGURABLE_ACL_TCAM_ANSWER_t;

#define SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER                                             ((jl_uint32)0x001064CCU)
#define SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_NUM                                         ((jl_uint32)0x00000004U)
#define SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_ENTRY_SIZE                                                       (1)
#define SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID                                               (0)
#define SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID_WIDTH                                        (12)
#define SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER                                                    (12)
#define SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER_WIDTH                                               (2)
#define SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED                                                 (14)
#define SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED_WIDTH                                           (18)
typedef union SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 ingress_vid:SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID_WIDTH;                        //[11: 0]
        jl_uint32 order:SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER_WIDTH;                                    //[13:12]
        jl_uint32 reserved:SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED_WIDTH;                              //[31:14]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_ENTRY_SIZE];
} SWCORE_INGRESS_VID_MAC_RANGE_ASSIGNMENT_ANSWER_t;

#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER                                       ((jl_uint32)0x001064DCU)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_NUM                                   ((jl_uint32)0x00000004U)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_ENTRY_SIZE                                                 (1)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID                                         (0)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID_WIDTH                                  (12)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER                                              (12)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER_WIDTH                                         (2)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED                                           (14)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED_WIDTH                                     (18)
typedef union SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 ingress_vid:SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID_WIDTH;                  //[11: 0]
        jl_uint32 order:SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER_WIDTH;                              //[13:12]
        jl_uint32 reserved:SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED_WIDTH;                        //[31:14]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_ENTRY_SIZE];
} SWCORE_INGRESS_VID_OUTER_VID_RANGE_ASSIGNMENT_ANSWER_t;

#define SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER                                       ((jl_uint32)0x001064ECU)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_NUM                                   ((jl_uint32)0x00000004U)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_ENTRY_SIZE                                                 (1)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID                                         (0)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID_WIDTH                                  (12)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER                                              (12)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER_WIDTH                                         (2)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED                                           (14)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED_WIDTH                                     (18)
typedef union SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 ingress_vid:SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID_WIDTH;                  //[11: 0]
        jl_uint32 order:SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER_WIDTH;                              //[13:12]
        jl_uint32 reserved:SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED_WIDTH;                        //[31:14]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_ENTRY_SIZE];
} SWCORE_INGRESS_VID_INNER_VID_RANGE_ASSIGNMENT_ANSWER_t;

#define SWCORE_VLAN_TABLE                                                                          ((jl_uint32)0x001064FCU)
#define SWCORE_VLAN_TABLE_NUM                                                                      ((jl_uint32)0x00001000U)
#define SWCORE_VLAN_TABLE_ENTRY_SIZE                                                                                    (2)
#define SWCORE_VLAN_TABLE_OFFSET_VLAN_PORT_MASK                                                                         (0)
#define SWCORE_VLAN_TABLE_OFFSET_VLAN_PORT_MASK_WIDTH                                                                  (11)
#define SWCORE_VLAN_TABLE_OFFSET_GID                                                                                   (11)
#define SWCORE_VLAN_TABLE_OFFSET_GID_WIDTH                                                                             (12)
#define SWCORE_VLAN_TABLE_OFFSET_MMP_VALID                                                                             (23)
#define SWCORE_VLAN_TABLE_OFFSET_MMP_VALID_WIDTH                                                                        (1)
#define SWCORE_VLAN_TABLE_OFFSET_MMP_PTR                                                                               (24)
#define SWCORE_VLAN_TABLE_OFFSET_MMP_PTR_WIDTH                                                                          (4)
#define SWCORE_VLAN_TABLE_OFFSET_MMP_ORDER                                                                             (28)
#define SWCORE_VLAN_TABLE_OFFSET_MMP_ORDER_WIDTH                                                                        (2)
#define SWCORE_VLAN_TABLE_OFFSET_MSPT_PTR_0_1                                                                          (30)
#define SWCORE_VLAN_TABLE_OFFSET_MSPT_PTR_0_1_WIDTH                                                                     (2)
#define SWCORE_VLAN_TABLE_OFFSET_MSPT_PTR_2_3                                                                          (32)
#define SWCORE_VLAN_TABLE_OFFSET_MSPT_PTR_2_3_WIDTH                                                                     (2)
#define SWCORE_VLAN_TABLE_OFFSET_VLAN_SINGLE_OP                                                                        (34)
#define SWCORE_VLAN_TABLE_OFFSET_VLAN_SINGLE_OP_WIDTH                                                                   (3)
#define SWCORE_VLAN_TABLE_OFFSET_VID_SEL                                                                               (37)
#define SWCORE_VLAN_TABLE_OFFSET_VID_SEL_WIDTH                                                                          (2)
#define SWCORE_VLAN_TABLE_OFFSET_CFI_DEI_SEL                                                                           (39)
#define SWCORE_VLAN_TABLE_OFFSET_CFI_DEI_SEL_WIDTH                                                                      (2)
#define SWCORE_VLAN_TABLE_OFFSET_PCP_SEL                                                                               (41)
#define SWCORE_VLAN_TABLE_OFFSET_PCP_SEL_WIDTH                                                                          (2)
#define SWCORE_VLAN_TABLE_OFFSET_TYPE_SEL                                                                              (43)
#define SWCORE_VLAN_TABLE_OFFSET_TYPE_SEL_WIDTH                                                                         (2)
#define SWCORE_VLAN_TABLE_OFFSET_VID                                                                                   (45)
#define SWCORE_VLAN_TABLE_OFFSET_VID_WIDTH                                                                             (12)
#define SWCORE_VLAN_TABLE_OFFSET_PCP                                                                                   (57)
#define SWCORE_VLAN_TABLE_OFFSET_PCP_WIDTH                                                                              (3)
#define SWCORE_VLAN_TABLE_OFFSET_CFI_DEI                                                                               (60)
#define SWCORE_VLAN_TABLE_OFFSET_CFI_DEI_WIDTH                                                                          (1)
#define SWCORE_VLAN_TABLE_OFFSET_RESERVED                                                                              (61)
#define SWCORE_VLAN_TABLE_OFFSET_RESERVED_WIDTH                                                                         (3)
typedef union SWCORE_VLAN_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 vlan_port_mask:SWCORE_VLAN_TABLE_OFFSET_VLAN_PORT_MASK_WIDTH;                                               //[10: 0]
        jl_uint64 gid:SWCORE_VLAN_TABLE_OFFSET_GID_WIDTH;                                                                     //[22:11]
        jl_uint64 mmp_valid:SWCORE_VLAN_TABLE_OFFSET_MMP_VALID_WIDTH;                                                         //[23:23]
        jl_uint64 mmp_ptr:SWCORE_VLAN_TABLE_OFFSET_MMP_PTR_WIDTH;                                                             //[27:24]
        jl_uint64 mmp_order:SWCORE_VLAN_TABLE_OFFSET_MMP_ORDER_WIDTH;                                                         //[29:28]
        jl_uint64 mspt_ptr_0_1:SWCORE_VLAN_TABLE_OFFSET_MSPT_PTR_0_1_WIDTH;                                                   //[31:30]
        jl_uint64 mspt_ptr_2_3:SWCORE_VLAN_TABLE_OFFSET_MSPT_PTR_2_3_WIDTH;                                                   //[33:32]
        jl_uint64 vlan_single_op:SWCORE_VLAN_TABLE_OFFSET_VLAN_SINGLE_OP_WIDTH;                                               //[36:34]
        jl_uint64 vid_sel:SWCORE_VLAN_TABLE_OFFSET_VID_SEL_WIDTH;                                                             //[38:37]
        jl_uint64 cfi_dei_sel:SWCORE_VLAN_TABLE_OFFSET_CFI_DEI_SEL_WIDTH;                                                     //[40:39]
        jl_uint64 pcp_sel:SWCORE_VLAN_TABLE_OFFSET_PCP_SEL_WIDTH;                                                             //[42:41]
        jl_uint64 type_sel:SWCORE_VLAN_TABLE_OFFSET_TYPE_SEL_WIDTH;                                                           //[44:43]
        jl_uint64 vid:SWCORE_VLAN_TABLE_OFFSET_VID_WIDTH;                                                                     //[56:45]
        jl_uint64 pcp:SWCORE_VLAN_TABLE_OFFSET_PCP_WIDTH;                                                                     //[59:57]
        jl_uint64 cfi_dei:SWCORE_VLAN_TABLE_OFFSET_CFI_DEI_WIDTH;                                                             //[60:60]
        jl_uint64 reserved:SWCORE_VLAN_TABLE_OFFSET_RESERVED_WIDTH;                                                           //[63:61]
    } BF;
    jl_uint32 val[SWCORE_VLAN_TABLE_ENTRY_SIZE];
} SWCORE_VLAN_TABLE_t;

#define SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE                                                ((jl_uint32)0x0010E4FCU)
#define SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE_NUM                                            ((jl_uint32)0x00000010U)
#define SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE_ENTRY_SIZE                                                          (1)
#define SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_PORT_SPT_STATE                                               (0)
#define SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_PORT_SPT_STATE_WIDTH                                        (22)
#define SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_RESERVED                                                    (22)
#define SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_RESERVED_WIDTH                                              (10)
typedef union SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 port_spt_state:SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_PORT_SPT_STATE_WIDTH;                     //[21: 0]
        jl_uint32 reserved:SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_RESERVED_WIDTH;                                 //[31:22]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE_ENTRY_SIZE];
} SWCORE_INGRESS_MULTIPLE_SPANNING_TREE_STATE_t;

#define SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE                                             ((jl_uint32)0x0010E53CU)
#define SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE_NUM                                         ((jl_uint32)0x00000010U)
#define SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE_ENTRY_SIZE                                                       (1)
#define SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE_OFFSET_COLOR                                                     (0)
#define SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE_OFFSET_COLOR_WIDTH                                               (2)
#define SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE_OFFSET_RESERVED                                                  (2)
#define SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE_OFFSET_RESERVED_WIDTH                                           (30)
typedef union SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 color:SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE_OFFSET_COLOR_WIDTH;                                    //[ 1: 0]
        jl_uint32 reserved:SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE_OFFSET_RESERVED_WIDTH;                              //[31: 2]
    } BF;
    jl_uint32 val[SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE_ENTRY_SIZE];
} SWCORE_VLAN_PCP_AND_DEI_TO_COLOR_MAPPING_TABLE_t;

#define SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE                                          ((jl_uint32)0x0010E57CU)
#define SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_NUM                                      ((jl_uint32)0x00000100U)
#define SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_ENTRY_SIZE                                                    (1)
#define SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_COLOR                                                  (0)
#define SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_COLOR_WIDTH                                            (2)
#define SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_RESERVED                                               (2)
#define SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_RESERVED_WIDTH                                        (30)
typedef union SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 color:SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_COLOR_WIDTH;                                 //[ 1: 0]
        jl_uint32 reserved:SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_RESERVED_WIDTH;                           //[31: 2]
    } BF;
    jl_uint32 val[SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_ENTRY_SIZE];
} SWCORE_IP_TOS_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_t;

#define SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE                                        ((jl_uint32)0x0010E97CU)
#define SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_NUM                                    ((jl_uint32)0x00000008U)
#define SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_ENTRY_SIZE                                                  (1)
#define SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_COLOR                                                (0)
#define SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_COLOR_WIDTH                                          (2)
#define SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_RESERVED                                             (2)
#define SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_RESERVED_WIDTH                                      (30)
typedef union SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 color:SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_COLOR_WIDTH;                               //[ 1: 0]
        jl_uint32 reserved:SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_OFFSET_RESERVED_WIDTH;                         //[31: 2]
    } BF;
    jl_uint32 val[SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_ENTRY_SIZE];
} SWCORE_MPLS_EXP_FIELD_TO_PACKET_COLOR_MAPPING_TABLE_t;

#define SWCORE_L2_AGING_TABLE                                                                      ((jl_uint32)0x0010E99CU)
#define SWCORE_L2_AGING_TABLE_NUM                                                                  ((jl_uint32)0x00001000U)
#define SWCORE_L2_AGING_TABLE_ENTRY_SIZE                                                                                (1)
#define SWCORE_L2_AGING_TABLE_OFFSET_VALID                                                                              (0)
#define SWCORE_L2_AGING_TABLE_OFFSET_VALID_WIDTH                                                                        (1)
#define SWCORE_L2_AGING_TABLE_OFFSET_STAT                                                                               (1)
#define SWCORE_L2_AGING_TABLE_OFFSET_STAT_WIDTH                                                                         (1)
#define SWCORE_L2_AGING_TABLE_OFFSET_HIT                                                                                (2)
#define SWCORE_L2_AGING_TABLE_OFFSET_HIT_WIDTH                                                                          (1)
#define SWCORE_L2_AGING_TABLE_OFFSET_RESERVED                                                                           (3)
#define SWCORE_L2_AGING_TABLE_OFFSET_RESERVED_WIDTH                                                                    (29)
typedef union SWCORE_L2_AGING_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 valid:SWCORE_L2_AGING_TABLE_OFFSET_VALID_WIDTH;                                                             //[ 0: 0]
        jl_uint32 stat:SWCORE_L2_AGING_TABLE_OFFSET_STAT_WIDTH;                                                               //[ 1: 1]
        jl_uint32 hit:SWCORE_L2_AGING_TABLE_OFFSET_HIT_WIDTH;                                                                 //[ 2: 2]
        jl_uint32 reserved:SWCORE_L2_AGING_TABLE_OFFSET_RESERVED_WIDTH;                                                       //[31: 3]
    } BF;
    jl_uint32 val[SWCORE_L2_AGING_TABLE_ENTRY_SIZE];
} SWCORE_L2_AGING_TABLE_t;

#define SWCORE_L2_DA_HASH_LOOKUP_TABLE                                                             ((jl_uint32)0x0011299CU)
#define SWCORE_L2_DA_HASH_LOOKUP_TABLE_NUM                                                         ((jl_uint32)0x00001000U)
#define SWCORE_L2_DA_HASH_LOOKUP_TABLE_ENTRY_SIZE                                                                       (2)
#define SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_MAC_ADDR_0_31                                                             (0)
#define SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_MAC_ADDR_0_31_WIDTH                                                      (32)
#define SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_MAC_ADDR_32_47                                                           (32)
#define SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_MAC_ADDR_32_47_WIDTH                                                     (16)
#define SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_GID                                                                      (48)
#define SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_GID_WIDTH                                                                (12)
#define SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_RESERVED                                                                 (60)
#define SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_RESERVED_WIDTH                                                            (4)
typedef union SWCORE_L2_DA_HASH_LOOKUP_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 mac_addr_0_31:SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_MAC_ADDR_0_31_WIDTH;                                    //[31: 0]
        jl_uint64 mac_addr_32_47:SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_MAC_ADDR_32_47_WIDTH;                                  //[47:32]
        jl_uint64 gid:SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_GID_WIDTH;                                                        //[59:48]
        jl_uint64 reserved:SWCORE_L2_DA_HASH_LOOKUP_TABLE_OFFSET_RESERVED_WIDTH;                                              //[63:60]
    } BF;
    jl_uint32 val[SWCORE_L2_DA_HASH_LOOKUP_TABLE_ENTRY_SIZE];
} SWCORE_L2_DA_HASH_LOOKUP_TABLE_t;

#define SWCORE_L2_DESTINATION_TABLE                                                                ((jl_uint32)0x0011A99CU)
#define SWCORE_L2_DESTINATION_TABLE_NUM                                                            ((jl_uint32)0x00001010U)
#define SWCORE_L2_DESTINATION_TABLE_ENTRY_SIZE                                                                          (1)
#define SWCORE_L2_DESTINATION_TABLE_OFFSET_UC                                                                           (0)
#define SWCORE_L2_DESTINATION_TABLE_OFFSET_UC_WIDTH                                                                     (1)
#define SWCORE_L2_DESTINATION_TABLE_OFFSET_DEST_PORT_OR_MC_ADDR                                                         (1)
#define SWCORE_L2_DESTINATION_TABLE_OFFSET_DEST_PORT_OR_MC_ADDR_WIDTH                                                   (6)
#define SWCORE_L2_DESTINATION_TABLE_OFFSET_PKT_DROP                                                                     (7)
#define SWCORE_L2_DESTINATION_TABLE_OFFSET_PKT_DROP_WIDTH                                                               (1)
#define SWCORE_L2_DESTINATION_TABLE_OFFSET_RESERVED                                                                     (8)
#define SWCORE_L2_DESTINATION_TABLE_OFFSET_RESERVED_WIDTH                                                              (24)
typedef union SWCORE_L2_DESTINATION_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 uc:SWCORE_L2_DESTINATION_TABLE_OFFSET_UC_WIDTH;                                                             //[ 0: 0]
        jl_uint32 dest_port_or_mc_addr:SWCORE_L2_DESTINATION_TABLE_OFFSET_DEST_PORT_OR_MC_ADDR_WIDTH;                         //[ 6: 1]
        jl_uint32 pkt_drop:SWCORE_L2_DESTINATION_TABLE_OFFSET_PKT_DROP_WIDTH;                                                 //[ 7: 7]
        jl_uint32 reserved:SWCORE_L2_DESTINATION_TABLE_OFFSET_RESERVED_WIDTH;                                                 //[31: 8]
    } BF;
    jl_uint32 val[SWCORE_L2_DESTINATION_TABLE_ENTRY_SIZE];
} SWCORE_L2_DESTINATION_TABLE_t;

#define SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE                                                 ((jl_uint32)0x0011E9DCU)
#define SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE_NUM                                             ((jl_uint32)0x00000010U)
#define SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE_ENTRY_SIZE                                                           (1)
#define SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_PORT_SPT_STATE                                                (0)
#define SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_PORT_SPT_STATE_WIDTH                                         (22)
#define SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_RESERVED                                                     (22)
#define SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_RESERVED_WIDTH                                               (10)
typedef union SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 port_spt_state:SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_PORT_SPT_STATE_WIDTH;                      //[21: 0]
        jl_uint32 reserved:SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE_OFFSET_RESERVED_WIDTH;                                  //[31:22]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE_ENTRY_SIZE];
} SWCORE_EGRESS_MULTIPLE_SPANNING_TREE_STATE_t;

#define SWCORE_LINK_AGGREGATION_MEMBERSHIP                                                         ((jl_uint32)0x0011EA1CU)
#define SWCORE_LINK_AGGREGATION_MEMBERSHIP_NUM                                                     ((jl_uint32)0x0000000BU)
#define SWCORE_LINK_AGGREGATION_MEMBERSHIP_ENTRY_SIZE                                                                   (1)
#define SWCORE_LINK_AGGREGATION_MEMBERSHIP_OFFSET_LA                                                                    (0)
#define SWCORE_LINK_AGGREGATION_MEMBERSHIP_OFFSET_LA_WIDTH                                                              (4)
#define SWCORE_LINK_AGGREGATION_MEMBERSHIP_OFFSET_RESERVED                                                              (4)
#define SWCORE_LINK_AGGREGATION_MEMBERSHIP_OFFSET_RESERVED_WIDTH                                                       (28)
typedef union SWCORE_LINK_AGGREGATION_MEMBERSHIP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 la:SWCORE_LINK_AGGREGATION_MEMBERSHIP_OFFSET_LA_WIDTH;                                                      //[ 3: 0]
        jl_uint32 reserved:SWCORE_LINK_AGGREGATION_MEMBERSHIP_OFFSET_RESERVED_WIDTH;                                          //[31: 4]
    } BF;
    jl_uint32 val[SWCORE_LINK_AGGREGATION_MEMBERSHIP_ENTRY_SIZE];
} SWCORE_LINK_AGGREGATION_MEMBERSHIP_t;

#define SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES                                                  ((jl_uint32)0x0011EA48U)
#define SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_NUM                                              ((jl_uint32)0x0000000BU)
#define SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_ENTRY_SIZE                                                            (1)
#define SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_OFFSET_Q_ON                                                           (0)
#define SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_OFFSET_Q_ON_WIDTH                                                     (8)
#define SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_OFFSET_RESERVED                                                       (8)
#define SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_OFFSET_RESERVED_WIDTH                                                (24)
typedef union SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_u {
    struct __attribute__ ((packed)) {
        jl_uint32 q_on:SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_OFFSET_Q_ON_WIDTH;                                           //[ 7: 0]
        jl_uint32 reserved:SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_OFFSET_RESERVED_WIDTH;                                   //[31: 8]
    } BF;
    jl_uint32 val[SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_ENTRY_SIZE];
} SWCORE_ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_t;

#define SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS                                          ((jl_uint32)0x0011EA74U)
#define SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS_NUM                                      ((jl_uint32)0x0000000BU)
#define SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS_ENTRY_SIZE                                                    (1)
#define SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS_OFFSET_MEMBERS                                                (0)
#define SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS_OFFSET_MEMBERS_WIDTH                                         (11)
#define SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS_OFFSET_RESERVED                                              (11)
#define SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS_OFFSET_RESERVED_WIDTH                                        (21)
typedef union SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 members:SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS_OFFSET_MEMBERS_WIDTH;                             //[10: 0]
        jl_uint32 reserved:SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS_OFFSET_RESERVED_WIDTH;                           //[31:11]
    } BF;
    jl_uint32 val[SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS_ENTRY_SIZE];
} SWCORE_LINK_AGGREGATION_TO_PHYSICAL_PORTS_MEMBERS_t;

#define SWCORE_LINK_AGGREGATE_WEIGHT                                                               ((jl_uint32)0x0011EAA0U)
#define SWCORE_LINK_AGGREGATE_WEIGHT_NUM                                                           ((jl_uint32)0x00000100U)
#define SWCORE_LINK_AGGREGATE_WEIGHT_ENTRY_SIZE                                                                         (1)
#define SWCORE_LINK_AGGREGATE_WEIGHT_OFFSET_PORTS                                                                       (0)
#define SWCORE_LINK_AGGREGATE_WEIGHT_OFFSET_PORTS_WIDTH                                                                (11)
#define SWCORE_LINK_AGGREGATE_WEIGHT_OFFSET_RESERVED                                                                   (11)
#define SWCORE_LINK_AGGREGATE_WEIGHT_OFFSET_RESERVED_WIDTH                                                             (21)
typedef union SWCORE_LINK_AGGREGATE_WEIGHT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 ports:SWCORE_LINK_AGGREGATE_WEIGHT_OFFSET_PORTS_WIDTH;                                                      //[10: 0]
        jl_uint32 reserved:SWCORE_LINK_AGGREGATE_WEIGHT_OFFSET_RESERVED_WIDTH;                                                //[31:11]
    } BF;
    jl_uint32 val[SWCORE_LINK_AGGREGATE_WEIGHT_ENTRY_SIZE];
} SWCORE_LINK_AGGREGATE_WEIGHT_t;

#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER                                              ((jl_uint32)0x0011EEA0U)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_NUM                                          ((jl_uint32)0x0000000BU)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_ENTRY_SIZE                                                        (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CTAGGED_VLANS                                         (0)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CTAGGED_VLANS_WIDTH                                   (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_STAGGED_VLANS                                         (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_STAGGED_VLANS_WIDTH                                   (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_MORE_THAN_ONE_VLANS                                        (2)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_MORE_THAN_ONE_VLANS_WIDTH                                  (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SINGLE_TAGGED_VLANS                                   (3)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SINGLE_TAGGED_VLANS_WIDTH                             (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_UNTAGGED_VLANS                                        (4)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_UNTAGGED_VLANS_WIDTH                                  (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_PACKETS                                          (5)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_PACKETS_WIDTH                                    (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_PACKETS                                          (6)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_PACKETS_WIDTH                                    (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_MPLSPACKETS                                           (7)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_MPLSPACKETS_WIDTH                                     (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_MULTICAST_PACKETS                                (8)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_MULTICAST_PACKETS_WIDTH                          (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_MULTICAST_PACKETS                                (9)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_MULTICAST_PACKETS_WIDTH                          (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_BROADCAST_FRAMES                                  (10)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_BROADCAST_FRAMES_WIDTH                             (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_FLOODING_FRAMES                                   (11)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_FLOODING_FRAMES_WIDTH                              (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_MULTICAST_FRAMES                                  (12)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_MULTICAST_FRAMES_WIDTH                             (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_DUAL_TAGGED_VLANS                                    (13)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_DUAL_TAGGED_VLANS_WIDTH                               (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CSTAGGED_VLANS                                       (14)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CSTAGGED_VLANS_WIDTH                                  (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SCTAGGED_VLANS                                       (15)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SCTAGGED_VLANS_WIDTH                                  (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CCTAGGED_VLANS                                       (16)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CCTAGGED_VLANS_WIDTH                                  (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SSTAGGED_VLANS                                       (17)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SSTAGGED_VLANS_WIDTH                                  (1)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_SRC_PORT_FILTER                                           (18)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_SRC_PORT_FILTER_WIDTH                                     (11)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_RESERVED                                                  (29)
#define SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_RESERVED_WIDTH                                             (3)
typedef union SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 drop_ctagged_vlans:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CTAGGED_VLANS_WIDTH;           //[ 0: 0]
        jl_uint32 drop_stagged_vlans:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_STAGGED_VLANS_WIDTH;           //[ 1: 1]
        jl_uint32 more_than_one_vlans:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_MORE_THAN_ONE_VLANS_WIDTH;         //[ 2: 2]
        jl_uint32 drop_single_tagged_vlans:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SINGLE_TAGGED_VLANS_WIDTH;  //[ 3: 3]
        jl_uint32 drop_untagged_vlans:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_UNTAGGED_VLANS_WIDTH;         //[ 4: 4]
        jl_uint32 drop_ipv4_packets:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_PACKETS_WIDTH;             //[ 5: 5]
        jl_uint32 drop_ipv6_packets:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_PACKETS_WIDTH;             //[ 6: 6]
        jl_uint32 drop_mplspackets:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_MPLSPACKETS_WIDTH;               //[ 7: 7]
        jl_uint32 drop_ipv4_multicast_packets:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_MULTICAST_PACKETS_WIDTH;  //[ 8: 8]
        jl_uint32 drop_ipv6_multicast_packets:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_MULTICAST_PACKETS_WIDTH;  //[ 9: 9]
        jl_uint32 drop_l2_broadcast_frames:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_BROADCAST_FRAMES_WIDTH;  //[10:10]
        jl_uint32 drop_l2_flooding_frames:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_FLOODING_FRAMES_WIDTH;  //[11:11]
        jl_uint32 drop_l2_multicast_frames:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_MULTICAST_FRAMES_WIDTH;  //[12:12]
        jl_uint32 drop_dual_tagged_vlans:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_DUAL_TAGGED_VLANS_WIDTH;   //[13:13]
        jl_uint32 drop_cstagged_vlans:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CSTAGGED_VLANS_WIDTH;         //[14:14]
        jl_uint32 drop_sctagged_vlans:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SCTAGGED_VLANS_WIDTH;         //[15:15]
        jl_uint32 drop_cctagged_vlans:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CCTAGGED_VLANS_WIDTH;         //[16:16]
        jl_uint32 drop_sstagged_vlans:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SSTAGGED_VLANS_WIDTH;         //[17:17]
        jl_uint32 src_port_filter:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_SRC_PORT_FILTER_WIDTH;                 //[28:18]
        jl_uint32 reserved:SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_RESERVED_WIDTH;                               //[31:29]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_ENTRY_SIZE];
} SWCORE_INGRESS_EGRESS_PORT_PACKET_TYPE_FILTER_t;

#define SWCORE_HAIRPIN_ENABLE                                                                      ((jl_uint32)0x0011EECCU)
#define SWCORE_HAIRPIN_ENABLE_NUM                                                                  ((jl_uint32)0x0000000BU)
#define SWCORE_HAIRPIN_ENABLE_ENTRY_SIZE                                                                                (1)
#define SWCORE_HAIRPIN_ENABLE_OFFSET_ALLOW_FLOOD                                                                        (0)
#define SWCORE_HAIRPIN_ENABLE_OFFSET_ALLOW_FLOOD_WIDTH                                                                  (1)
#define SWCORE_HAIRPIN_ENABLE_OFFSET_ALLOW_MC                                                                           (1)
#define SWCORE_HAIRPIN_ENABLE_OFFSET_ALLOW_MC_WIDTH                                                                     (1)
#define SWCORE_HAIRPIN_ENABLE_OFFSET_ALLOW_UC                                                                           (2)
#define SWCORE_HAIRPIN_ENABLE_OFFSET_ALLOW_UC_WIDTH                                                                     (1)
#define SWCORE_HAIRPIN_ENABLE_OFFSET_RESERVED                                                                           (3)
#define SWCORE_HAIRPIN_ENABLE_OFFSET_RESERVED_WIDTH                                                                    (29)
typedef union SWCORE_HAIRPIN_ENABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 allow_flood:SWCORE_HAIRPIN_ENABLE_OFFSET_ALLOW_FLOOD_WIDTH;                                                 //[ 0: 0]
        jl_uint32 allow_mc:SWCORE_HAIRPIN_ENABLE_OFFSET_ALLOW_MC_WIDTH;                                                       //[ 1: 1]
        jl_uint32 allow_uc:SWCORE_HAIRPIN_ENABLE_OFFSET_ALLOW_UC_WIDTH;                                                       //[ 2: 2]
        jl_uint32 reserved:SWCORE_HAIRPIN_ENABLE_OFFSET_RESERVED_WIDTH;                                                       //[31: 3]
    } BF;
    jl_uint32 val[SWCORE_HAIRPIN_ENABLE_ENTRY_SIZE];
} SWCORE_HAIRPIN_ENABLE_t;

#define SWCORE_L2_MULTICAST_TABLE                                                                  ((jl_uint32)0x0011EEF8U)
#define SWCORE_L2_MULTICAST_TABLE_NUM                                                              ((jl_uint32)0x00000040U)
#define SWCORE_L2_MULTICAST_TABLE_ENTRY_SIZE                                                                            (1)
#define SWCORE_L2_MULTICAST_TABLE_OFFSET_MC_PORT_MASK                                                                   (0)
#define SWCORE_L2_MULTICAST_TABLE_OFFSET_MC_PORT_MASK_WIDTH                                                            (11)
#define SWCORE_L2_MULTICAST_TABLE_OFFSET_RESERVED                                                                      (11)
#define SWCORE_L2_MULTICAST_TABLE_OFFSET_RESERVED_WIDTH                                                                (21)
typedef union SWCORE_L2_MULTICAST_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 mc_port_mask:SWCORE_L2_MULTICAST_TABLE_OFFSET_MC_PORT_MASK_WIDTH;                                           //[10: 0]
        jl_uint32 reserved:SWCORE_L2_MULTICAST_TABLE_OFFSET_RESERVED_WIDTH;                                                   //[31:11]
    } BF;
    jl_uint32 val[SWCORE_L2_MULTICAST_TABLE_ENTRY_SIZE];
} SWCORE_L2_MULTICAST_TABLE_t;

#define SWCORE_L2_AGING_COLLISION_TABLE                                                            ((jl_uint32)0x0011EFF8U)
#define SWCORE_L2_AGING_COLLISION_TABLE_NUM                                                        ((jl_uint32)0x00000010U)
#define SWCORE_L2_AGING_COLLISION_TABLE_ENTRY_SIZE                                                                      (1)
#define SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_VALID                                                                    (0)
#define SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_VALID_WIDTH                                                              (1)
#define SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_STAT                                                                     (1)
#define SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_STAT_WIDTH                                                               (1)
#define SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_HIT                                                                      (2)
#define SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_HIT_WIDTH                                                                (1)
#define SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_RESERVED                                                                 (3)
#define SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_RESERVED_WIDTH                                                          (29)
typedef union SWCORE_L2_AGING_COLLISION_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 valid:SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_VALID_WIDTH;                                                   //[ 0: 0]
        jl_uint32 stat:SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_STAT_WIDTH;                                                     //[ 1: 1]
        jl_uint32 hit:SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_HIT_WIDTH;                                                       //[ 2: 2]
        jl_uint32 reserved:SWCORE_L2_AGING_COLLISION_TABLE_OFFSET_RESERVED_WIDTH;                                             //[31: 3]
    } BF;
    jl_uint32 val[SWCORE_L2_AGING_COLLISION_TABLE_ENTRY_SIZE];
} SWCORE_L2_AGING_COLLISION_TABLE_t;

#define SWCORE_VID_TO_QUEUE_ASSIGNMENT                                                             ((jl_uint32)0x0011F038U)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_NUM                                                         ((jl_uint32)0x0000002CU)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE                                                                       (1)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_VID                                                                       (0)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_VID_WIDTH                                                                (12)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_MASK                                                                     (12)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_WIDTH                                                               (12)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_INNER_OUTER                                                              (24)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_INNER_OUTER_WIDTH                                                         (1)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_CSTAG                                                                    (25)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_CSTAG_WIDTH                                                               (1)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE                                                                    (26)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH                                                               (1)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE                                                                    (27)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH                                                               (3)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED                                                                 (30)
#define SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH                                                            (2)
typedef union SWCORE_VID_TO_QUEUE_ASSIGNMENT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 vid:SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_VID_WIDTH;                                                        //[11: 0]
        jl_uint32 mask:SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_WIDTH;                                                      //[23:12]
        jl_uint32 inner_outer:SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_INNER_OUTER_WIDTH;                                        //[24:24]
        jl_uint32 cstag:SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_CSTAG_WIDTH;                                                    //[25:25]
        jl_uint32 force:SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH;                                                    //[26:26]
        jl_uint32 queue:SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH;                                                    //[29:27]
        jl_uint32 reserved:SWCORE_VID_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH;                                              //[31:30]
    } BF;
    jl_uint32 val[SWCORE_VID_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE];
} SWCORE_VID_TO_QUEUE_ASSIGNMENT_t;

#define SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT                                                     ((jl_uint32)0x0011F0E8U)
#define SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_NUM                                                 ((jl_uint32)0x0000002CU)
#define SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE                                                               (1)
#define SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_PROTO                                                             (0)
#define SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_PROTO_WIDTH                                                       (8)
#define SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE                                                             (8)
#define SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH                                                       (1)
#define SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE                                                             (9)
#define SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH                                                       (3)
#define SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED                                                         (12)
#define SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH                                                   (20)
typedef union SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 proto:SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_PROTO_WIDTH;                                            //[ 7: 0]
        jl_uint32 force:SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH;                                            //[ 8: 8]
        jl_uint32 queue:SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH;                                            //[11: 9]
        jl_uint32 reserved:SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH;                                      //[31:12]
    } BF;
    jl_uint32 val[SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE];
} SWCORE_L4_PROTOCOL_TO_QUEUE_ASSIGNMENT_t;

#define SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT                                                   ((jl_uint32)0x0011F198U)
#define SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_NUM                                               ((jl_uint32)0x0000002CU)
#define SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE                                                             (1)
#define SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_ETH_TYPE                                                        (0)
#define SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_ETH_TYPE_WIDTH                                                 (16)
#define SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE                                                          (16)
#define SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH                                                     (1)
#define SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE                                                          (17)
#define SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH                                                     (3)
#define SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED                                                       (20)
#define SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH                                                 (12)
typedef union SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 eth_type:SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_ETH_TYPE_WIDTH;                                    //[15: 0]
        jl_uint32 force:SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH;                                          //[16:16]
        jl_uint32 queue:SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH;                                          //[19:17]
        jl_uint32 reserved:SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH;                                    //[31:20]
    } BF;
    jl_uint32 val[SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE];
} SWCORE_ETHERNET_TYPE_TO_QUEUE_ASSIGNMENT_t;

#define SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION                                                     ((jl_uint32)0x0011F248U)
#define SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION_NUM                                                 ((jl_uint32)0x0000000BU)
#define SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION_ENTRY_SIZE                                                               (1)
#define SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION_OFFSET_PRIO_FROM_L3                                                      (0)
#define SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION_OFFSET_PRIO_FROM_L3_WIDTH                                                (1)
#define SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION_OFFSET_RESERVED                                                          (1)
#define SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION_OFFSET_RESERVED_WIDTH                                                   (31)
typedef union SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 prio_from_l3:SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION_OFFSET_PRIO_FROM_L3_WIDTH;                              //[ 0: 0]
        jl_uint32 reserved:SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION_OFFSET_RESERVED_WIDTH;                                      //[31: 1]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION_ENTRY_SIZE];
} SWCORE_EGRESS_QUEUE_PRIORITY_SELECTION_t;

#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE                                    ((jl_uint32)0x0011F274U)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_NUM                                ((jl_uint32)0x0000000BU)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_ENTRY_SIZE                                              (1)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_FORCE_QUEUE                                      (0)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_FORCE_QUEUE_WIDTH                                (1)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_E_QUEUE                                          (1)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_E_QUEUE_WIDTH                                    (3)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_RESERVED                                         (4)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_RESERVED_WIDTH                                  (28)
typedef union SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 force_queue:SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_FORCE_QUEUE_WIDTH;               //[ 0: 0]
        jl_uint32 e_queue:SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_E_QUEUE_WIDTH;                       //[ 3: 1]
        jl_uint32 reserved:SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_RESERVED_WIDTH;                     //[31: 4]
    } BF;
    jl_uint32 val[SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_ENTRY_SIZE];
} SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_t;

#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE                                      ((jl_uint32)0x0011F2A0U)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_NUM                                  ((jl_uint32)0x0000000BU)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_ENTRY_SIZE                                                (1)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_FORCE_QUEUE                                        (0)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_FORCE_QUEUE_WIDTH                                  (1)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_E_QUEUE                                            (1)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_E_QUEUE_WIDTH                                      (3)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_RESERVED                                           (4)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_RESERVED_WIDTH                                    (28)
typedef union SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 force_queue:SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_FORCE_QUEUE_WIDTH;                 //[ 0: 0]
        jl_uint32 e_queue:SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_E_QUEUE_WIDTH;                         //[ 3: 1]
        jl_uint32 reserved:SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET_RESERVED_WIDTH;                       //[31: 4]
    } BF;
    jl_uint32 val[SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_ENTRY_SIZE];
} SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_t;

#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER                                   ((jl_uint32)0x0011F2CCU)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_NUM                               ((jl_uint32)0x00000004U)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_ENTRY_SIZE                                             (1)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID                                     (0)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID_WIDTH                              (12)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER                                          (12)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER_WIDTH                                     (2)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED                                       (14)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED_WIDTH                                 (18)
typedef union SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 ingress_vid:SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_OFFSET_INGRESS_VID_WIDTH;              //[11: 0]
        jl_uint32 order:SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_OFFSET_ORDER_WIDTH;                          //[13:12]
        jl_uint32 reserved:SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_OFFSET_RESERVED_WIDTH;                    //[31:14]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_ENTRY_SIZE];
} SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_ASSIGNMENT_ANSWER_t;

#define SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP                                                ((jl_uint32)0x0011F2DCU)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_NUM                                            ((jl_uint32)0x0000001EU)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_ENTRY_SIZE                                                          (1)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_FIELD_SELECT                                                 (0)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_FIELD_SELECT_WIDTH                                           (6)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_BITS_SELECTED                                                (6)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_BITS_SELECTED_WIDTH                                          (8)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_L_SHIFT                                                     (14)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_L_SHIFT_WIDTH                                                (8)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_RESERVED                                                    (22)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_RESERVED_WIDTH                                              (10)
typedef union SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 field_select:SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_FIELD_SELECT_WIDTH;                         //[ 5: 0]
        jl_uint32 bits_selected:SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_BITS_SELECTED_WIDTH;                       //[13: 6]
        jl_uint32 l_shift:SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_L_SHIFT_WIDTH;                                   //[21:14]
        jl_uint32 reserved:SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_OFFSET_RESERVED_WIDTH;                                 //[31:22]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_ENTRY_SIZE];
} SWCORE_INGRESS_CONFIGURABLE_ACL_RULES_SETUP_t;

#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER                                                     ((jl_uint32)0x0011F354U)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_NUM                                                 ((jl_uint32)0x0000000BU)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_ENTRY_SIZE                                                               (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CTAGGED_VLANS                                                (0)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CTAGGED_VLANS_WIDTH                                          (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_STAGGED_VLANS                                                (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_STAGGED_VLANS_WIDTH                                          (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_MORE_THAN_ONE_VLANS                                               (2)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_MORE_THAN_ONE_VLANS_WIDTH                                         (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_UNTAGGED_VLANS                                               (3)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_UNTAGGED_VLANS_WIDTH                                         (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SINGLE_TAGGED_VLANS                                          (4)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SINGLE_TAGGED_VLANS_WIDTH                                    (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_MAC_DA_EQ_SA                                                 (5)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_MAC_DA_EQ_SA_WIDTH                                           (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_DA_EQ_SA                                                (6)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_DA_EQ_SA_WIDTH                                          (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_DA_EQ_SA                                                (7)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_DA_EQ_SA_WIDTH                                          (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_PACKETS                                                 (8)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_PACKETS_WIDTH                                           (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_PACKETS                                                 (9)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_PACKETS_WIDTH                                           (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_MPLSPACKETS                                                 (10)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_MPLSPACKETS_WIDTH                                            (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_MULTICAST_PACKETS                                      (11)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_MULTICAST_PACKETS_WIDTH                                 (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_MULTICAST_PACKETS                                      (12)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_MULTICAST_PACKETS_WIDTH                                 (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_BROADCAST_FRAMES                                         (13)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_BROADCAST_FRAMES_WIDTH                                    (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_MULTICAST_FRAMES                                         (14)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_MULTICAST_FRAMES_WIDTH                                    (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_DUAL_TAGGED_VLANS                                           (15)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_DUAL_TAGGED_VLANS_WIDTH                                      (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CSTAGGED_VLANS                                              (16)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CSTAGGED_VLANS_WIDTH                                         (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SCTAGGED_VLANS                                              (17)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SCTAGGED_VLANS_WIDTH                                         (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CCTAGGED_VLANS                                              (18)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CCTAGGED_VLANS_WIDTH                                         (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SSTAGGED_VLANS                                              (19)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SSTAGGED_VLANS_WIDTH                                         (1)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_RESERVED                                                         (20)
#define SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_RESERVED_WIDTH                                                   (12)
typedef union SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 drop_ctagged_vlans:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CTAGGED_VLANS_WIDTH;                  //[ 0: 0]
        jl_uint32 drop_stagged_vlans:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_STAGGED_VLANS_WIDTH;                  //[ 1: 1]
        jl_uint32 more_than_one_vlans:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_MORE_THAN_ONE_VLANS_WIDTH;                //[ 2: 2]
        jl_uint32 drop_untagged_vlans:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_UNTAGGED_VLANS_WIDTH;                //[ 3: 3]
        jl_uint32 drop_single_tagged_vlans:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SINGLE_TAGGED_VLANS_WIDTH;      //[ 4: 4]
        jl_uint32 drop_mac_da_eq_sa:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_MAC_DA_EQ_SA_WIDTH;                    //[ 5: 5]
        jl_uint32 drop_ipv4_da_eq_sa:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_DA_EQ_SA_WIDTH;                  //[ 6: 6]
        jl_uint32 drop_ipv6_da_eq_sa:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_DA_EQ_SA_WIDTH;                  //[ 7: 7]
        jl_uint32 drop_ipv4_packets:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_PACKETS_WIDTH;                    //[ 8: 8]
        jl_uint32 drop_ipv6_packets:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_PACKETS_WIDTH;                    //[ 9: 9]
        jl_uint32 drop_mplspackets:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_MPLSPACKETS_WIDTH;                      //[10:10]
        jl_uint32 drop_ipv4_multicast_packets:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV4_MULTICAST_PACKETS_WIDTH;  //[11:11]
        jl_uint32 drop_ipv6_multicast_packets:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_IPV6_MULTICAST_PACKETS_WIDTH;  //[12:12]
        jl_uint32 drop_l2_broadcast_frames:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_BROADCAST_FRAMES_WIDTH;      //[13:13]
        jl_uint32 drop_l2_multicast_frames:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_L2_MULTICAST_FRAMES_WIDTH;      //[14:14]
        jl_uint32 drop_dual_tagged_vlans:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_DUAL_TAGGED_VLANS_WIDTH;          //[15:15]
        jl_uint32 drop_cstagged_vlans:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CSTAGGED_VLANS_WIDTH;                //[16:16]
        jl_uint32 drop_sctagged_vlans:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SCTAGGED_VLANS_WIDTH;                //[17:17]
        jl_uint32 drop_cctagged_vlans:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_CCTAGGED_VLANS_WIDTH;                //[18:18]
        jl_uint32 drop_sstagged_vlans:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_DROP_SSTAGGED_VLANS_WIDTH;                //[19:19]
        jl_uint32 reserved:SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_OFFSET_RESERVED_WIDTH;                                      //[31:20]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_ENTRY_SIZE];
} SWCORE_INGRESS_PORT_PACKET_TYPE_FILTER_t;

#define SWCORE_SMON_SET_SEARCH                                                                     ((jl_uint32)0x0011F380U)
#define SWCORE_SMON_SET_SEARCH_NUM                                                                 ((jl_uint32)0x00000002U)
#define SWCORE_SMON_SET_SEARCH_ENTRY_SIZE                                                                               (1)
#define SWCORE_SMON_SET_SEARCH_OFFSET_SRC_PORT                                                                          (0)
#define SWCORE_SMON_SET_SEARCH_OFFSET_SRC_PORT_WIDTH                                                                    (4)
#define SWCORE_SMON_SET_SEARCH_OFFSET_VID                                                                               (4)
#define SWCORE_SMON_SET_SEARCH_OFFSET_VID_WIDTH                                                                        (12)
#define SWCORE_SMON_SET_SEARCH_OFFSET_RESERVED                                                                         (16)
#define SWCORE_SMON_SET_SEARCH_OFFSET_RESERVED_WIDTH                                                                   (16)
typedef union SWCORE_SMON_SET_SEARCH_u {
    struct __attribute__ ((packed)) {
        jl_uint32 src_port:SWCORE_SMON_SET_SEARCH_OFFSET_SRC_PORT_WIDTH;                                                      //[ 3: 0]
        jl_uint32 vid:SWCORE_SMON_SET_SEARCH_OFFSET_VID_WIDTH;                                                                //[15: 4]
        jl_uint32 reserved:SWCORE_SMON_SET_SEARCH_OFFSET_RESERVED_WIDTH;                                                      //[31:16]
    } BF;
    jl_uint32 val[SWCORE_SMON_SET_SEARCH_ENTRY_SIZE];
} SWCORE_SMON_SET_SEARCH_t;

#define SWCORE_LINK_AGGREGATION_CTRL                                                               ((jl_uint32)0x0011F388U)
#define SWCORE_LINK_AGGREGATION_CTRL_NUM                                                           ((jl_uint32)0x00000001U)
#define SWCORE_LINK_AGGREGATION_CTRL_ENTRY_SIZE                                                                         (1)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_ENABLE                                                                      (0)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_ENABLE_WIDTH                                                                (1)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_SA_MAC_IN_HASH                                                          (1)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_SA_MAC_IN_HASH_WIDTH                                                    (1)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_DA_MAC_IN_HASH                                                          (2)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_DA_MAC_IN_HASH_WIDTH                                                    (1)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_IP_IN_HASH                                                              (3)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_IP_IN_HASH_WIDTH                                                        (1)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_L4_IN_HASH                                                              (4)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_L4_IN_HASH_WIDTH                                                        (1)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_TOS_IN_HASH                                                             (5)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_TOS_IN_HASH_WIDTH                                                       (1)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_VLAN_IN_HASH                                                            (6)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_VLAN_IN_HASH_WIDTH                                                      (1)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_RESERVED                                                                    (7)
#define SWCORE_LINK_AGGREGATION_CTRL_OFFSET_RESERVED_WIDTH                                                             (25)
typedef union SWCORE_LINK_AGGREGATION_CTRL_u {
    struct __attribute__ ((packed)) {
        jl_uint32 enable:SWCORE_LINK_AGGREGATION_CTRL_OFFSET_ENABLE_WIDTH;                                                    //[ 0: 0]
        jl_uint32 use_sa_mac_in_hash:SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_SA_MAC_IN_HASH_WIDTH;                            //[ 1: 1]
        jl_uint32 use_da_mac_in_hash:SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_DA_MAC_IN_HASH_WIDTH;                            //[ 2: 2]
        jl_uint32 use_ip_in_hash:SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_IP_IN_HASH_WIDTH;                                    //[ 3: 3]
        jl_uint32 use_l4_in_hash:SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_L4_IN_HASH_WIDTH;                                    //[ 4: 4]
        jl_uint32 use_tos_in_hash:SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_TOS_IN_HASH_WIDTH;                                  //[ 5: 5]
        jl_uint32 use_vlan_in_hash:SWCORE_LINK_AGGREGATION_CTRL_OFFSET_USE_VLAN_IN_HASH_WIDTH;                                //[ 6: 6]
        jl_uint32 reserved:SWCORE_LINK_AGGREGATION_CTRL_OFFSET_RESERVED_WIDTH;                                                //[31: 7]
    } BF;
    jl_uint32 val[SWCORE_LINK_AGGREGATION_CTRL_ENTRY_SIZE];
} SWCORE_LINK_AGGREGATION_CTRL_t;

#define SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG                                                  ((jl_uint32)0x0011F38CU)
#define SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_NUM                                              ((jl_uint32)0x00000001U)
#define SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_ENTRY_SIZE                                                            (1)
#define SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_TYPE_VALUE                                                     (0)
#define SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_TYPE_VALUE_WIDTH                                              (16)
#define SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_TYPE                                                          (16)
#define SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_TYPE_WIDTH                                                     (1)
#define SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_VALID                                                         (17)
#define SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_VALID_WIDTH                                                    (1)
#define SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_RESERVED                                                      (18)
#define SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_RESERVED_WIDTH                                                (14)
typedef union SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 type_value:SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_TYPE_VALUE_WIDTH;                               //[15: 0]
        jl_uint32 type:SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_TYPE_WIDTH;                                           //[16:16]
        jl_uint32 valid:SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_VALID_WIDTH;                                         //[17:17]
        jl_uint32 reserved:SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_RESERVED_WIDTH;                                   //[31:18]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_ENTRY_SIZE];
} SWCORE_INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_t;

#define SWCORE_CONFIGURABLE_ACL_SELECTION                                                          ((jl_uint32)0x0011F390U)
#define SWCORE_CONFIGURABLE_ACL_SELECTION_NUM                                                      ((jl_uint32)0x00000001U)
#define SWCORE_CONFIGURABLE_ACL_SELECTION_ENTRY_SIZE                                                                    (1)
#define SWCORE_CONFIGURABLE_ACL_SELECTION_OFFSET_SELECT_TCAM_OR_TABLE                                                   (0)
#define SWCORE_CONFIGURABLE_ACL_SELECTION_OFFSET_SELECT_TCAM_OR_TABLE_WIDTH                                             (1)
#define SWCORE_CONFIGURABLE_ACL_SELECTION_OFFSET_SELECT_SMALL_OR_LARGE                                                  (1)
#define SWCORE_CONFIGURABLE_ACL_SELECTION_OFFSET_SELECT_SMALL_OR_LARGE_WIDTH                                            (1)
#define SWCORE_CONFIGURABLE_ACL_SELECTION_OFFSET_RESERVED                                                               (2)
#define SWCORE_CONFIGURABLE_ACL_SELECTION_OFFSET_RESERVED_WIDTH                                                        (30)
typedef union SWCORE_CONFIGURABLE_ACL_SELECTION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 select_tcam_or_table:SWCORE_CONFIGURABLE_ACL_SELECTION_OFFSET_SELECT_TCAM_OR_TABLE_WIDTH;                   //[ 0: 0]
        jl_uint32 select_small_or_large:SWCORE_CONFIGURABLE_ACL_SELECTION_OFFSET_SELECT_SMALL_OR_LARGE_WIDTH;                 //[ 1: 1]
        jl_uint32 reserved:SWCORE_CONFIGURABLE_ACL_SELECTION_OFFSET_RESERVED_WIDTH;                                           //[31: 2]
    } BF;
    jl_uint32 val[SWCORE_CONFIGURABLE_ACL_SELECTION_ENTRY_SIZE];
} SWCORE_CONFIGURABLE_ACL_SELECTION_t;

#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR                                             ((jl_uint32)0x0011F394U)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_NUM                                         ((jl_uint32)0x00000001U)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_ENTRY_SIZE                                                       (1)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_OFFSET_FORCE_COLOR                                               (0)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_OFFSET_FORCE_COLOR_WIDTH                                         (1)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_OFFSET_COLOR                                                     (1)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_OFFSET_COLOR_WIDTH                                               (2)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_OFFSET_RESERVED                                                  (3)
#define SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_OFFSET_RESERVED_WIDTH                                           (29)
typedef union SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_u {
    struct __attribute__ ((packed)) {
        jl_uint32 force_color:SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_OFFSET_FORCE_COLOR_WIDTH;                        //[ 0: 0]
        jl_uint32 color:SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_OFFSET_COLOR_WIDTH;                                    //[ 2: 1]
        jl_uint32 reserved:SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_OFFSET_RESERVED_WIDTH;                              //[31: 3]
    } BF;
    jl_uint32 val[SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_ENTRY_SIZE];
} SWCORE_FORCE_NON_VLAN_PACKET_TO_SPECIFIC_COLOR_t;

#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR                                           ((jl_uint32)0x0011F398U)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_NUM                                       ((jl_uint32)0x00000001U)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_ENTRY_SIZE                                                     (1)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_OFFSET_FORCE_COLOR                                             (0)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_OFFSET_FORCE_COLOR_WIDTH                                       (1)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_OFFSET_COLOR                                                   (1)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_OFFSET_COLOR_WIDTH                                             (2)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_OFFSET_RESERVED                                                (3)
#define SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_OFFSET_RESERVED_WIDTH                                         (29)
typedef union SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_u {
    struct __attribute__ ((packed)) {
        jl_uint32 force_color:SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_OFFSET_FORCE_COLOR_WIDTH;                      //[ 0: 0]
        jl_uint32 color:SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_OFFSET_COLOR_WIDTH;                                  //[ 2: 1]
        jl_uint32 reserved:SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_OFFSET_RESERVED_WIDTH;                            //[31: 3]
    } BF;
    jl_uint32 val[SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_ENTRY_SIZE];
} SWCORE_FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_COLOR_t;

#define SWCORE_FORWARD_FROM_CPU                                                                    ((jl_uint32)0x0011F39CU)
#define SWCORE_FORWARD_FROM_CPU_NUM                                                                ((jl_uint32)0x00000001U)
#define SWCORE_FORWARD_FROM_CPU_ENTRY_SIZE                                                                              (1)
#define SWCORE_FORWARD_FROM_CPU_OFFSET_ENABLE                                                                           (0)
#define SWCORE_FORWARD_FROM_CPU_OFFSET_ENABLE_WIDTH                                                                     (1)
#define SWCORE_FORWARD_FROM_CPU_OFFSET_RESERVED                                                                         (1)
#define SWCORE_FORWARD_FROM_CPU_OFFSET_RESERVED_WIDTH                                                                  (31)
typedef union SWCORE_FORWARD_FROM_CPU_u {
    struct __attribute__ ((packed)) {
        jl_uint32 enable:SWCORE_FORWARD_FROM_CPU_OFFSET_ENABLE_WIDTH;                                                         //[ 0: 0]
        jl_uint32 reserved:SWCORE_FORWARD_FROM_CPU_OFFSET_RESERVED_WIDTH;                                                     //[31: 1]
    } BF;
    jl_uint32 val[SWCORE_FORWARD_FROM_CPU_ENTRY_SIZE];
} SWCORE_FORWARD_FROM_CPU_t;

#define SWCORE_PORT_MOVE_OPTIONS                                                                   ((jl_uint32)0x0011F3A0U)
#define SWCORE_PORT_MOVE_OPTIONS_NUM                                                               ((jl_uint32)0x00000001U)
#define SWCORE_PORT_MOVE_OPTIONS_ENTRY_SIZE                                                                             (1)
#define SWCORE_PORT_MOVE_OPTIONS_OFFSET_ALLOW_PORT_MOVE_ON_STATIC                                                       (0)
#define SWCORE_PORT_MOVE_OPTIONS_OFFSET_ALLOW_PORT_MOVE_ON_STATIC_WIDTH                                                (11)
#define SWCORE_PORT_MOVE_OPTIONS_OFFSET_RESERVED                                                                       (11)
#define SWCORE_PORT_MOVE_OPTIONS_OFFSET_RESERVED_WIDTH                                                                 (21)
typedef union SWCORE_PORT_MOVE_OPTIONS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 allow_port_move_on_static:SWCORE_PORT_MOVE_OPTIONS_OFFSET_ALLOW_PORT_MOVE_ON_STATIC_WIDTH;                  //[10: 0]
        jl_uint32 reserved:SWCORE_PORT_MOVE_OPTIONS_OFFSET_RESERVED_WIDTH;                                                    //[31:11]
    } BF;
    jl_uint32 val[SWCORE_PORT_MOVE_OPTIONS_ENTRY_SIZE];
} SWCORE_PORT_MOVE_OPTIONS_t;

#define SWCORE_L2_MULTICAST_HANDLING                                                               ((jl_uint32)0x0011F3A4U)
#define SWCORE_L2_MULTICAST_HANDLING_NUM                                                           ((jl_uint32)0x00000001U)
#define SWCORE_L2_MULTICAST_HANDLING_ENTRY_SIZE                                                                         (1)
#define SWCORE_L2_MULTICAST_HANDLING_OFFSET_EXCL_IPV4_MC                                                                (0)
#define SWCORE_L2_MULTICAST_HANDLING_OFFSET_EXCL_IPV4_MC_WIDTH                                                          (1)
#define SWCORE_L2_MULTICAST_HANDLING_OFFSET_EXCL_IPV6_MC                                                                (1)
#define SWCORE_L2_MULTICAST_HANDLING_OFFSET_EXCL_IPV6_MC_WIDTH                                                          (1)
#define SWCORE_L2_MULTICAST_HANDLING_OFFSET_INCL_L2_MC_LUT                                                              (2)
#define SWCORE_L2_MULTICAST_HANDLING_OFFSET_INCL_L2_MC_LUT_WIDTH                                                        (1)
#define SWCORE_L2_MULTICAST_HANDLING_OFFSET_INCL_MULTI_PORTS                                                            (3)
#define SWCORE_L2_MULTICAST_HANDLING_OFFSET_INCL_MULTI_PORTS_WIDTH                                                      (1)
#define SWCORE_L2_MULTICAST_HANDLING_OFFSET_RESERVED                                                                    (4)
#define SWCORE_L2_MULTICAST_HANDLING_OFFSET_RESERVED_WIDTH                                                             (28)
typedef union SWCORE_L2_MULTICAST_HANDLING_u {
    struct __attribute__ ((packed)) {
        jl_uint32 excl_ipv4_mc:SWCORE_L2_MULTICAST_HANDLING_OFFSET_EXCL_IPV4_MC_WIDTH;                                        //[ 0: 0]
        jl_uint32 excl_ipv6_mc:SWCORE_L2_MULTICAST_HANDLING_OFFSET_EXCL_IPV6_MC_WIDTH;                                        //[ 1: 1]
        jl_uint32 incl_l2_mc_lut:SWCORE_L2_MULTICAST_HANDLING_OFFSET_INCL_L2_MC_LUT_WIDTH;                                    //[ 2: 2]
        jl_uint32 incl_multi_ports:SWCORE_L2_MULTICAST_HANDLING_OFFSET_INCL_MULTI_PORTS_WIDTH;                                //[ 3: 3]
        jl_uint32 reserved:SWCORE_L2_MULTICAST_HANDLING_OFFSET_RESERVED_WIDTH;                                                //[31: 4]
    } BF;
    jl_uint32 val[SWCORE_L2_MULTICAST_HANDLING_ENTRY_SIZE];
} SWCORE_L2_MULTICAST_HANDLING_t;

#define SWCORE_DEBUG_SRCPORT                                                                       ((jl_uint32)0x0011F3A8U)
#define SWCORE_DEBUG_SRCPORT_NUM                                                                   ((jl_uint32)0x00000001U)
#define SWCORE_DEBUG_SRCPORT_ENTRY_SIZE                                                                                 (1)
#define SWCORE_DEBUG_SRCPORT_OFFSET_VALUE                                                                               (0)
#define SWCORE_DEBUG_SRCPORT_OFFSET_VALUE_WIDTH                                                                        (32)
typedef union SWCORE_DEBUG_SRCPORT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 value:SWCORE_DEBUG_SRCPORT_OFFSET_VALUE_WIDTH;                                                              //[31: 0]
    } BF;
    jl_uint32 val[SWCORE_DEBUG_SRCPORT_ENTRY_SIZE];
} SWCORE_DEBUG_SRCPORT_t;

#define SWCORE_DEBUG_DSTPORTMASK                                                                   ((jl_uint32)0x0011F3ACU)
#define SWCORE_DEBUG_DSTPORTMASK_NUM                                                               ((jl_uint32)0x00000001U)
#define SWCORE_DEBUG_DSTPORTMASK_ENTRY_SIZE                                                                             (1)
#define SWCORE_DEBUG_DSTPORTMASK_OFFSET_VALUE                                                                           (0)
#define SWCORE_DEBUG_DSTPORTMASK_OFFSET_VALUE_WIDTH                                                                    (11)
#define SWCORE_DEBUG_DSTPORTMASK_OFFSET_RESERVED                                                                       (11)
#define SWCORE_DEBUG_DSTPORTMASK_OFFSET_RESERVED_WIDTH                                                                 (21)
typedef union SWCORE_DEBUG_DSTPORTMASK_u {
    struct __attribute__ ((packed)) {
        jl_uint32 value:SWCORE_DEBUG_DSTPORTMASK_OFFSET_VALUE_WIDTH;                                                          //[10: 0]
        jl_uint32 reserved:SWCORE_DEBUG_DSTPORTMASK_OFFSET_RESERVED_WIDTH;                                                    //[31:11]
    } BF;
    jl_uint32 val[SWCORE_DEBUG_DSTPORTMASK_ENTRY_SIZE];
} SWCORE_DEBUG_DSTPORTMASK_t;

#define SWCORE_SOURCE_PORT_TABLE                                                                   ((jl_uint32)0x0011F3B0U)
#define SWCORE_SOURCE_PORT_TABLE_NUM                                                               ((jl_uint32)0x0000000BU)
#define SWCORE_SOURCE_PORT_TABLE_ENTRY_SIZE                                                                             (4)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_LEARNING_EN                                                                     (0)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_LEARNING_EN_WIDTH                                                               (1)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DROP_UNKNOWN_DA                                                                 (1)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DROP_UNKNOWN_DA_WIDTH                                                           (1)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_COLOR_FROM_L3                                                                   (2)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_COLOR_FROM_L3_WIDTH                                                             (1)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_USE_ACL                                                                         (3)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_USE_ACL_WIDTH                                                                   (1)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE                                                                        (4)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE_WIDTH                                                                  (3)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE_ICMP                                                                   (7)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE_ICMP_WIDTH                                                             (3)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE_ICMPV6                                                                (10)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE_ICMPV6_WIDTH                                                           (3)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE_IGMP                                                                  (13)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE_IGMP_WIDTH                                                             (3)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_VLAN_SINGLE_OP                                                                 (16)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_VLAN_SINGLE_OP_WIDTH                                                            (3)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_VID_SEL                                                                        (19)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_VID_SEL_WIDTH                                                                   (2)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_CFI_DEI_SEL                                                                    (21)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_CFI_DEI_SEL_WIDTH                                                               (2)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_PCP_SEL                                                                        (23)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_PCP_SEL_WIDTH                                                                   (2)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_TYPE_SEL                                                                       (25)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_TYPE_SEL_WIDTH                                                                  (2)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_VLAN_ASSIGNMENT                                                                (27)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_VLAN_ASSIGNMENT_WIDTH                                                           (2)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_VID_0_2                                                                (29)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_VID_0_2_WIDTH                                                           (3)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_VID_3_11                                                               (32)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_VID_3_11_WIDTH                                                          (9)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_VID_ORDER                                                              (41)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_VID_ORDER_WIDTH                                                         (2)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_CFI_DEI                                                                (43)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_CFI_DEI_WIDTH                                                           (1)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_PCP                                                                    (44)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_PCP_WIDTH                                                               (3)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_MIN_ALLOWED_VLANS                                                              (47)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_MIN_ALLOWED_VLANS_WIDTH                                                         (2)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_MAX_ALLOWED_VLANS                                                              (49)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_MAX_ALLOWED_VLANS_WIDTH                                                         (2)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_LEARN_MULTICAST_SA_MAC                                                         (51)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_LEARN_MULTICAST_SA_MAC_WIDTH                                                    (1)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_INPUT_MIRROR_ENABLED                                                           (52)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_INPUT_MIRROR_ENABLED_WIDTH                                                      (1)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEST_INPUT_MIRROR                                                              (53)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_DEST_INPUT_MIRROR_WIDTH                                                         (4)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_SPT                                                                            (57)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_SPT_WIDTH                                                                       (3)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_ENABLE_SPECIFIC_VID                                                            (60)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_ENABLE_SPECIFIC_VID_WIDTH                                                       (1)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_SPECIFIC_VID_AS_NON_VID_0_2                                                    (61)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_SPECIFIC_VID_AS_NON_VID_0_2_WIDTH                                               (3)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_SPECIFIC_VID_AS_NON_VID_3_11                                                   (64)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_SPECIFIC_VID_AS_NON_VID_3_11_WIDTH                                              (9)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_RESERVED                                                                       (73)
#define SWCORE_SOURCE_PORT_TABLE_OFFSET_RESERVED_WIDTH                                                                 (23)
typedef union SWCORE_SOURCE_PORT_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 learning_en:SWCORE_SOURCE_PORT_TABLE_OFFSET_LEARNING_EN_WIDTH;                                              //[ 0: 0]
        jl_uint64 drop_unknown_da:SWCORE_SOURCE_PORT_TABLE_OFFSET_DROP_UNKNOWN_DA_WIDTH;                                      //[ 1: 1]
        jl_uint64 color_from_l3:SWCORE_SOURCE_PORT_TABLE_OFFSET_COLOR_FROM_L3_WIDTH;                                          //[ 2: 2]
        jl_uint64 use_acl:SWCORE_SOURCE_PORT_TABLE_OFFSET_USE_ACL_WIDTH;                                                      //[ 3: 3]
        jl_uint64 acl_rule:SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE_WIDTH;                                                    //[ 6: 4]
        jl_uint64 acl_rule_icmp:SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE_ICMP_WIDTH;                                          //[ 9: 7]
        jl_uint64 acl_rule_icmpv6:SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE_ICMPV6_WIDTH;                                      //[12:10]
        jl_uint64 acl_rule_igmp:SWCORE_SOURCE_PORT_TABLE_OFFSET_ACL_RULE_IGMP_WIDTH;                                          //[15:13]
        jl_uint64 vlan_single_op:SWCORE_SOURCE_PORT_TABLE_OFFSET_VLAN_SINGLE_OP_WIDTH;                                        //[18:16]
        jl_uint64 vid_sel:SWCORE_SOURCE_PORT_TABLE_OFFSET_VID_SEL_WIDTH;                                                      //[20:19]
        jl_uint64 cfi_dei_sel:SWCORE_SOURCE_PORT_TABLE_OFFSET_CFI_DEI_SEL_WIDTH;                                              //[22:21]
        jl_uint64 pcp_sel:SWCORE_SOURCE_PORT_TABLE_OFFSET_PCP_SEL_WIDTH;                                                      //[24:23]
        jl_uint64 type_sel:SWCORE_SOURCE_PORT_TABLE_OFFSET_TYPE_SEL_WIDTH;                                                    //[26:25]
        jl_uint64 vlan_assignment:SWCORE_SOURCE_PORT_TABLE_OFFSET_VLAN_ASSIGNMENT_WIDTH;                                      //[28:27]
        jl_uint64 default_vid_0_2:SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_VID_0_2_WIDTH;                                      //[31:29]
        jl_uint64 default_vid_3_11:SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_VID_3_11_WIDTH;                                    //[40:32]
        jl_uint64 default_vid_order:SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_VID_ORDER_WIDTH;                                  //[42:41]
        jl_uint64 default_cfi_dei:SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_CFI_DEI_WIDTH;                                      //[43:43]
        jl_uint64 default_pcp:SWCORE_SOURCE_PORT_TABLE_OFFSET_DEFAULT_PCP_WIDTH;                                              //[46:44]
        jl_uint64 min_allowed_vlans:SWCORE_SOURCE_PORT_TABLE_OFFSET_MIN_ALLOWED_VLANS_WIDTH;                                  //[48:47]
        jl_uint64 max_allowed_vlans:SWCORE_SOURCE_PORT_TABLE_OFFSET_MAX_ALLOWED_VLANS_WIDTH;                                  //[50:49]
        jl_uint64 learn_multicast_sa_mac:SWCORE_SOURCE_PORT_TABLE_OFFSET_LEARN_MULTICAST_SA_MAC_WIDTH;                        //[51:51]
        jl_uint64 input_mirror_enabled:SWCORE_SOURCE_PORT_TABLE_OFFSET_INPUT_MIRROR_ENABLED_WIDTH;                            //[52:52]
        jl_uint64 dest_input_mirror:SWCORE_SOURCE_PORT_TABLE_OFFSET_DEST_INPUT_MIRROR_WIDTH;                                  //[56:53]
        jl_uint64 spt:SWCORE_SOURCE_PORT_TABLE_OFFSET_SPT_WIDTH;                                                              //[59:57]
        jl_uint64 enable_specific_vid:SWCORE_SOURCE_PORT_TABLE_OFFSET_ENABLE_SPECIFIC_VID_WIDTH;                              //[60:60]
        jl_uint64 specific_vid_as_non_vid_0_2:SWCORE_SOURCE_PORT_TABLE_OFFSET_SPECIFIC_VID_AS_NON_VID_0_2_WIDTH;              //[63:61]
        jl_uint64 specific_vid_as_non_vid_3_11:SWCORE_SOURCE_PORT_TABLE_OFFSET_SPECIFIC_VID_AS_NON_VID_3_11_WIDTH;            //[72:64]
        jl_uint64 reserved:SWCORE_SOURCE_PORT_TABLE_OFFSET_RESERVED_WIDTH;                                                    //[95:73]
    } BF;
    jl_uint32 val[SWCORE_SOURCE_PORT_TABLE_ENTRY_SIZE];
} SWCORE_SOURCE_PORT_TABLE_t;

#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT                                                    ((jl_uint32)0x0011F460U)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_NUM                                                ((jl_uint32)0x0000002CU)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE                                                              (4)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MAC_0_31                                                         (0)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MAC_0_31_WIDTH                                                  (32)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MAC_32_47                                                       (32)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MAC_32_47_WIDTH                                                 (16)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_0_15                                                       (48)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_0_15_WIDTH                                                 (16)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_16_47                                                      (64)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_16_47_WIDTH                                                (32)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_SA_OR_DA                                                        (96)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_SA_OR_DA_WIDTH                                                   (1)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE                                                           (97)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH                                                      (1)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE                                                           (98)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH                                                      (3)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED                                                       (101)
#define SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH                                                  (27)
typedef union SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_u {
    struct __attribute__ ((packed)) {
        jl_uint64 mac_0_31:SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MAC_0_31_WIDTH;                                     //[31: 0]
        jl_uint64 mac_32_47:SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MAC_32_47_WIDTH;                                   //[47:32]
        jl_uint64 mask_0_15:SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_0_15_WIDTH;                                   //[63:48]
        jl_uint64 mask_16_47:SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_16_47_WIDTH;                                 //[95:64]
        jl_uint64 sa_or_da:SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_SA_OR_DA_WIDTH;                                     //[96:96]
        jl_uint64 force:SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH;                                           //[97:97]
        jl_uint64 queue:SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH;                                          //[100:98]
        jl_uint64 reserved:SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH;                                   //[127:101]
    } BF;
    jl_uint32 val[SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE];
} SWCORE_DA_OR_SA_MAC_TO_QUEUE_ASSIGNMENT_t;

#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA                                                   ((jl_uint32)0x0011F720U)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_NUM                                               ((jl_uint32)0x00000004U)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_ENTRY_SIZE                                                             (4)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_PORTS                                                           (0)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_PORTS_WIDTH                                                    (11)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_SA_OR_DA                                                       (11)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_SA_OR_DA_WIDTH                                                  (1)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_START_0_19                                                     (12)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_START_0_19_WIDTH                                               (20)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_START_20_47                                                    (32)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_START_20_47_WIDTH                                              (28)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_END_0_3                                                        (60)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_END_0_3_WIDTH                                                   (4)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_END_4_35                                                       (64)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_END_4_35_WIDTH                                                 (32)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_END_36_47                                                      (96)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_END_36_47_WIDTH                                                (12)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_RESERVED                                                      (108)
#define SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_RESERVED_WIDTH                                                 (20)
typedef union SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_u {
    struct __attribute__ ((packed)) {
        jl_uint64 ports:SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_PORTS_WIDTH;                                          //[10: 0]
        jl_uint64 sa_or_da:SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_SA_OR_DA_WIDTH;                                    //[11:11]
        jl_uint64 start_0_19:SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_START_0_19_WIDTH;                                //[31:12]
        jl_uint64 start_20_47:SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_START_20_47_WIDTH;                              //[59:32]
        jl_uint64 end_0_3:SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_END_0_3_WIDTH;                                      //[63:60]
        jl_uint64 end_4_35:SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_END_4_35_WIDTH;                                    //[95:64]
        jl_uint64 end_36_47:SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_END_36_47_WIDTH;                                 //[107:96]
        jl_uint64 reserved:SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_OFFSET_RESERVED_WIDTH;                                  //[127:108]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_ENTRY_SIZE];
} SWCORE_INGRESS_VID_MAC_RANGE_SEARCH_DATA_t;

#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE                                                   ((jl_uint32)0x0011F760U)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_NUM                                               ((jl_uint32)0x00000004U)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_ENTRY_SIZE                                                             (4)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_0_31                                                 (0)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_0_31_WIDTH                                          (32)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_32_47                                               (32)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_32_47_WIDTH                                         (16)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_0_15                                                 (48)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_0_15_WIDTH                                           (16)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_16_47                                                (64)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_16_47_WIDTH                                          (32)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_DROP_ENABLE                                                    (96)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_DROP_ENABLE_WIDTH                                               (1)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_SEND_TO_CPU                                                    (97)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_SEND_TO_CPU_WIDTH                                               (1)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_FORCE_QUEUE                                                    (98)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_FORCE_QUEUE_WIDTH                                               (1)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_E_QUEUE                                                        (99)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_E_QUEUE_WIDTH                                                   (3)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_COLOR                                                         (102)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_COLOR_WIDTH                                                     (2)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_FORCE_COLOR                                                   (104)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_FORCE_COLOR_WIDTH                                               (1)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_MMP_VALID                                                     (105)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_MMP_VALID_WIDTH                                                 (1)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_MMP_PTR                                                       (106)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_MMP_PTR_WIDTH                                                   (4)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_MMP_ORDER                                                     (110)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_MMP_ORDER_WIDTH                                                 (2)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_ENABLE                                                        (112)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_ENABLE_WIDTH                                                   (11)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_RESERVED                                                      (123)
#define SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_RESERVED_WIDTH                                                  (5)
typedef union SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 start_addr_0_31:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_0_31_WIDTH;                      //[31: 0]
        jl_uint64 start_addr_32_47:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_32_47_WIDTH;                    //[47:32]
        jl_uint64 stop_addr_0_15:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_0_15_WIDTH;                        //[63:48]
        jl_uint64 stop_addr_16_47:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_16_47_WIDTH;                      //[95:64]
        jl_uint64 drop_enable:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_DROP_ENABLE_WIDTH;                              //[96:96]
        jl_uint64 send_to_cpu:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_SEND_TO_CPU_WIDTH;                              //[97:97]
        jl_uint64 force_queue:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_FORCE_QUEUE_WIDTH;                              //[98:98]
        jl_uint64 e_queue:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_E_QUEUE_WIDTH;                                     //[101:99]
        jl_uint64 color:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_COLOR_WIDTH;                                        //[103:102]
        jl_uint64 force_color:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_FORCE_COLOR_WIDTH;                            //[104:104]
        jl_uint64 mmp_valid:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_MMP_VALID_WIDTH;                                //[105:105]
        jl_uint64 mmp_ptr:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_MMP_PTR_WIDTH;                                    //[109:106]
        jl_uint64 mmp_order:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_MMP_ORDER_WIDTH;                                //[111:110]
        jl_uint64 enable:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_ENABLE_WIDTH;                                      //[122:112]
        jl_uint64 reserved:SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_OFFSET_RESERVED_WIDTH;                                  //[127:123]
    } BF;
    jl_uint32 val[SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_ENTRY_SIZE];
} SWCORE_RESERVED_SOURCE_MAC_ADDRESS_RANGE_t;

#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE                                              ((jl_uint32)0x0011F7A0U)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_NUM                                          ((jl_uint32)0x00000004U)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_ENTRY_SIZE                                                        (4)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_0_31                                            (0)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_0_31_WIDTH                                     (32)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_32_47                                          (32)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_32_47_WIDTH                                    (16)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_0_15                                            (48)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_0_15_WIDTH                                      (16)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_16_47                                           (64)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_16_47_WIDTH                                     (32)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_DROP_ENABLE                                               (96)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_DROP_ENABLE_WIDTH                                          (1)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_SEND_TO_CPU                                               (97)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_SEND_TO_CPU_WIDTH                                          (1)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_FORCE_QUEUE                                               (98)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_FORCE_QUEUE_WIDTH                                          (1)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_E_QUEUE                                                   (99)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_E_QUEUE_WIDTH                                              (3)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_COLOR                                                    (102)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_COLOR_WIDTH                                                (2)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_FORCE_COLOR                                              (104)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_FORCE_COLOR_WIDTH                                          (1)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_MMP_VALID                                                (105)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_MMP_VALID_WIDTH                                            (1)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_MMP_PTR                                                  (106)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_MMP_PTR_WIDTH                                              (4)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_MMP_ORDER                                                (110)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_MMP_ORDER_WIDTH                                            (2)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_ENABLE                                                   (112)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_ENABLE_WIDTH                                              (11)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_RESERVED                                                 (123)
#define SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_RESERVED_WIDTH                                             (5)
typedef union SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 start_addr_0_31:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_0_31_WIDTH;                 //[31: 0]
        jl_uint64 start_addr_32_47:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_START_ADDR_32_47_WIDTH;               //[47:32]
        jl_uint64 stop_addr_0_15:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_0_15_WIDTH;                   //[63:48]
        jl_uint64 stop_addr_16_47:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_STOP_ADDR_16_47_WIDTH;                 //[95:64]
        jl_uint64 drop_enable:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_DROP_ENABLE_WIDTH;                         //[96:96]
        jl_uint64 send_to_cpu:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_SEND_TO_CPU_WIDTH;                         //[97:97]
        jl_uint64 force_queue:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_FORCE_QUEUE_WIDTH;                         //[98:98]
        jl_uint64 e_queue:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_E_QUEUE_WIDTH;                                //[101:99]
        jl_uint64 color:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_COLOR_WIDTH;                                   //[103:102]
        jl_uint64 force_color:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_FORCE_COLOR_WIDTH;                       //[104:104]
        jl_uint64 mmp_valid:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_MMP_VALID_WIDTH;                           //[105:105]
        jl_uint64 mmp_ptr:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_MMP_PTR_WIDTH;                               //[109:106]
        jl_uint64 mmp_order:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_MMP_ORDER_WIDTH;                           //[111:110]
        jl_uint64 enable:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_ENABLE_WIDTH;                                 //[122:112]
        jl_uint64 reserved:SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_OFFSET_RESERVED_WIDTH;                             //[127:123]
    } BF;
    jl_uint32 val[SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_ENTRY_SIZE];
} SWCORE_RESERVED_DESTINATION_MAC_ADDRESS_RANGE_t;

#define SWCORE_SEND_TO_CPU                                                                         ((jl_uint32)0x0011F7E0U)
#define SWCORE_SEND_TO_CPU_NUM                                                                     ((jl_uint32)0x00000001U)
#define SWCORE_SEND_TO_CPU_ENTRY_SIZE                                                                                   (2)
#define SWCORE_SEND_TO_CPU_OFFSET_ALLOW_BPDU                                                                            (0)
#define SWCORE_SEND_TO_CPU_OFFSET_ALLOW_BPDU_WIDTH                                                                      (1)
#define SWCORE_SEND_TO_CPU_OFFSET_ALLOW_RST_BPDU                                                                        (1)
#define SWCORE_SEND_TO_CPU_OFFSET_ALLOW_RST_BPDU_WIDTH                                                                  (1)
#define SWCORE_SEND_TO_CPU_OFFSET_UNIQUE_CPU_MAC                                                                        (2)
#define SWCORE_SEND_TO_CPU_OFFSET_UNIQUE_CPU_MAC_WIDTH                                                                  (1)
#define SWCORE_SEND_TO_CPU_OFFSET_CPU_MAC_ADDR_0_28                                                                     (3)
#define SWCORE_SEND_TO_CPU_OFFSET_CPU_MAC_ADDR_0_28_WIDTH                                                              (29)
#define SWCORE_SEND_TO_CPU_OFFSET_CPU_MAC_ADDR_29_47                                                                   (32)
#define SWCORE_SEND_TO_CPU_OFFSET_CPU_MAC_ADDR_29_47_WIDTH                                                             (19)
#define SWCORE_SEND_TO_CPU_OFFSET_RESERVED                                                                             (51)
#define SWCORE_SEND_TO_CPU_OFFSET_RESERVED_WIDTH                                                                       (13)
typedef union SWCORE_SEND_TO_CPU_u {
    struct __attribute__ ((packed)) {
        jl_uint64 allow_bpdu:SWCORE_SEND_TO_CPU_OFFSET_ALLOW_BPDU_WIDTH;                                                      //[ 0: 0]
        jl_uint64 allow_rst_bpdu:SWCORE_SEND_TO_CPU_OFFSET_ALLOW_RST_BPDU_WIDTH;                                              //[ 1: 1]
        jl_uint64 unique_cpu_mac:SWCORE_SEND_TO_CPU_OFFSET_UNIQUE_CPU_MAC_WIDTH;                                              //[ 2: 2]
        jl_uint64 cpu_mac_addr_0_28:SWCORE_SEND_TO_CPU_OFFSET_CPU_MAC_ADDR_0_28_WIDTH;                                        //[31: 3]
        jl_uint64 cpu_mac_addr_29_47:SWCORE_SEND_TO_CPU_OFFSET_CPU_MAC_ADDR_29_47_WIDTH;                                      //[50:32]
        jl_uint64 reserved:SWCORE_SEND_TO_CPU_OFFSET_RESERVED_WIDTH;                                                          //[63:51]
    } BF;
    jl_uint32 val[SWCORE_SEND_TO_CPU_ENTRY_SIZE];
} SWCORE_SEND_TO_CPU_t;

#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE                                                  ((jl_uint32)0x0011F7E8U)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_NUM                                              ((jl_uint32)0x00000001U)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_ENTRY_SIZE                                                            (2)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_OFFSET_MAC_BASE_0_31                                                  (0)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_OFFSET_MAC_BASE_0_31_WIDTH                                           (32)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_OFFSET_MAC_BASE_32_39                                                (32)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_OFFSET_MAC_BASE_32_39_WIDTH                                           (8)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_OFFSET_RESERVED                                                      (40)
#define SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_OFFSET_RESERVED_WIDTH                                                (24)
typedef union SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 mac_base_0_31:SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_OFFSET_MAC_BASE_0_31_WIDTH;                         //[31: 0]
        jl_uint64 mac_base_32_39:SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_OFFSET_MAC_BASE_32_39_WIDTH;                       //[39:32]
        jl_uint64 reserved:SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_OFFSET_RESERVED_WIDTH;                                   //[63:40]
    } BF;
    jl_uint32 val[SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_ENTRY_SIZE];
} SWCORE_L2_RESERVED_MULTICAST_ADDRESS_BASE_t;

#define SWCORE_EGRESS_SPANNING_TREE_STATE                                                          ((jl_uint32)0x0011F7F0U)
#define SWCORE_EGRESS_SPANNING_TREE_STATE_NUM                                                      ((jl_uint32)0x00000001U)
#define SWCORE_EGRESS_SPANNING_TREE_STATE_ENTRY_SIZE                                                                    (2)
#define SWCORE_EGRESS_SPANNING_TREE_STATE_OFFSET_SPT_STATE_0_31                                                         (0)
#define SWCORE_EGRESS_SPANNING_TREE_STATE_OFFSET_SPT_STATE_0_31_WIDTH                                                  (32)
#define SWCORE_EGRESS_SPANNING_TREE_STATE_OFFSET_SPT_STATE_32                                                          (32)
#define SWCORE_EGRESS_SPANNING_TREE_STATE_OFFSET_SPT_STATE_32_WIDTH                                                     (1)
#define SWCORE_EGRESS_SPANNING_TREE_STATE_OFFSET_RESERVED                                                              (33)
#define SWCORE_EGRESS_SPANNING_TREE_STATE_OFFSET_RESERVED_WIDTH                                                        (31)
typedef union SWCORE_EGRESS_SPANNING_TREE_STATE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 spt_state_0_31:SWCORE_EGRESS_SPANNING_TREE_STATE_OFFSET_SPT_STATE_0_31_WIDTH;                               //[31: 0]
        jl_uint64 spt_state_32:SWCORE_EGRESS_SPANNING_TREE_STATE_OFFSET_SPT_STATE_32_WIDTH;                                   //[32:32]
        jl_uint64 reserved:SWCORE_EGRESS_SPANNING_TREE_STATE_OFFSET_RESERVED_WIDTH;                                           //[63:33]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_SPANNING_TREE_STATE_ENTRY_SIZE];
} SWCORE_EGRESS_SPANNING_TREE_STATE_t;

#define SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS                                                     ((jl_uint32)0x0011F7F8U)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_NUM                                                 ((jl_uint32)0x00000004U)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_ENTRY_SIZE                                                               (2)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_MAC_ADDR_0_31                                                     (0)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_MAC_ADDR_0_31_WIDTH                                              (32)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_MAC_ADDR_32_47                                                   (32)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_MAC_ADDR_32_47_WIDTH                                             (16)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_GID                                                              (48)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_GID_WIDTH                                                        (12)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_RESERVED                                                         (60)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_RESERVED_WIDTH                                                    (4)
typedef union SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_u {
    struct __attribute__ ((packed)) {
        jl_uint64 mac_addr_0_31:SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_MAC_ADDR_0_31_WIDTH;                            //[31: 0]
        jl_uint64 mac_addr_32_47:SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_MAC_ADDR_32_47_WIDTH;                          //[47:32]
        jl_uint64 gid:SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_GID_WIDTH;                                                //[59:48]
        jl_uint64 reserved:SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET_RESERVED_WIDTH;                                      //[63:60]
    } BF;
    jl_uint32 val[SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_ENTRY_SIZE];
} SWCORE_L2_LOOKUP_COLLISION_TABLE_MASKS_t;

#define SWCORE_L2_LOOKUP_COLLISION_TABLE                                                           ((jl_uint32)0x0011F818U)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_NUM                                                       ((jl_uint32)0x00000010U)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_ENTRY_SIZE                                                                     (2)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_MAC_ADDR_0_31                                                           (0)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_MAC_ADDR_0_31_WIDTH                                                    (32)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_MAC_ADDR_32_47                                                         (32)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_MAC_ADDR_32_47_WIDTH                                                   (16)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_GID                                                                    (48)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_GID_WIDTH                                                              (12)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_RESERVED                                                               (60)
#define SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_RESERVED_WIDTH                                                          (4)
typedef union SWCORE_L2_LOOKUP_COLLISION_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 mac_addr_0_31:SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_MAC_ADDR_0_31_WIDTH;                                  //[31: 0]
        jl_uint64 mac_addr_32_47:SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_MAC_ADDR_32_47_WIDTH;                                //[47:32]
        jl_uint64 gid:SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_GID_WIDTH;                                                      //[59:48]
        jl_uint64 reserved:SWCORE_L2_LOOKUP_COLLISION_TABLE_OFFSET_RESERVED_WIDTH;                                            //[63:60]
    } BF;
    jl_uint32 val[SWCORE_L2_LOOKUP_COLLISION_TABLE_ENTRY_SIZE];
} SWCORE_L2_LOOKUP_COLLISION_TABLE_t;

#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT                                                   ((jl_uint32)0x0011F898U)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_NUM                                               ((jl_uint32)0x0000002CU)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE                                                             (2)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_START_PORT                                                      (0)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_START_PORT_WIDTH                                               (16)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_END_PORT                                                       (16)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_END_PORT_WIDTH                                                 (16)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_SP_OR_DP                                                       (32)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_SP_OR_DP_WIDTH                                                  (1)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_UDP_TCP                                                        (33)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_UDP_TCP_WIDTH                                                   (1)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE                                                          (34)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH                                                     (1)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE                                                          (35)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH                                                     (3)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED                                                       (38)
#define SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH                                                 (26)
typedef union SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_u {
    struct __attribute__ ((packed)) {
        jl_uint64 start_port:SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_START_PORT_WIDTH;                                //[15: 0]
        jl_uint64 end_port:SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_END_PORT_WIDTH;                                    //[31:16]
        jl_uint64 sp_or_dp:SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_SP_OR_DP_WIDTH;                                    //[32:32]
        jl_uint64 udp_tcp:SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_UDP_TCP_WIDTH;                                      //[33:33]
        jl_uint64 force:SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH;                                          //[34:34]
        jl_uint64 queue:SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH;                                          //[37:35]
        jl_uint64 reserved:SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH;                                    //[63:38]
    } BF;
    jl_uint32 val[SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE];
} SWCORE_L4_PORT_RANGE_TO_QUEUE_ASSIGNMENT_t;

#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE                                              ((jl_uint32)0x0011F9F8U)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_NUM                                          ((jl_uint32)0x00000008U)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_ENTRY_SIZE                                                        (2)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_0                                             (0)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_0_WIDTH                                       (3)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_1                                             (3)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_1_WIDTH                                       (3)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_2                                             (6)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_2_WIDTH                                       (3)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_3                                             (9)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_3_WIDTH                                       (3)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_4                                            (12)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_4_WIDTH                                       (3)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_5                                            (15)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_5_WIDTH                                       (3)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_6                                            (18)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_6_WIDTH                                       (3)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_7                                            (21)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_7_WIDTH                                       (3)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_8                                            (24)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_8_WIDTH                                       (3)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_9                                            (27)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_9_WIDTH                                       (3)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_0_1                                       (30)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_0_1_WIDTH                                  (2)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_2                                         (32)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_2_WIDTH                                    (1)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_RESERVED                                                  (33)
#define SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_RESERVED_WIDTH                                            (31)
typedef union SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 p_queue_port_0:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_0_WIDTH;                   //[ 2: 0]
        jl_uint64 p_queue_port_1:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_1_WIDTH;                   //[ 5: 3]
        jl_uint64 p_queue_port_2:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_2_WIDTH;                   //[ 8: 6]
        jl_uint64 p_queue_port_3:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_3_WIDTH;                   //[11: 9]
        jl_uint64 p_queue_port_4:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_4_WIDTH;                   //[14:12]
        jl_uint64 p_queue_port_5:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_5_WIDTH;                   //[17:15]
        jl_uint64 p_queue_port_6:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_6_WIDTH;                   //[20:18]
        jl_uint64 p_queue_port_7:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_7_WIDTH;                   //[23:21]
        jl_uint64 p_queue_port_8:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_8_WIDTH;                   //[26:24]
        jl_uint64 p_queue_port_9:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_9_WIDTH;                   //[29:27]
        jl_uint64 p_queue_port_10_0_1:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_0_1_WIDTH;         //[31:30]
        jl_uint64 p_queue_port_10_2:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_2_WIDTH;             //[32:32]
        jl_uint64 reserved:SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_RESERVED_WIDTH;                               //[63:33]
    } BF;
    jl_uint32 val[SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_ENTRY_SIZE];
} SWCORE_VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_t;

#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE                                        ((jl_uint32)0x0011FA38U)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_NUM                                    ((jl_uint32)0x00000008U)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_ENTRY_SIZE                                                  (2)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_0                                       (0)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_0_WIDTH                                 (3)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_1                                       (3)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_1_WIDTH                                 (3)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_2                                       (6)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_2_WIDTH                                 (3)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_3                                       (9)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_3_WIDTH                                 (3)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_4                                      (12)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_4_WIDTH                                 (3)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_5                                      (15)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_5_WIDTH                                 (3)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_6                                      (18)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_6_WIDTH                                 (3)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_7                                      (21)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_7_WIDTH                                 (3)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_8                                      (24)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_8_WIDTH                                 (3)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_9                                      (27)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_9_WIDTH                                 (3)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_0_1                                 (30)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_0_1_WIDTH                            (2)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_2                                   (32)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_2_WIDTH                              (1)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_RESERVED                                            (33)
#define SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_RESERVED_WIDTH                                      (31)
typedef union SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 p_queue_port_0:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_0_WIDTH;             //[ 2: 0]
        jl_uint64 p_queue_port_1:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_1_WIDTH;             //[ 5: 3]
        jl_uint64 p_queue_port_2:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_2_WIDTH;             //[ 8: 6]
        jl_uint64 p_queue_port_3:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_3_WIDTH;             //[11: 9]
        jl_uint64 p_queue_port_4:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_4_WIDTH;             //[14:12]
        jl_uint64 p_queue_port_5:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_5_WIDTH;             //[17:15]
        jl_uint64 p_queue_port_6:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_6_WIDTH;             //[20:18]
        jl_uint64 p_queue_port_7:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_7_WIDTH;             //[23:21]
        jl_uint64 p_queue_port_8:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_8_WIDTH;             //[26:24]
        jl_uint64 p_queue_port_9:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_9_WIDTH;             //[29:27]
        jl_uint64 p_queue_port_10_0_1:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_0_1_WIDTH;   //[31:30]
        jl_uint64 p_queue_port_10_2:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_2_WIDTH;       //[32:32]
        jl_uint64 reserved:SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_RESERVED_WIDTH;                         //[63:33]
    } BF;
    jl_uint32 val[SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_ENTRY_SIZE];
} SWCORE_MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_t;

#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE                                          ((jl_uint32)0x0011FA78U)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_NUM                                      ((jl_uint32)0x00000100U)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_ENTRY_SIZE                                                    (2)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_0                                         (0)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_0_WIDTH                                   (3)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_1                                         (3)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_1_WIDTH                                   (3)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_2                                         (6)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_2_WIDTH                                   (3)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_3                                         (9)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_3_WIDTH                                   (3)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_4                                        (12)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_4_WIDTH                                   (3)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_5                                        (15)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_5_WIDTH                                   (3)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_6                                        (18)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_6_WIDTH                                   (3)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_7                                        (21)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_7_WIDTH                                   (3)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_8                                        (24)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_8_WIDTH                                   (3)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_9                                        (27)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_9_WIDTH                                   (3)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_0_1                                   (30)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_0_1_WIDTH                              (2)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_2                                     (32)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_2_WIDTH                                (1)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_RESERVED                                              (33)
#define SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_RESERVED_WIDTH                                        (31)
typedef union SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 p_queue_port_0:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_0_WIDTH;               //[ 2: 0]
        jl_uint64 p_queue_port_1:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_1_WIDTH;               //[ 5: 3]
        jl_uint64 p_queue_port_2:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_2_WIDTH;               //[ 8: 6]
        jl_uint64 p_queue_port_3:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_3_WIDTH;               //[11: 9]
        jl_uint64 p_queue_port_4:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_4_WIDTH;               //[14:12]
        jl_uint64 p_queue_port_5:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_5_WIDTH;               //[17:15]
        jl_uint64 p_queue_port_6:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_6_WIDTH;               //[20:18]
        jl_uint64 p_queue_port_7:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_7_WIDTH;               //[23:21]
        jl_uint64 p_queue_port_8:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_8_WIDTH;               //[26:24]
        jl_uint64 p_queue_port_9:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_9_WIDTH;               //[29:27]
        jl_uint64 p_queue_port_10_0_1:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_0_1_WIDTH;     //[31:30]
        jl_uint64 p_queue_port_10_2:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_P_QUEUE_PORT_10_2_WIDTH;         //[32:32]
        jl_uint64 reserved:SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET_RESERVED_WIDTH;                           //[63:33]
    } BF;
    jl_uint32 val[SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_ENTRY_SIZE];
} SWCORE_IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_t;

#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA                                         ((jl_uint32)0x00120278U)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_NUM                                     ((jl_uint32)0x00000004U)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_ENTRY_SIZE                                                   (2)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_PORTS                                                 (0)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_PORTS_WIDTH                                          (11)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_START                                                (11)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_START_WIDTH                                          (16)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_END_0_4                                              (27)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_END_0_4_WIDTH                                         (5)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_END_5_15                                             (32)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_END_5_15_WIDTH                                       (11)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_RESERVED                                             (43)
#define SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_RESERVED_WIDTH                                       (21)
typedef union SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_u {
    struct __attribute__ ((packed)) {
        jl_uint64 ports:SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_PORTS_WIDTH;                                //[10: 0]
        jl_uint64 start:SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_START_WIDTH;                                //[26:11]
        jl_uint64 end_0_4:SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_END_0_4_WIDTH;                            //[31:27]
        jl_uint64 end_5_15:SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_END_5_15_WIDTH;                          //[42:32]
        jl_uint64 reserved:SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_OFFSET_RESERVED_WIDTH;                          //[63:43]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_ENTRY_SIZE];
} SWCORE_INGRESS_VID_ETHERNET_TYPE_RANGE_SEARCH_DATA_t;

#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA                                             ((jl_uint32)0x00120298U)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_NUM                                         ((jl_uint32)0x00000004U)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_ENTRY_SIZE                                                       (2)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_PORTS                                                     (0)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_PORTS_WIDTH                                              (11)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_VTYPE                                                    (11)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_VTYPE_WIDTH                                               (1)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_START                                                    (12)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_START_WIDTH                                              (12)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_END_0_7                                                  (24)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_END_0_7_WIDTH                                             (8)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_END_8_11                                                 (32)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_END_8_11_WIDTH                                            (4)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_RESERVED                                                 (36)
#define SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_RESERVED_WIDTH                                           (28)
typedef union SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_u {
    struct __attribute__ ((packed)) {
        jl_uint64 ports:SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_PORTS_WIDTH;                                    //[10: 0]
        jl_uint64 vtype:SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_VTYPE_WIDTH;                                    //[11:11]
        jl_uint64 start:SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_START_WIDTH;                                    //[23:12]
        jl_uint64 end_0_7:SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_END_0_7_WIDTH;                                //[31:24]
        jl_uint64 end_8_11:SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_END_8_11_WIDTH;                              //[35:32]
        jl_uint64 reserved:SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_OFFSET_RESERVED_WIDTH;                              //[63:36]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_ENTRY_SIZE];
} SWCORE_INGRESS_VID_INNER_VID_RANGE_SEARCH_DATA_t;

#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA                                             ((jl_uint32)0x001202B8U)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_NUM                                         ((jl_uint32)0x00000004U)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_ENTRY_SIZE                                                       (2)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_PORTS                                                     (0)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_PORTS_WIDTH                                              (11)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_VTYPE                                                    (11)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_VTYPE_WIDTH                                               (1)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_START                                                    (12)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_START_WIDTH                                              (12)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_END_0_7                                                  (24)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_END_0_7_WIDTH                                             (8)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_END_8_11                                                 (32)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_END_8_11_WIDTH                                            (4)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_RESERVED                                                 (36)
#define SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_RESERVED_WIDTH                                           (28)
typedef union SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_u {
    struct __attribute__ ((packed)) {
        jl_uint64 ports:SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_PORTS_WIDTH;                                    //[10: 0]
        jl_uint64 vtype:SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_VTYPE_WIDTH;                                    //[11:11]
        jl_uint64 start:SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_START_WIDTH;                                    //[23:12]
        jl_uint64 end_0_7:SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_END_0_7_WIDTH;                                //[31:24]
        jl_uint64 end_8_11:SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_END_8_11_WIDTH;                              //[35:32]
        jl_uint64 reserved:SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_OFFSET_RESERVED_WIDTH;                              //[63:36]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_ENTRY_SIZE];
} SWCORE_INGRESS_VID_OUTER_VID_RANGE_SEARCH_DATA_t;

#define SWCORE_LLDP_CONFIGURATION                                                                  ((jl_uint32)0x001202D8U)
#define SWCORE_LLDP_CONFIGURATION_NUM                                                              ((jl_uint32)0x00000001U)
#define SWCORE_LLDP_CONFIGURATION_ENTRY_SIZE                                                                            (8)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC1_0_31                                                                      (0)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC1_0_31_WIDTH                                                               (32)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC1_32_47                                                                    (32)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC1_32_47_WIDTH                                                              (16)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC2_0_15                                                                     (48)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC2_0_15_WIDTH                                                               (16)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC2_16_47                                                                    (64)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC2_16_47_WIDTH                                                              (32)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC3_0_31                                                                     (96)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC3_0_31_WIDTH                                                               (32)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC3_32_47                                                                   (128)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_MAC3_32_47_WIDTH                                                              (16)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_ETH                                                                          (144)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_ETH_WIDTH                                                                     (16)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_PORTMASK                                                                     (160)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_PORTMASK_WIDTH                                                                (11)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_RESERVED                                                                     (171)
#define SWCORE_LLDP_CONFIGURATION_OFFSET_RESERVED_WIDTH                                                                (21)
typedef union SWCORE_LLDP_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint64 mac1_0_31:SWCORE_LLDP_CONFIGURATION_OFFSET_MAC1_0_31_WIDTH;                                                 //[31: 0]
        jl_uint64 mac1_32_47:SWCORE_LLDP_CONFIGURATION_OFFSET_MAC1_32_47_WIDTH;                                               //[47:32]
        jl_uint64 mac2_0_15:SWCORE_LLDP_CONFIGURATION_OFFSET_MAC2_0_15_WIDTH;                                                 //[63:48]
        jl_uint64 mac2_16_47:SWCORE_LLDP_CONFIGURATION_OFFSET_MAC2_16_47_WIDTH;                                               //[95:64]
        jl_uint64 mac3_0_31:SWCORE_LLDP_CONFIGURATION_OFFSET_MAC3_0_31_WIDTH;                                                //[127:96]
        jl_uint64 mac3_32_47:SWCORE_LLDP_CONFIGURATION_OFFSET_MAC3_32_47_WIDTH;                                             //[143:128]
        jl_uint64 eth:SWCORE_LLDP_CONFIGURATION_OFFSET_ETH_WIDTH;                                                           //[159:144]
        jl_uint64 portmask:SWCORE_LLDP_CONFIGURATION_OFFSET_PORTMASK_WIDTH;                                                 //[170:160]
        jl_uint64 reserved:SWCORE_LLDP_CONFIGURATION_OFFSET_RESERVED_WIDTH;                                                 //[191:171]
    } BF;
    jl_uint32 val[SWCORE_LLDP_CONFIGURATION_ENTRY_SIZE];
} SWCORE_LLDP_CONFIGURATION_t;

#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK                                                        ((jl_uint32)0x001202F8U)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_NUM                                                    ((jl_uint32)0x00000001U)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_ENTRY_SIZE                                                                 (16)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_0_31                                                      (0)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_0_31_WIDTH                                               (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_32_63                                                    (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_32_63_WIDTH                                              (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_64_95                                                    (64)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_64_95_WIDTH                                              (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_96_127                                                   (96)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_96_127_WIDTH                                             (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_128_159                                                 (128)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_128_159_WIDTH                                            (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_160_191                                                 (160)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_160_191_WIDTH                                            (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_192_207                                                 (192)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_192_207_WIDTH                                            (16)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_0_15                                                    (208)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_0_15_WIDTH                                               (16)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_16_47                                                   (224)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_16_47_WIDTH                                              (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_48_79                                                   (256)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_48_79_WIDTH                                              (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_80_111                                                  (288)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_80_111_WIDTH                                             (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_112_143                                                 (320)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_112_143_WIDTH                                            (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_144_175                                                 (352)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_144_175_WIDTH                                            (32)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_176_207                                                 (384)
#define SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_176_207_WIDTH                                            (32)
typedef union SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_u {
    struct __attribute__ ((packed)) {
        jl_uint64 mask_small_0_31:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_0_31_WIDTH;                           //[31: 0]
        jl_uint64 mask_small_32_63:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_32_63_WIDTH;                         //[63:32]
        jl_uint64 mask_small_64_95:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_64_95_WIDTH;                         //[95:64]
        jl_uint64 mask_small_96_127:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_96_127_WIDTH;                      //[127:96]
        jl_uint64 mask_small_128_159:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_128_159_WIDTH;                   //[159:128]
        jl_uint64 mask_small_160_191:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_160_191_WIDTH;                   //[191:160]
        jl_uint64 mask_small_192_207:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_SMALL_192_207_WIDTH;                   //[207:192]
        jl_uint64 mask_large_0_15:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_0_15_WIDTH;                         //[223:208]
        jl_uint64 mask_large_16_47:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_16_47_WIDTH;                       //[255:224]
        jl_uint64 mask_large_48_79:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_48_79_WIDTH;                       //[287:256]
        jl_uint64 mask_large_80_111:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_80_111_WIDTH;                     //[319:288]
        jl_uint64 mask_large_112_143:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_112_143_WIDTH;                   //[351:320]
        jl_uint64 mask_large_144_175:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_144_175_WIDTH;                   //[383:352]
        jl_uint64 mask_large_176_207:SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_OFFSET_MASK_LARGE_176_207_WIDTH;                   //[415:384]
    } BF;
    jl_uint32 val[SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_ENTRY_SIZE];
} SWCORE_CONFIGURABLE_ACL_SEARCH_MASK_t;

#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT                                                      ((jl_uint32)0x00120338U)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_NUM                                                  ((jl_uint32)0x0000002CU)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE                                                               (16)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_0_31                                                            (0)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_0_31_WIDTH                                                     (32)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_32_63                                                          (32)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_32_63_WIDTH                                                    (32)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_64_95                                                          (64)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_64_95_WIDTH                                                    (32)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_96_127                                                         (96)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_96_127_WIDTH                                                   (32)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_0_31                                                        (128)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_0_31_WIDTH                                                   (32)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_32_63                                                       (160)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_32_63_WIDTH                                                  (32)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_64_95                                                       (192)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_64_95_WIDTH                                                  (32)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_96_127                                                      (224)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_96_127_WIDTH                                                 (32)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_SA_OR_DA                                                         (256)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_SA_OR_DA_WIDTH                                                     (1)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IPV4_OR_IPV6                                                     (257)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IPV4_OR_IPV6_WIDTH                                                 (1)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE                                                            (258)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH                                                        (1)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE                                                            (259)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH                                                        (3)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED                                                         (262)
#define SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH                                                    (26)
typedef union SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_u {
    struct __attribute__ ((packed)) {
        jl_uint64 ip_0_31:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_0_31_WIDTH;                                         //[31: 0]
        jl_uint64 ip_32_63:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_32_63_WIDTH;                                       //[63:32]
        jl_uint64 ip_64_95:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_64_95_WIDTH;                                       //[95:64]
        jl_uint64 ip_96_127:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IP_96_127_WIDTH;                                    //[127:96]
        jl_uint64 mask_0_31:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_0_31_WIDTH;                                   //[159:128]
        jl_uint64 mask_32_63:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_32_63_WIDTH;                                 //[191:160]
        jl_uint64 mask_64_95:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_64_95_WIDTH;                                 //[223:192]
        jl_uint64 mask_96_127:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_MASK_96_127_WIDTH;                               //[255:224]
        jl_uint64 sa_or_da:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_SA_OR_DA_WIDTH;                                     //[256:256]
        jl_uint64 ipv4_or_ipv6:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_IPV4_OR_IPV6_WIDTH;                             //[257:257]
        jl_uint64 force:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_FORCE_WIDTH;                                           //[258:258]
        jl_uint64 queue:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_QUEUE_WIDTH;                                           //[261:259]
        jl_uint64 reserved:SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_OFFSET_RESERVED_WIDTH;                                     //[287:262]
    } BF;
    jl_uint32 val[SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_ENTRY_SIZE];
} SWCORE_IP_ADDRESS_TO_QUEUE_ASSIGNMENT_t;

#define SWCORE_CONFIGURABLE_ACL_TCAM                                                               ((jl_uint32)0x00120E38U)
#define SWCORE_CONFIGURABLE_ACL_TCAM_NUM                                                           ((jl_uint32)0x00000020U)
#define SWCORE_CONFIGURABLE_ACL_TCAM_ENTRY_SIZE                                                                        (16)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_VALID                                                                       (0)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_VALID_WIDTH                                                                 (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_0_30                                                                   (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_0_30_WIDTH                                                            (31)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_31_62                                                                 (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_31_62_WIDTH                                                           (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_63_94                                                                 (64)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_63_94_WIDTH                                                           (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_95_126                                                                (96)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_95_126_WIDTH                                                          (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_127_158                                                              (128)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_127_158_WIDTH                                                         (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_159_190                                                              (160)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_159_190_WIDTH                                                         (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_191_207                                                              (192)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_191_207_WIDTH                                                         (17)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_0_14                                                         (209)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_0_14_WIDTH                                                    (15)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_15_46                                                        (224)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_15_46_WIDTH                                                   (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_47_78                                                        (256)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_47_78_WIDTH                                                   (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_79_110                                                       (288)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_79_110_WIDTH                                                  (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_111_142                                                      (320)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_111_142_WIDTH                                                 (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_143_174                                                      (352)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_143_174_WIDTH                                                 (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_175_206                                                      (384)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_175_206_WIDTH                                                 (32)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_207                                                          (416)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_207_WIDTH                                                      (1)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_RESERVED                                                                  (417)
#define SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_RESERVED_WIDTH                                                             (31)
typedef union SWCORE_CONFIGURABLE_ACL_TCAM_u {
    struct __attribute__ ((packed)) {
        jl_uint64 valid:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_VALID_WIDTH;                                                      //[ 0: 0]
        jl_uint64 mask_0_30:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_0_30_WIDTH;                                              //[31: 1]
        jl_uint64 mask_31_62:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_31_62_WIDTH;                                            //[63:32]
        jl_uint64 mask_63_94:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_63_94_WIDTH;                                            //[95:64]
        jl_uint64 mask_95_126:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_95_126_WIDTH;                                         //[127:96]
        jl_uint64 mask_127_158:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_127_158_WIDTH;                                      //[159:128]
        jl_uint64 mask_159_190:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_159_190_WIDTH;                                      //[191:160]
        jl_uint64 mask_191_207:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_MASK_191_207_WIDTH;                                      //[208:192]
        jl_uint64 compare_data_0_14:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_0_14_WIDTH;                            //[223:209]
        jl_uint64 compare_data_15_46:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_15_46_WIDTH;                          //[255:224]
        jl_uint64 compare_data_47_78:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_47_78_WIDTH;                          //[287:256]
        jl_uint64 compare_data_79_110:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_79_110_WIDTH;                        //[319:288]
        jl_uint64 compare_data_111_142:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_111_142_WIDTH;                      //[351:320]
        jl_uint64 compare_data_143_174:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_143_174_WIDTH;                      //[383:352]
        jl_uint64 compare_data_175_206:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_175_206_WIDTH;                      //[415:384]
        jl_uint64 compare_data_207:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_COMPARE_DATA_207_WIDTH;                              //[416:416]
        jl_uint64 reserved:SWCORE_CONFIGURABLE_ACL_TCAM_OFFSET_RESERVED_WIDTH;                                              //[447:417]
    } BF;
    jl_uint32 val[SWCORE_CONFIGURABLE_ACL_TCAM_ENTRY_SIZE];
} SWCORE_CONFIGURABLE_ACL_TCAM_t;

#define SWCORE_SMON_SET_0_PACKET_COUNTER                                                           ((jl_uint32)0x00121638U)
#define SWCORE_SMON_SET_0_PACKET_COUNTER_NUM                                                       ((jl_uint32)0x00000008U)
#define SWCORE_SMON_SET_0_PACKET_COUNTER_ENTRY_SIZE                                                                     (1)
#define SWCORE_SMON_SET_0_PACKET_COUNTER_OFFSET_PACKETS                                                                 (0)
#define SWCORE_SMON_SET_0_PACKET_COUNTER_OFFSET_PACKETS_WIDTH                                                          (24)
#define SWCORE_SMON_SET_0_PACKET_COUNTER_OFFSET_RESERVED                                                               (24)
#define SWCORE_SMON_SET_0_PACKET_COUNTER_OFFSET_RESERVED_WIDTH                                                          (8)
typedef union SWCORE_SMON_SET_0_PACKET_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_SMON_SET_0_PACKET_COUNTER_OFFSET_PACKETS_WIDTH;                                              //[23: 0]
        jl_uint32 reserved:SWCORE_SMON_SET_0_PACKET_COUNTER_OFFSET_RESERVED_WIDTH;                                            //[31:24]
    } BF;
    jl_uint32 val[SWCORE_SMON_SET_0_PACKET_COUNTER_ENTRY_SIZE];
} SWCORE_SMON_SET_0_PACKET_COUNTER_t;

#define SWCORE_SMON_SET_1_PACKET_COUNTER                                                           ((jl_uint32)0x00121658U)
#define SWCORE_SMON_SET_1_PACKET_COUNTER_NUM                                                       ((jl_uint32)0x00000008U)
#define SWCORE_SMON_SET_1_PACKET_COUNTER_ENTRY_SIZE                                                                     (1)
#define SWCORE_SMON_SET_1_PACKET_COUNTER_OFFSET_PACKETS                                                                 (0)
#define SWCORE_SMON_SET_1_PACKET_COUNTER_OFFSET_PACKETS_WIDTH                                                          (24)
#define SWCORE_SMON_SET_1_PACKET_COUNTER_OFFSET_RESERVED                                                               (24)
#define SWCORE_SMON_SET_1_PACKET_COUNTER_OFFSET_RESERVED_WIDTH                                                          (8)
typedef union SWCORE_SMON_SET_1_PACKET_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_SMON_SET_1_PACKET_COUNTER_OFFSET_PACKETS_WIDTH;                                              //[23: 0]
        jl_uint32 reserved:SWCORE_SMON_SET_1_PACKET_COUNTER_OFFSET_RESERVED_WIDTH;                                            //[31:24]
    } BF;
    jl_uint32 val[SWCORE_SMON_SET_1_PACKET_COUNTER_ENTRY_SIZE];
} SWCORE_SMON_SET_1_PACKET_COUNTER_t;

#define SWCORE_SMON_SET_0_BYTE_COUNTER                                                             ((jl_uint32)0x00121678U)
#define SWCORE_SMON_SET_0_BYTE_COUNTER_NUM                                                         ((jl_uint32)0x00000008U)
#define SWCORE_SMON_SET_0_BYTE_COUNTER_ENTRY_SIZE                                                                       (1)
#define SWCORE_SMON_SET_0_BYTE_COUNTER_OFFSET_BYTES                                                                     (0)
#define SWCORE_SMON_SET_0_BYTE_COUNTER_OFFSET_BYTES_WIDTH                                                              (24)
#define SWCORE_SMON_SET_0_BYTE_COUNTER_OFFSET_RESERVED                                                                 (24)
#define SWCORE_SMON_SET_0_BYTE_COUNTER_OFFSET_RESERVED_WIDTH                                                            (8)
typedef union SWCORE_SMON_SET_0_BYTE_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bytes:SWCORE_SMON_SET_0_BYTE_COUNTER_OFFSET_BYTES_WIDTH;                                                    //[23: 0]
        jl_uint32 reserved:SWCORE_SMON_SET_0_BYTE_COUNTER_OFFSET_RESERVED_WIDTH;                                              //[31:24]
    } BF;
    jl_uint32 val[SWCORE_SMON_SET_0_BYTE_COUNTER_ENTRY_SIZE];
} SWCORE_SMON_SET_0_BYTE_COUNTER_t;

#define SWCORE_SMON_SET_1_BYTE_COUNTER                                                             ((jl_uint32)0x00121698U)
#define SWCORE_SMON_SET_1_BYTE_COUNTER_NUM                                                         ((jl_uint32)0x00000008U)
#define SWCORE_SMON_SET_1_BYTE_COUNTER_ENTRY_SIZE                                                                       (1)
#define SWCORE_SMON_SET_1_BYTE_COUNTER_OFFSET_BYTES                                                                     (0)
#define SWCORE_SMON_SET_1_BYTE_COUNTER_OFFSET_BYTES_WIDTH                                                              (24)
#define SWCORE_SMON_SET_1_BYTE_COUNTER_OFFSET_RESERVED                                                                 (24)
#define SWCORE_SMON_SET_1_BYTE_COUNTER_OFFSET_RESERVED_WIDTH                                                            (8)
typedef union SWCORE_SMON_SET_1_BYTE_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bytes:SWCORE_SMON_SET_1_BYTE_COUNTER_OFFSET_BYTES_WIDTH;                                                    //[23: 0]
        jl_uint32 reserved:SWCORE_SMON_SET_1_BYTE_COUNTER_OFFSET_RESERVED_WIDTH;                                              //[31:24]
    } BF;
    jl_uint32 val[SWCORE_SMON_SET_1_BYTE_COUNTER_ENTRY_SIZE];
} SWCORE_SMON_SET_1_BYTE_COUNTER_t;

#define SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER                                              ((jl_uint32)0x001216B8U)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER_NUM                                          ((jl_uint32)0x00000020U)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER_ENTRY_SIZE                                                        (1)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER_OFFSET_PACKETS                                                    (0)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER_OFFSET_PACKETS_WIDTH                                             (24)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER_OFFSET_RESERVED                                                  (24)
#define SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER_OFFSET_RESERVED_WIDTH                                             (8)
typedef union SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER_OFFSET_PACKETS_WIDTH;                                 //[23: 0]
        jl_uint32 reserved:SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER_OFFSET_RESERVED_WIDTH;                               //[31:24]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER_ENTRY_SIZE];
} SWCORE_INGRESS_CONFIGURABLE_ACL_MATCH_COUNTER_t;

#define SWCORE_QUEUE_OFF_DROP                                                                      ((jl_uint32)0x00121738U)
#define SWCORE_QUEUE_OFF_DROP_NUM                                                                  ((jl_uint32)0x0000000BU)
#define SWCORE_QUEUE_OFF_DROP_ENTRY_SIZE                                                                                (1)
#define SWCORE_QUEUE_OFF_DROP_OFFSET_PACKETS                                                                            (0)
#define SWCORE_QUEUE_OFF_DROP_OFFSET_PACKETS_WIDTH                                                                     (24)
#define SWCORE_QUEUE_OFF_DROP_OFFSET_RESERVED                                                                          (24)
#define SWCORE_QUEUE_OFF_DROP_OFFSET_RESERVED_WIDTH                                                                     (8)
typedef union SWCORE_QUEUE_OFF_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_QUEUE_OFF_DROP_OFFSET_PACKETS_WIDTH;                                                         //[23: 0]
        jl_uint32 reserved:SWCORE_QUEUE_OFF_DROP_OFFSET_RESERVED_WIDTH;                                                       //[31:24]
    } BF;
    jl_uint32 val[SWCORE_QUEUE_OFF_DROP_ENTRY_SIZE];
} SWCORE_QUEUE_OFF_DROP_t;

#define SWCORE_EGRESS_SPANNING_TREE_DROP                                                           ((jl_uint32)0x00121764U)
#define SWCORE_EGRESS_SPANNING_TREE_DROP_NUM                                                       ((jl_uint32)0x0000000BU)
#define SWCORE_EGRESS_SPANNING_TREE_DROP_ENTRY_SIZE                                                                     (1)
#define SWCORE_EGRESS_SPANNING_TREE_DROP_OFFSET_PACKETS                                                                 (0)
#define SWCORE_EGRESS_SPANNING_TREE_DROP_OFFSET_PACKETS_WIDTH                                                          (24)
#define SWCORE_EGRESS_SPANNING_TREE_DROP_OFFSET_RESERVED                                                               (24)
#define SWCORE_EGRESS_SPANNING_TREE_DROP_OFFSET_RESERVED_WIDTH                                                          (8)
typedef union SWCORE_EGRESS_SPANNING_TREE_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_EGRESS_SPANNING_TREE_DROP_OFFSET_PACKETS_WIDTH;                                              //[23: 0]
        jl_uint32 reserved:SWCORE_EGRESS_SPANNING_TREE_DROP_OFFSET_RESERVED_WIDTH;                                            //[31:24]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_SPANNING_TREE_DROP_ENTRY_SIZE];
} SWCORE_EGRESS_SPANNING_TREE_DROP_t;

#define SWCORE_MBSC_DROP                                                                           ((jl_uint32)0x00121790U)
#define SWCORE_MBSC_DROP_NUM                                                                       ((jl_uint32)0x0000000BU)
#define SWCORE_MBSC_DROP_ENTRY_SIZE                                                                                     (1)
#define SWCORE_MBSC_DROP_OFFSET_PACKETS                                                                                 (0)
#define SWCORE_MBSC_DROP_OFFSET_PACKETS_WIDTH                                                                          (24)
#define SWCORE_MBSC_DROP_OFFSET_RESERVED                                                                               (24)
#define SWCORE_MBSC_DROP_OFFSET_RESERVED_WIDTH                                                                          (8)
typedef union SWCORE_MBSC_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_MBSC_DROP_OFFSET_PACKETS_WIDTH;                                                              //[23: 0]
        jl_uint32 reserved:SWCORE_MBSC_DROP_OFFSET_RESERVED_WIDTH;                                                            //[31:24]
    } BF;
    jl_uint32 val[SWCORE_MBSC_DROP_ENTRY_SIZE];
} SWCORE_MBSC_DROP_t;

#define SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP                                                ((jl_uint32)0x001217BCU)
#define SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP_NUM                                            ((jl_uint32)0x0000000BU)
#define SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP_ENTRY_SIZE                                                          (1)
#define SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP_OFFSET_PACKETS                                                      (0)
#define SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP_OFFSET_PACKETS_WIDTH                                               (24)
#define SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP_OFFSET_RESERVED                                                    (24)
#define SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP_OFFSET_RESERVED_WIDTH                                               (8)
typedef union SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP_OFFSET_PACKETS_WIDTH;                                   //[23: 0]
        jl_uint32 reserved:SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP_OFFSET_RESERVED_WIDTH;                                 //[31:24]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP_ENTRY_SIZE];
} SWCORE_INGRESS_EGRESS_PACKET_FILTERING_DROP_t;

#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN                                                   ((jl_uint32)0x001217E8U)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_NUM                                               ((jl_uint32)0x00000001U)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_ENTRY_SIZE                                                             (1)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_OFFSET_GLOBAL_MARGIN                                                   (0)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_OFFSET_GLOBAL_MARGIN_WIDTH                                            (10)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_OFFSET_FFA_MARGIN                                                     (10)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_OFFSET_FFA_MARGIN_WIDTH                                               (10)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_OFFSET_RESERVED                                                       (20)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_OFFSET_RESERVED_WIDTH                                                 (12)
typedef union SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_u {
    struct __attribute__ ((packed)) {
        jl_uint32 global_margin:SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_OFFSET_GLOBAL_MARGIN_WIDTH;                          //[ 9: 0]
        jl_uint32 ffa_margin:SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_OFFSET_FFA_MARGIN_WIDTH;                                //[19:10]
        jl_uint32 reserved:SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_OFFSET_RESERVED_WIDTH;                                    //[31:20]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_ENTRY_SIZE];
} SWCORE_EGRESS_RESOURCE_MANAGEMENT_MARGIN_t;

#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR                                      ((jl_uint32)0x001217ECU)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR_NUM                                  ((jl_uint32)0x00000001U)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR_ENTRY_SIZE                                                (1)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR_OFFSET_FFA_ERROR                                          (0)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR_OFFSET_FFA_ERROR_WIDTH                                    (1)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR_OFFSET_RESERVED                                           (1)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR_OFFSET_RESERVED_WIDTH                                    (31)
typedef union SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR_u {
    struct __attribute__ ((packed)) {
        jl_uint32 ffa_error:SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR_OFFSET_FFA_ERROR_WIDTH;                     //[ 0: 0]
        jl_uint32 reserved:SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR_OFFSET_RESERVED_WIDTH;                       //[31: 1]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR_ENTRY_SIZE];
} SWCORE_EGRESS_RESOURCE_MANAGEMENT_CONFIGURATION_ERROR_t;

#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE                                                     ((jl_uint32)0x001217F0U)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_NUM                                                 ((jl_uint32)0x0000000CU)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_ENTRY_SIZE                                                               (1)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_MODE                                                              (0)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_MODE_WIDTH                                                        (1)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_EQL_PTR                                                           (1)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_EQL_PTR_WIDTH                                                     (2)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_EQG_PTR                                                           (3)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_EQG_PTR_WIDTH                                                     (2)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_RESERVED                                                          (5)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_RESERVED_WIDTH                                                   (27)
typedef union SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 mode:SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_MODE_WIDTH;                                              //[ 0: 0]
        jl_uint32 eql_ptr:SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_EQL_PTR_WIDTH;                                        //[ 2: 1]
        jl_uint32 eqg_ptr:SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_EQG_PTR_WIDTH;                                        //[ 4: 3]
        jl_uint32 reserved:SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET_RESERVED_WIDTH;                                      //[31: 5]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_ENTRY_SIZE];
} SWCORE_EGRESS_RESOURCE_MANAGEMENT_MODE_t;

#define SWCORE_EGRESS_QUEUE_GUARANTEE_SET                                                          ((jl_uint32)0x00121820U)
#define SWCORE_EGRESS_QUEUE_GUARANTEE_SET_NUM                                                      ((jl_uint32)0x00000004U)
#define SWCORE_EGRESS_QUEUE_GUARANTEE_SET_ENTRY_SIZE                                                                    (1)
#define SWCORE_EGRESS_QUEUE_GUARANTEE_SET_OFFSET_GUARANTEE                                                              (0)
#define SWCORE_EGRESS_QUEUE_GUARANTEE_SET_OFFSET_GUARANTEE_WIDTH                                                       (10)
#define SWCORE_EGRESS_QUEUE_GUARANTEE_SET_OFFSET_RESERVED                                                              (10)
#define SWCORE_EGRESS_QUEUE_GUARANTEE_SET_OFFSET_RESERVED_WIDTH                                                        (22)
typedef union SWCORE_EGRESS_QUEUE_GUARANTEE_SET_u {
    struct __attribute__ ((packed)) {
        jl_uint32 guarantee:SWCORE_EGRESS_QUEUE_GUARANTEE_SET_OFFSET_GUARANTEE_WIDTH;                                         //[ 9: 0]
        jl_uint32 reserved:SWCORE_EGRESS_QUEUE_GUARANTEE_SET_OFFSET_RESERVED_WIDTH;                                           //[31:10]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_QUEUE_GUARANTEE_SET_ENTRY_SIZE];
} SWCORE_EGRESS_QUEUE_GUARANTEE_SET_t;

#define SWCORE_RESOURCE_LIMITER_SET                                                                ((jl_uint32)0x00121830U)
#define SWCORE_RESOURCE_LIMITER_SET_NUM                                                            ((jl_uint32)0x00000004U)
#define SWCORE_RESOURCE_LIMITER_SET_ENTRY_SIZE                                                                          (1)
#define SWCORE_RESOURCE_LIMITER_SET_OFFSET_XON                                                                          (0)
#define SWCORE_RESOURCE_LIMITER_SET_OFFSET_XON_WIDTH                                                                   (10)
#define SWCORE_RESOURCE_LIMITER_SET_OFFSET_THRESHOLD                                                                   (10)
#define SWCORE_RESOURCE_LIMITER_SET_OFFSET_THRESHOLD_WIDTH                                                             (10)
#define SWCORE_RESOURCE_LIMITER_SET_OFFSET_RESERVED                                                                    (20)
#define SWCORE_RESOURCE_LIMITER_SET_OFFSET_RESERVED_WIDTH                                                              (12)
typedef union SWCORE_RESOURCE_LIMITER_SET_u {
    struct __attribute__ ((packed)) {
        jl_uint32 xon:SWCORE_RESOURCE_LIMITER_SET_OFFSET_XON_WIDTH;                                                           //[ 9: 0]
        jl_uint32 threshold:SWCORE_RESOURCE_LIMITER_SET_OFFSET_THRESHOLD_WIDTH;                                               //[19:10]
        jl_uint32 reserved:SWCORE_RESOURCE_LIMITER_SET_OFFSET_RESERVED_WIDTH;                                                 //[31:20]
    } BF;
    jl_uint32 val[SWCORE_RESOURCE_LIMITER_SET_ENTRY_SIZE];
} SWCORE_RESOURCE_LIMITER_SET_t;

#define SWCORE_RESOURCE_LIMITER_HARD_LIMITS                                                        ((jl_uint32)0x00121840U)
#define SWCORE_RESOURCE_LIMITER_HARD_LIMITS_NUM                                                    ((jl_uint32)0x00000004U)
#define SWCORE_RESOURCE_LIMITER_HARD_LIMITS_ENTRY_SIZE                                                                  (1)
#define SWCORE_RESOURCE_LIMITER_HARD_LIMITS_OFFSET_LIMIT1                                                               (0)
#define SWCORE_RESOURCE_LIMITER_HARD_LIMITS_OFFSET_LIMIT1_WIDTH                                                        (10)
#define SWCORE_RESOURCE_LIMITER_HARD_LIMITS_OFFSET_LIMIT0                                                              (10)
#define SWCORE_RESOURCE_LIMITER_HARD_LIMITS_OFFSET_LIMIT0_WIDTH                                                        (10)
#define SWCORE_RESOURCE_LIMITER_HARD_LIMITS_OFFSET_RESERVED                                                            (20)
#define SWCORE_RESOURCE_LIMITER_HARD_LIMITS_OFFSET_RESERVED_WIDTH                                                      (12)
typedef union SWCORE_RESOURCE_LIMITER_HARD_LIMITS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 limit1:SWCORE_RESOURCE_LIMITER_HARD_LIMITS_OFFSET_LIMIT1_WIDTH;                                             //[ 9: 0]
        jl_uint32 limit0:SWCORE_RESOURCE_LIMITER_HARD_LIMITS_OFFSET_LIMIT0_WIDTH;                                             //[19:10]
        jl_uint32 reserved:SWCORE_RESOURCE_LIMITER_HARD_LIMITS_OFFSET_RESERVED_WIDTH;                                         //[31:20]
    } BF;
    jl_uint32 val[SWCORE_RESOURCE_LIMITER_HARD_LIMITS_ENTRY_SIZE];
} SWCORE_RESOURCE_LIMITER_HARD_LIMITS_t;

#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP                                                     ((jl_uint32)0x00121850U)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP_NUM                                                 ((jl_uint32)0x0000000BU)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP_ENTRY_SIZE                                                               (1)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP_OFFSET_PACKETS                                                           (0)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP_OFFSET_PACKETS_WIDTH                                                    (24)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP_OFFSET_RESERVED                                                         (24)
#define SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP_OFFSET_RESERVED_WIDTH                                                    (8)
typedef union SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP_OFFSET_PACKETS_WIDTH;                                        //[23: 0]
        jl_uint32 reserved:SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP_OFFSET_RESERVED_WIDTH;                                      //[31:24]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP_ENTRY_SIZE];
} SWCORE_EGRESS_RESOURCE_MANAGEMENT_DROP_t;

#define SWCORE_PACKET_BUFFER_STATUS                                                                ((jl_uint32)0x0012187CU)
#define SWCORE_PACKET_BUFFER_STATUS_NUM                                                            ((jl_uint32)0x00000001U)
#define SWCORE_PACKET_BUFFER_STATUS_ENTRY_SIZE                                                                          (1)
#define SWCORE_PACKET_BUFFER_STATUS_OFFSET_EMPTY                                                                        (0)
#define SWCORE_PACKET_BUFFER_STATUS_OFFSET_EMPTY_WIDTH                                                                 (11)
#define SWCORE_PACKET_BUFFER_STATUS_OFFSET_RESERVED                                                                    (11)
#define SWCORE_PACKET_BUFFER_STATUS_OFFSET_RESERVED_WIDTH                                                              (21)
typedef union SWCORE_PACKET_BUFFER_STATUS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 empty:SWCORE_PACKET_BUFFER_STATUS_OFFSET_EMPTY_WIDTH;                                                       //[10: 0]
        jl_uint32 reserved:SWCORE_PACKET_BUFFER_STATUS_OFFSET_RESERVED_WIDTH;                                                 //[31:11]
    } BF;
    jl_uint32 val[SWCORE_PACKET_BUFFER_STATUS_ENTRY_SIZE];
} SWCORE_PACKET_BUFFER_STATUS_t;

#define SWCORE_BUFFER_OVERFLOW_DROP                                                                ((jl_uint32)0x00121880U)
#define SWCORE_BUFFER_OVERFLOW_DROP_NUM                                                            ((jl_uint32)0x00000001U)
#define SWCORE_BUFFER_OVERFLOW_DROP_ENTRY_SIZE                                                                          (1)
#define SWCORE_BUFFER_OVERFLOW_DROP_OFFSET_PACKETS                                                                      (0)
#define SWCORE_BUFFER_OVERFLOW_DROP_OFFSET_PACKETS_WIDTH                                                               (24)
#define SWCORE_BUFFER_OVERFLOW_DROP_OFFSET_RESERVED                                                                    (24)
#define SWCORE_BUFFER_OVERFLOW_DROP_OFFSET_RESERVED_WIDTH                                                               (8)
typedef union SWCORE_BUFFER_OVERFLOW_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_BUFFER_OVERFLOW_DROP_OFFSET_PACKETS_WIDTH;                                                   //[23: 0]
        jl_uint32 reserved:SWCORE_BUFFER_OVERFLOW_DROP_OFFSET_RESERVED_WIDTH;                                                 //[31:24]
    } BF;
    jl_uint32 val[SWCORE_BUFFER_OVERFLOW_DROP_ENTRY_SIZE];
} SWCORE_BUFFER_OVERFLOW_DROP_t;

#define SWCORE_INGRESS_RESOURCE_MANAGER_DROP                                                       ((jl_uint32)0x00121884U)
#define SWCORE_INGRESS_RESOURCE_MANAGER_DROP_NUM                                                   ((jl_uint32)0x00000001U)
#define SWCORE_INGRESS_RESOURCE_MANAGER_DROP_ENTRY_SIZE                                                                 (1)
#define SWCORE_INGRESS_RESOURCE_MANAGER_DROP_OFFSET_PACKETS                                                             (0)
#define SWCORE_INGRESS_RESOURCE_MANAGER_DROP_OFFSET_PACKETS_WIDTH                                                      (24)
#define SWCORE_INGRESS_RESOURCE_MANAGER_DROP_OFFSET_RESERVED                                                           (24)
#define SWCORE_INGRESS_RESOURCE_MANAGER_DROP_OFFSET_RESERVED_WIDTH                                                      (8)
typedef union SWCORE_INGRESS_RESOURCE_MANAGER_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_INGRESS_RESOURCE_MANAGER_DROP_OFFSET_PACKETS_WIDTH;                                          //[23: 0]
        jl_uint32 reserved:SWCORE_INGRESS_RESOURCE_MANAGER_DROP_OFFSET_RESERVED_WIDTH;                                        //[31:24]
    } BF;
    jl_uint32 val[SWCORE_INGRESS_RESOURCE_MANAGER_DROP_ENTRY_SIZE];
} SWCORE_INGRESS_RESOURCE_MANAGER_DROP_t;

#define SWCORE_MAP_QUEUE_TO_PRIORITY                                                               ((jl_uint32)0x00121888U)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_NUM                                                           ((jl_uint32)0x0000000BU)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_ENTRY_SIZE                                                                         (1)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO0                                                                       (0)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO0_WIDTH                                                                 (3)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO1                                                                       (3)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO1_WIDTH                                                                 (3)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO2                                                                       (6)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO2_WIDTH                                                                 (3)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO3                                                                       (9)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO3_WIDTH                                                                 (3)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO4                                                                      (12)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO4_WIDTH                                                                 (3)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO5                                                                      (15)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO5_WIDTH                                                                 (3)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO6                                                                      (18)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO6_WIDTH                                                                 (3)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO7                                                                      (21)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO7_WIDTH                                                                 (3)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_RESERVED                                                                   (24)
#define SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_RESERVED_WIDTH                                                              (8)
typedef union SWCORE_MAP_QUEUE_TO_PRIORITY_u {
    struct __attribute__ ((packed)) {
        jl_uint32 prio0:SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO0_WIDTH;                                                      //[ 2: 0]
        jl_uint32 prio1:SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO1_WIDTH;                                                      //[ 5: 3]
        jl_uint32 prio2:SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO2_WIDTH;                                                      //[ 8: 6]
        jl_uint32 prio3:SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO3_WIDTH;                                                      //[11: 9]
        jl_uint32 prio4:SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO4_WIDTH;                                                      //[14:12]
        jl_uint32 prio5:SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO5_WIDTH;                                                      //[17:15]
        jl_uint32 prio6:SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO6_WIDTH;                                                      //[20:18]
        jl_uint32 prio7:SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_PRIO7_WIDTH;                                                      //[23:21]
        jl_uint32 reserved:SWCORE_MAP_QUEUE_TO_PRIORITY_OFFSET_RESERVED_WIDTH;                                                //[31:24]
    } BF;
    jl_uint32 val[SWCORE_MAP_QUEUE_TO_PRIORITY_ENTRY_SIZE];
} SWCORE_MAP_QUEUE_TO_PRIORITY_t;

#define SWCORE_RE_QUEUE_OVERFLOW_DROP                                                              ((jl_uint32)0x001218B4U)
#define SWCORE_RE_QUEUE_OVERFLOW_DROP_NUM                                                          ((jl_uint32)0x00000001U)
#define SWCORE_RE_QUEUE_OVERFLOW_DROP_ENTRY_SIZE                                                                        (1)
#define SWCORE_RE_QUEUE_OVERFLOW_DROP_OFFSET_PACKETS                                                                    (0)
#define SWCORE_RE_QUEUE_OVERFLOW_DROP_OFFSET_PACKETS_WIDTH                                                             (24)
#define SWCORE_RE_QUEUE_OVERFLOW_DROP_OFFSET_RESERVED                                                                  (24)
#define SWCORE_RE_QUEUE_OVERFLOW_DROP_OFFSET_RESERVED_WIDTH                                                             (8)
typedef union SWCORE_RE_QUEUE_OVERFLOW_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_RE_QUEUE_OVERFLOW_DROP_OFFSET_PACKETS_WIDTH;                                                 //[23: 0]
        jl_uint32 reserved:SWCORE_RE_QUEUE_OVERFLOW_DROP_OFFSET_RESERVED_WIDTH;                                               //[31:24]
    } BF;
    jl_uint32 val[SWCORE_RE_QUEUE_OVERFLOW_DROP_ENTRY_SIZE];
} SWCORE_RE_QUEUE_OVERFLOW_DROP_t;

#define SWCORE_PORT_RESERVED                                                                       ((jl_uint32)0x001218B8U)
#define SWCORE_PORT_RESERVED_NUM                                                                   ((jl_uint32)0x0000000BU)
#define SWCORE_PORT_RESERVED_ENTRY_SIZE                                                                                 (1)
#define SWCORE_PORT_RESERVED_OFFSET_CELLS                                                                               (0)
#define SWCORE_PORT_RESERVED_OFFSET_CELLS_WIDTH                                                                        (10)
#define SWCORE_PORT_RESERVED_OFFSET_RESERVED                                                                           (10)
#define SWCORE_PORT_RESERVED_OFFSET_RESERVED_WIDTH                                                                     (22)
typedef union SWCORE_PORT_RESERVED_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cells:SWCORE_PORT_RESERVED_OFFSET_CELLS_WIDTH;                                                              //[ 9: 0]
        jl_uint32 reserved:SWCORE_PORT_RESERVED_OFFSET_RESERVED_WIDTH;                                                        //[31:10]
    } BF;
    jl_uint32 val[SWCORE_PORT_RESERVED_ENTRY_SIZE];
} SWCORE_PORT_RESERVED_t;

#define SWCORE_PORT_USED                                                                           ((jl_uint32)0x001218E4U)
#define SWCORE_PORT_USED_NUM                                                                       ((jl_uint32)0x0000000BU)
#define SWCORE_PORT_USED_ENTRY_SIZE                                                                                     (1)
#define SWCORE_PORT_USED_OFFSET_CELLS                                                                                   (0)
#define SWCORE_PORT_USED_OFFSET_CELLS_WIDTH                                                                            (10)
#define SWCORE_PORT_USED_OFFSET_RESERVED                                                                               (10)
#define SWCORE_PORT_USED_OFFSET_RESERVED_WIDTH                                                                         (22)
typedef union SWCORE_PORT_USED_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cells:SWCORE_PORT_USED_OFFSET_CELLS_WIDTH;                                                                  //[ 9: 0]
        jl_uint32 reserved:SWCORE_PORT_USED_OFFSET_RESERVED_WIDTH;                                                            //[31:10]
    } BF;
    jl_uint32 val[SWCORE_PORT_USED_ENTRY_SIZE];
} SWCORE_PORT_USED_t;

#define SWCORE_FFA_USED                                                                            ((jl_uint32)0x00121910U)
#define SWCORE_FFA_USED_NUM                                                                        ((jl_uint32)0x00000001U)
#define SWCORE_FFA_USED_ENTRY_SIZE                                                                                      (1)
#define SWCORE_FFA_USED_OFFSET_CELLS                                                                                    (0)
#define SWCORE_FFA_USED_OFFSET_CELLS_WIDTH                                                                             (10)
#define SWCORE_FFA_USED_OFFSET_RESERVED                                                                                (10)
#define SWCORE_FFA_USED_OFFSET_RESERVED_WIDTH                                                                          (22)
typedef union SWCORE_FFA_USED_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cells:SWCORE_FFA_USED_OFFSET_CELLS_WIDTH;                                                                   //[ 9: 0]
        jl_uint32 reserved:SWCORE_FFA_USED_OFFSET_RESERVED_WIDTH;                                                             //[31:10]
    } BF;
    jl_uint32 val[SWCORE_FFA_USED_ENTRY_SIZE];
} SWCORE_FFA_USED_t;

#define SWCORE_PORT_PAUSE_SETTINGS                                                                 ((jl_uint32)0x00121914U)
#define SWCORE_PORT_PAUSE_SETTINGS_NUM                                                             ((jl_uint32)0x0000000BU)
#define SWCORE_PORT_PAUSE_SETTINGS_ENTRY_SIZE                                                                           (1)
#define SWCORE_PORT_PAUSE_SETTINGS_OFFSET_ENABLE                                                                        (0)
#define SWCORE_PORT_PAUSE_SETTINGS_OFFSET_ENABLE_WIDTH                                                                  (1)
#define SWCORE_PORT_PAUSE_SETTINGS_OFFSET_FORCE                                                                         (1)
#define SWCORE_PORT_PAUSE_SETTINGS_OFFSET_FORCE_WIDTH                                                                   (1)
#define SWCORE_PORT_PAUSE_SETTINGS_OFFSET_PATTERN                                                                       (2)
#define SWCORE_PORT_PAUSE_SETTINGS_OFFSET_PATTERN_WIDTH                                                                 (1)
#define SWCORE_PORT_PAUSE_SETTINGS_OFFSET_RESERVED                                                                      (3)
#define SWCORE_PORT_PAUSE_SETTINGS_OFFSET_RESERVED_WIDTH                                                               (29)
typedef union SWCORE_PORT_PAUSE_SETTINGS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 enable:SWCORE_PORT_PAUSE_SETTINGS_OFFSET_ENABLE_WIDTH;                                                      //[ 0: 0]
        jl_uint32 force:SWCORE_PORT_PAUSE_SETTINGS_OFFSET_FORCE_WIDTH;                                                        //[ 1: 1]
        jl_uint32 pattern:SWCORE_PORT_PAUSE_SETTINGS_OFFSET_PATTERN_WIDTH;                                                    //[ 2: 2]
        jl_uint32 reserved:SWCORE_PORT_PAUSE_SETTINGS_OFFSET_RESERVED_WIDTH;                                                  //[31: 3]
    } BF;
    jl_uint32 val[SWCORE_PORT_PAUSE_SETTINGS_ENTRY_SIZE];
} SWCORE_PORT_PAUSE_SETTINGS_t;

#define SWCORE_PORT_TAIL_DROP_SETTINGS                                                             ((jl_uint32)0x00121940U)
#define SWCORE_PORT_TAIL_DROP_SETTINGS_NUM                                                         ((jl_uint32)0x0000000BU)
#define SWCORE_PORT_TAIL_DROP_SETTINGS_ENTRY_SIZE                                                                       (1)
#define SWCORE_PORT_TAIL_DROP_SETTINGS_OFFSET_ENABLE                                                                    (0)
#define SWCORE_PORT_TAIL_DROP_SETTINGS_OFFSET_ENABLE_WIDTH                                                              (1)
#define SWCORE_PORT_TAIL_DROP_SETTINGS_OFFSET_RESERVED                                                                  (1)
#define SWCORE_PORT_TAIL_DROP_SETTINGS_OFFSET_RESERVED_WIDTH                                                           (31)
typedef union SWCORE_PORT_TAIL_DROP_SETTINGS_u {
    struct __attribute__ ((packed)) {
        jl_uint32 enable:SWCORE_PORT_TAIL_DROP_SETTINGS_OFFSET_ENABLE_WIDTH;                                                  //[ 0: 0]
        jl_uint32 reserved:SWCORE_PORT_TAIL_DROP_SETTINGS_OFFSET_RESERVED_WIDTH;                                              //[31: 1]
    } BF;
    jl_uint32 val[SWCORE_PORT_TAIL_DROP_SETTINGS_ENTRY_SIZE];
} SWCORE_PORT_TAIL_DROP_SETTINGS_t;

#define SWCORE_XON_FFA_THRESHOLD                                                                   ((jl_uint32)0x0012196CU)
#define SWCORE_XON_FFA_THRESHOLD_NUM                                                               ((jl_uint32)0x00000001U)
#define SWCORE_XON_FFA_THRESHOLD_ENTRY_SIZE                                                                             (1)
#define SWCORE_XON_FFA_THRESHOLD_OFFSET_CELLS                                                                           (0)
#define SWCORE_XON_FFA_THRESHOLD_OFFSET_CELLS_WIDTH                                                                    (10)
#define SWCORE_XON_FFA_THRESHOLD_OFFSET_RESERVED                                                                       (10)
#define SWCORE_XON_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH                                                                 (22)
typedef union SWCORE_XON_FFA_THRESHOLD_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cells:SWCORE_XON_FFA_THRESHOLD_OFFSET_CELLS_WIDTH;                                                          //[ 9: 0]
        jl_uint32 reserved:SWCORE_XON_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH;                                                    //[31:10]
    } BF;
    jl_uint32 val[SWCORE_XON_FFA_THRESHOLD_ENTRY_SIZE];
} SWCORE_XON_FFA_THRESHOLD_t;

#define SWCORE_XOFF_FFA_THRESHOLD                                                                  ((jl_uint32)0x00121970U)
#define SWCORE_XOFF_FFA_THRESHOLD_NUM                                                              ((jl_uint32)0x00000001U)
#define SWCORE_XOFF_FFA_THRESHOLD_ENTRY_SIZE                                                                            (1)
#define SWCORE_XOFF_FFA_THRESHOLD_OFFSET_CELLS                                                                          (0)
#define SWCORE_XOFF_FFA_THRESHOLD_OFFSET_CELLS_WIDTH                                                                   (10)
#define SWCORE_XOFF_FFA_THRESHOLD_OFFSET_ENABLE                                                                        (10)
#define SWCORE_XOFF_FFA_THRESHOLD_OFFSET_ENABLE_WIDTH                                                                   (1)
#define SWCORE_XOFF_FFA_THRESHOLD_OFFSET_TRIP                                                                          (11)
#define SWCORE_XOFF_FFA_THRESHOLD_OFFSET_TRIP_WIDTH                                                                     (1)
#define SWCORE_XOFF_FFA_THRESHOLD_OFFSET_RESERVED                                                                      (12)
#define SWCORE_XOFF_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH                                                                (20)
typedef union SWCORE_XOFF_FFA_THRESHOLD_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cells:SWCORE_XOFF_FFA_THRESHOLD_OFFSET_CELLS_WIDTH;                                                         //[ 9: 0]
        jl_uint32 enable:SWCORE_XOFF_FFA_THRESHOLD_OFFSET_ENABLE_WIDTH;                                                       //[10:10]
        jl_uint32 trip:SWCORE_XOFF_FFA_THRESHOLD_OFFSET_TRIP_WIDTH;                                                           //[11:11]
        jl_uint32 reserved:SWCORE_XOFF_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH;                                                   //[31:12]
    } BF;
    jl_uint32 val[SWCORE_XOFF_FFA_THRESHOLD_ENTRY_SIZE];
} SWCORE_XOFF_FFA_THRESHOLD_t;

#define SWCORE_TAIL_DROP_FFA_THRESHOLD                                                             ((jl_uint32)0x00121974U)
#define SWCORE_TAIL_DROP_FFA_THRESHOLD_NUM                                                         ((jl_uint32)0x00000001U)
#define SWCORE_TAIL_DROP_FFA_THRESHOLD_ENTRY_SIZE                                                                       (1)
#define SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_CELLS                                                                     (0)
#define SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_CELLS_WIDTH                                                              (10)
#define SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_ENABLE                                                                   (10)
#define SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_ENABLE_WIDTH                                                              (1)
#define SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_TRIP                                                                     (11)
#define SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_TRIP_WIDTH                                                                (1)
#define SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_RESERVED                                                                 (12)
#define SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH                                                           (20)
typedef union SWCORE_TAIL_DROP_FFA_THRESHOLD_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cells:SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_CELLS_WIDTH;                                                    //[ 9: 0]
        jl_uint32 enable:SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_ENABLE_WIDTH;                                                  //[10:10]
        jl_uint32 trip:SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_TRIP_WIDTH;                                                      //[11:11]
        jl_uint32 reserved:SWCORE_TAIL_DROP_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH;                                              //[31:12]
    } BF;
    jl_uint32 val[SWCORE_TAIL_DROP_FFA_THRESHOLD_ENTRY_SIZE];
} SWCORE_TAIL_DROP_FFA_THRESHOLD_t;

#define SWCORE_PORT_XON_FFA_THRESHOLD                                                              ((jl_uint32)0x00121978U)
#define SWCORE_PORT_XON_FFA_THRESHOLD_NUM                                                          ((jl_uint32)0x0000000BU)
#define SWCORE_PORT_XON_FFA_THRESHOLD_ENTRY_SIZE                                                                        (1)
#define SWCORE_PORT_XON_FFA_THRESHOLD_OFFSET_CELLS                                                                      (0)
#define SWCORE_PORT_XON_FFA_THRESHOLD_OFFSET_CELLS_WIDTH                                                               (10)
#define SWCORE_PORT_XON_FFA_THRESHOLD_OFFSET_RESERVED                                                                  (10)
#define SWCORE_PORT_XON_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH                                                            (22)
typedef union SWCORE_PORT_XON_FFA_THRESHOLD_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cells:SWCORE_PORT_XON_FFA_THRESHOLD_OFFSET_CELLS_WIDTH;                                                     //[ 9: 0]
        jl_uint32 reserved:SWCORE_PORT_XON_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH;                                               //[31:10]
    } BF;
    jl_uint32 val[SWCORE_PORT_XON_FFA_THRESHOLD_ENTRY_SIZE];
} SWCORE_PORT_XON_FFA_THRESHOLD_t;

#define SWCORE_PORT_XOFF_FFA_THRESHOLD                                                             ((jl_uint32)0x001219A4U)
#define SWCORE_PORT_XOFF_FFA_THRESHOLD_NUM                                                         ((jl_uint32)0x0000000BU)
#define SWCORE_PORT_XOFF_FFA_THRESHOLD_ENTRY_SIZE                                                                       (1)
#define SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_CELLS                                                                     (0)
#define SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_CELLS_WIDTH                                                              (10)
#define SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_ENABLE                                                                   (10)
#define SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_ENABLE_WIDTH                                                              (1)
#define SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_TRIP                                                                     (11)
#define SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_TRIP_WIDTH                                                                (1)
#define SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_RESERVED                                                                 (12)
#define SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH                                                           (20)
typedef union SWCORE_PORT_XOFF_FFA_THRESHOLD_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cells:SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_CELLS_WIDTH;                                                    //[ 9: 0]
        jl_uint32 enable:SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_ENABLE_WIDTH;                                                  //[10:10]
        jl_uint32 trip:SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_TRIP_WIDTH;                                                      //[11:11]
        jl_uint32 reserved:SWCORE_PORT_XOFF_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH;                                              //[31:12]
    } BF;
    jl_uint32 val[SWCORE_PORT_XOFF_FFA_THRESHOLD_ENTRY_SIZE];
} SWCORE_PORT_XOFF_FFA_THRESHOLD_t;

#define SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD                                                        ((jl_uint32)0x001219D0U)
#define SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_NUM                                                    ((jl_uint32)0x0000000BU)
#define SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_ENTRY_SIZE                                                                  (1)
#define SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_CELLS                                                                (0)
#define SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_CELLS_WIDTH                                                         (10)
#define SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_ENABLE                                                              (10)
#define SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_ENABLE_WIDTH                                                         (1)
#define SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_TRIP                                                                (11)
#define SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_TRIP_WIDTH                                                           (1)
#define SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_RESERVED                                                            (12)
#define SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH                                                      (20)
typedef union SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cells:SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_CELLS_WIDTH;                                               //[ 9: 0]
        jl_uint32 enable:SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_ENABLE_WIDTH;                                             //[10:10]
        jl_uint32 trip:SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_TRIP_WIDTH;                                                 //[11:11]
        jl_uint32 reserved:SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET_RESERVED_WIDTH;                                         //[31:12]
    } BF;
    jl_uint32 val[SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_ENTRY_SIZE];
} SWCORE_PORT_TAIL_DROP_FFA_THRESHOLD_t;

#define SWCORE_EGRESS_PORT_DEPTH                                                                   ((jl_uint32)0x001219FCU)
#define SWCORE_EGRESS_PORT_DEPTH_NUM                                                               ((jl_uint32)0x0000000BU)
#define SWCORE_EGRESS_PORT_DEPTH_ENTRY_SIZE                                                                             (1)
#define SWCORE_EGRESS_PORT_DEPTH_OFFSET_PACKETS                                                                         (0)
#define SWCORE_EGRESS_PORT_DEPTH_OFFSET_PACKETS_WIDTH                                                                  (10)
#define SWCORE_EGRESS_PORT_DEPTH_OFFSET_RESERVED                                                                       (10)
#define SWCORE_EGRESS_PORT_DEPTH_OFFSET_RESERVED_WIDTH                                                                 (22)
typedef union SWCORE_EGRESS_PORT_DEPTH_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_EGRESS_PORT_DEPTH_OFFSET_PACKETS_WIDTH;                                                      //[ 9: 0]
        jl_uint32 reserved:SWCORE_EGRESS_PORT_DEPTH_OFFSET_RESERVED_WIDTH;                                                    //[31:10]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_PORT_DEPTH_ENTRY_SIZE];
} SWCORE_EGRESS_PORT_DEPTH_t;

#define SWCORE_EGRESS_QUEUE_DEPTH                                                                  ((jl_uint32)0x00121A28U)
#define SWCORE_EGRESS_QUEUE_DEPTH_NUM                                                              ((jl_uint32)0x00000058U)
#define SWCORE_EGRESS_QUEUE_DEPTH_ENTRY_SIZE                                                                            (1)
#define SWCORE_EGRESS_QUEUE_DEPTH_OFFSET_PACKETS                                                                        (0)
#define SWCORE_EGRESS_QUEUE_DEPTH_OFFSET_PACKETS_WIDTH                                                                 (10)
#define SWCORE_EGRESS_QUEUE_DEPTH_OFFSET_RESERVED                                                                      (10)
#define SWCORE_EGRESS_QUEUE_DEPTH_OFFSET_RESERVED_WIDTH                                                                (22)
typedef union SWCORE_EGRESS_QUEUE_DEPTH_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_EGRESS_QUEUE_DEPTH_OFFSET_PACKETS_WIDTH;                                                     //[ 9: 0]
        jl_uint32 reserved:SWCORE_EGRESS_QUEUE_DEPTH_OFFSET_RESERVED_WIDTH;                                                   //[31:10]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_QUEUE_DEPTH_ENTRY_SIZE];
} SWCORE_EGRESS_QUEUE_DEPTH_t;

#define SWCORE_MINIMUM_BUFFER_FREE                                                                 ((jl_uint32)0x00121B88U)
#define SWCORE_MINIMUM_BUFFER_FREE_NUM                                                             ((jl_uint32)0x00000001U)
#define SWCORE_MINIMUM_BUFFER_FREE_ENTRY_SIZE                                                                           (1)
#define SWCORE_MINIMUM_BUFFER_FREE_OFFSET_CELLS                                                                         (0)
#define SWCORE_MINIMUM_BUFFER_FREE_OFFSET_CELLS_WIDTH                                                                  (10)
#define SWCORE_MINIMUM_BUFFER_FREE_OFFSET_RESERVED                                                                     (10)
#define SWCORE_MINIMUM_BUFFER_FREE_OFFSET_RESERVED_WIDTH                                                               (22)
typedef union SWCORE_MINIMUM_BUFFER_FREE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cells:SWCORE_MINIMUM_BUFFER_FREE_OFFSET_CELLS_WIDTH;                                                        //[ 9: 0]
        jl_uint32 reserved:SWCORE_MINIMUM_BUFFER_FREE_OFFSET_RESERVED_WIDTH;                                                  //[31:10]
    } BF;
    jl_uint32 val[SWCORE_MINIMUM_BUFFER_FREE_ENTRY_SIZE];
} SWCORE_MINIMUM_BUFFER_FREE_t;

#define SWCORE_OUTPUT_DISABLE                                                                      ((jl_uint32)0x00121B8CU)
#define SWCORE_OUTPUT_DISABLE_NUM                                                                  ((jl_uint32)0x0000000BU)
#define SWCORE_OUTPUT_DISABLE_ENTRY_SIZE                                                                                (1)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE0_DISABLED                                                             (0)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE0_DISABLED_WIDTH                                                       (1)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE1_DISABLED                                                             (1)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE1_DISABLED_WIDTH                                                       (1)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE2_DISABLED                                                             (2)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE2_DISABLED_WIDTH                                                       (1)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE3_DISABLED                                                             (3)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE3_DISABLED_WIDTH                                                       (1)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE4_DISABLED                                                             (4)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE4_DISABLED_WIDTH                                                       (1)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE5_DISABLED                                                             (5)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE5_DISABLED_WIDTH                                                       (1)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE6_DISABLED                                                             (6)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE6_DISABLED_WIDTH                                                       (1)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE7_DISABLED                                                             (7)
#define SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE7_DISABLED_WIDTH                                                       (1)
#define SWCORE_OUTPUT_DISABLE_OFFSET_RESERVED                                                                           (8)
#define SWCORE_OUTPUT_DISABLE_OFFSET_RESERVED_WIDTH                                                                    (24)
typedef union SWCORE_OUTPUT_DISABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 egress_queue0_disabled:SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE0_DISABLED_WIDTH;                           //[ 0: 0]
        jl_uint32 egress_queue1_disabled:SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE1_DISABLED_WIDTH;                           //[ 1: 1]
        jl_uint32 egress_queue2_disabled:SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE2_DISABLED_WIDTH;                           //[ 2: 2]
        jl_uint32 egress_queue3_disabled:SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE3_DISABLED_WIDTH;                           //[ 3: 3]
        jl_uint32 egress_queue4_disabled:SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE4_DISABLED_WIDTH;                           //[ 4: 4]
        jl_uint32 egress_queue5_disabled:SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE5_DISABLED_WIDTH;                           //[ 5: 5]
        jl_uint32 egress_queue6_disabled:SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE6_DISABLED_WIDTH;                           //[ 6: 6]
        jl_uint32 egress_queue7_disabled:SWCORE_OUTPUT_DISABLE_OFFSET_EGRESS_QUEUE7_DISABLED_WIDTH;                           //[ 7: 7]
        jl_uint32 reserved:SWCORE_OUTPUT_DISABLE_OFFSET_RESERVED_WIDTH;                                                       //[31: 8]
    } BF;
    jl_uint32 val[SWCORE_OUTPUT_DISABLE_ENTRY_SIZE];
} SWCORE_OUTPUT_DISABLE_t;

#define SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION                                                  ((jl_uint32)0x00121BB8U)
#define SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION_NUM                                              ((jl_uint32)0x0000000BU)
#define SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE                                                            (1)
#define SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY                                                (0)
#define SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH                                         (18)
#define SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED                                                      (18)
#define SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH                                                (14)
typedef union SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bucket_capacity:SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH;                     //[17: 0]
        jl_uint32 reserved:SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH;                                   //[31:18]
    } BF;
    jl_uint32 val[SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE];
} SWCORE_DWRR_BUCKET_CAPACITY_CONFIGURATION_t;

#define SWCORE_DWRR_BUCKET_MISC_CONFIGURATION                                                      ((jl_uint32)0x00121BE4U)
#define SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_NUM                                                  ((jl_uint32)0x0000000BU)
#define SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_ENTRY_SIZE                                                                (1)
#define SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_THRESHOLD                                                          (0)
#define SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_THRESHOLD_WIDTH                                                    (5)
#define SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES                                                  (5)
#define SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH                                            (1)
#define SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_IFG_CORRECTION                                                     (6)
#define SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH                                               (8)
#define SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_RESERVED                                                          (14)
#define SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_RESERVED_WIDTH                                                    (18)
typedef union SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 threshold:SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_THRESHOLD_WIDTH;                                     //[ 4: 0]
        jl_uint32 packets_not_bytes:SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH;                     //[ 5: 5]
        jl_uint32 ifg_correction:SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH;                           //[13: 6]
        jl_uint32 reserved:SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_OFFSET_RESERVED_WIDTH;                                       //[31:14]
    } BF;
    jl_uint32 val[SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_ENTRY_SIZE];
} SWCORE_DWRR_BUCKET_MISC_CONFIGURATION_t;

#define SWCORE_DWRR_WEIGHT_CONFIGURATION                                                           ((jl_uint32)0x00121C10U)
#define SWCORE_DWRR_WEIGHT_CONFIGURATION_NUM                                                       ((jl_uint32)0x00000058U)
#define SWCORE_DWRR_WEIGHT_CONFIGURATION_ENTRY_SIZE                                                                     (1)
#define SWCORE_DWRR_WEIGHT_CONFIGURATION_OFFSET_WEIGHT                                                                  (0)
#define SWCORE_DWRR_WEIGHT_CONFIGURATION_OFFSET_WEIGHT_WIDTH                                                            (8)
#define SWCORE_DWRR_WEIGHT_CONFIGURATION_OFFSET_RESERVED                                                                (8)
#define SWCORE_DWRR_WEIGHT_CONFIGURATION_OFFSET_RESERVED_WIDTH                                                         (24)
typedef union SWCORE_DWRR_WEIGHT_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 weight:SWCORE_DWRR_WEIGHT_CONFIGURATION_OFFSET_WEIGHT_WIDTH;                                                //[ 7: 0]
        jl_uint32 reserved:SWCORE_DWRR_WEIGHT_CONFIGURATION_OFFSET_RESERVED_WIDTH;                                            //[31: 8]
    } BF;
    jl_uint32 val[SWCORE_DWRR_WEIGHT_CONFIGURATION_ENTRY_SIZE];
} SWCORE_DWRR_WEIGHT_CONFIGURATION_t;

#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION                                                     ((jl_uint32)0x00121D70U)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_NUM                                                 ((jl_uint32)0x00000058U)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_ENTRY_SIZE                                                               (1)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES                                                 (0)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH                                           (1)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_TOKENS                                                            (1)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH                                                     (12)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_TICK                                                             (13)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_TICK_WIDTH                                                        (3)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION                                                   (16)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH                                              (8)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_RESERVED                                                         (24)
#define SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH                                                    (8)
typedef union SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets_not_bytes:SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH;                    //[ 0: 0]
        jl_uint32 tokens:SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH;                                          //[12: 1]
        jl_uint32 tick:SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_TICK_WIDTH;                                              //[15:13]
        jl_uint32 ifg_correction:SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH;                          //[23:16]
        jl_uint32 reserved:SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH;                                      //[31:24]
    } BF;
    jl_uint32 val[SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_ENTRY_SIZE];
} SWCORE_QUEUE_SHAPER_RATE_CONFIGURATION_t;

#define SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION                                          ((jl_uint32)0x00121ED0U)
#define SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION_NUM                                      ((jl_uint32)0x00000058U)
#define SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE                                                    (1)
#define SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY                                        (0)
#define SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH                                 (16)
#define SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED                                              (16)
#define SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH                                        (16)
typedef union SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bucket_capacity:SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH;             //[15: 0]
        jl_uint32 reserved:SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH;                           //[31:16]
    } BF;
    jl_uint32 val[SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE];
} SWCORE_QUEUE_SHAPER_BUCKET_CAPACITY_CONFIGURATION_t;

#define SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION                                         ((jl_uint32)0x00122030U)
#define SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_NUM                                     ((jl_uint32)0x00000058U)
#define SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE                                                   (1)
#define SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD                                             (0)
#define SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH                                      (16)
#define SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED                                             (16)
#define SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH                                       (16)
typedef union SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 threshold:SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH;                        //[15: 0]
        jl_uint32 reserved:SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH;                          //[31:16]
    } BF;
    jl_uint32 val[SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE];
} SWCORE_QUEUE_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_t;

#define SWCORE_QUEUE_SHAPER_ENABLE                                                                 ((jl_uint32)0x00122190U)
#define SWCORE_QUEUE_SHAPER_ENABLE_NUM                                                             ((jl_uint32)0x00000001U)
#define SWCORE_QUEUE_SHAPER_ENABLE_ENTRY_SIZE                                                                           (4)
#define SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_ENABLE_0_31                                                                   (0)
#define SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_ENABLE_0_31_WIDTH                                                            (32)
#define SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_ENABLE_32_63                                                                 (32)
#define SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_ENABLE_32_63_WIDTH                                                           (32)
#define SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_ENABLE_64_87                                                                 (64)
#define SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_ENABLE_64_87_WIDTH                                                           (24)
#define SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_RESERVED                                                                     (88)
#define SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_RESERVED_WIDTH                                                                (8)
typedef union SWCORE_QUEUE_SHAPER_ENABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 enable_0_31:SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_ENABLE_0_31_WIDTH;                                            //[31: 0]
        jl_uint64 enable_32_63:SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_ENABLE_32_63_WIDTH;                                          //[63:32]
        jl_uint64 enable_64_87:SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_ENABLE_64_87_WIDTH;                                          //[87:64]
        jl_uint64 reserved:SWCORE_QUEUE_SHAPER_ENABLE_OFFSET_RESERVED_WIDTH;                                                  //[95:88]
    } BF;
    jl_uint32 val[SWCORE_QUEUE_SHAPER_ENABLE_ENTRY_SIZE];
} SWCORE_QUEUE_SHAPER_ENABLE_t;

#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION                                                      ((jl_uint32)0x001221A0U)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_NUM                                                  ((jl_uint32)0x00000058U)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_ENTRY_SIZE                                                                (1)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES                                                  (0)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH                                            (1)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_TOKENS                                                             (1)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH                                                      (12)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_TICK                                                              (13)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_TICK_WIDTH                                                         (3)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION                                                    (16)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH                                               (8)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_RESERVED                                                          (24)
#define SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH                                                     (8)
typedef union SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets_not_bytes:SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH;                     //[ 0: 0]
        jl_uint32 tokens:SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH;                                           //[12: 1]
        jl_uint32 tick:SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_TICK_WIDTH;                                               //[15:13]
        jl_uint32 ifg_correction:SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH;                           //[23:16]
        jl_uint32 reserved:SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH;                                       //[31:24]
    } BF;
    jl_uint32 val[SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_ENTRY_SIZE];
} SWCORE_PRIO_SHAPER_RATE_CONFIGURATION_t;

#define SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION                                           ((jl_uint32)0x00122300U)
#define SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION_NUM                                       ((jl_uint32)0x00000058U)
#define SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE                                                     (1)
#define SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY                                         (0)
#define SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH                                  (16)
#define SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED                                               (16)
#define SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH                                         (16)
typedef union SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bucket_capacity:SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH;              //[15: 0]
        jl_uint32 reserved:SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH;                            //[31:16]
    } BF;
    jl_uint32 val[SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE];
} SWCORE_PRIO_SHAPER_BUCKET_CAPACITY_CONFIGURATION_t;

#define SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION                                          ((jl_uint32)0x00122460U)
#define SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_NUM                                      ((jl_uint32)0x00000058U)
#define SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE                                                    (1)
#define SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD                                              (0)
#define SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH                                       (16)
#define SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED                                              (16)
#define SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH                                        (16)
typedef union SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 threshold:SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH;                         //[15: 0]
        jl_uint32 reserved:SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH;                           //[31:16]
    } BF;
    jl_uint32 val[SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE];
} SWCORE_PRIO_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_t;

#define SWCORE_PRIO_SHAPER_ENABLE                                                                  ((jl_uint32)0x001225C0U)
#define SWCORE_PRIO_SHAPER_ENABLE_NUM                                                              ((jl_uint32)0x00000001U)
#define SWCORE_PRIO_SHAPER_ENABLE_ENTRY_SIZE                                                                            (4)
#define SWCORE_PRIO_SHAPER_ENABLE_OFFSET_ENABLE_0_31                                                                    (0)
#define SWCORE_PRIO_SHAPER_ENABLE_OFFSET_ENABLE_0_31_WIDTH                                                             (32)
#define SWCORE_PRIO_SHAPER_ENABLE_OFFSET_ENABLE_32_63                                                                  (32)
#define SWCORE_PRIO_SHAPER_ENABLE_OFFSET_ENABLE_32_63_WIDTH                                                            (32)
#define SWCORE_PRIO_SHAPER_ENABLE_OFFSET_ENABLE_64_87                                                                  (64)
#define SWCORE_PRIO_SHAPER_ENABLE_OFFSET_ENABLE_64_87_WIDTH                                                            (24)
#define SWCORE_PRIO_SHAPER_ENABLE_OFFSET_RESERVED                                                                      (88)
#define SWCORE_PRIO_SHAPER_ENABLE_OFFSET_RESERVED_WIDTH                                                                 (8)
typedef union SWCORE_PRIO_SHAPER_ENABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint64 enable_0_31:SWCORE_PRIO_SHAPER_ENABLE_OFFSET_ENABLE_0_31_WIDTH;                                             //[31: 0]
        jl_uint64 enable_32_63:SWCORE_PRIO_SHAPER_ENABLE_OFFSET_ENABLE_32_63_WIDTH;                                           //[63:32]
        jl_uint64 enable_64_87:SWCORE_PRIO_SHAPER_ENABLE_OFFSET_ENABLE_64_87_WIDTH;                                           //[87:64]
        jl_uint64 reserved:SWCORE_PRIO_SHAPER_ENABLE_OFFSET_RESERVED_WIDTH;                                                   //[95:88]
    } BF;
    jl_uint32 val[SWCORE_PRIO_SHAPER_ENABLE_ENTRY_SIZE];
} SWCORE_PRIO_SHAPER_ENABLE_t;

#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION                                                      ((jl_uint32)0x001225D0U)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_NUM                                                  ((jl_uint32)0x0000000BU)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_ENTRY_SIZE                                                                (1)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES                                                  (0)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH                                            (1)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_TOKENS                                                             (1)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH                                                      (12)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_TICK                                                              (13)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_TICK_WIDTH                                                         (3)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION                                                    (16)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH                                               (8)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_RESERVED                                                          (24)
#define SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH                                                     (8)
typedef union SWCORE_PORT_SHAPER_RATE_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets_not_bytes:SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_PACKETS_NOT_BYTES_WIDTH;                     //[ 0: 0]
        jl_uint32 tokens:SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_TOKENS_WIDTH;                                           //[12: 1]
        jl_uint32 tick:SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_TICK_WIDTH;                                               //[15:13]
        jl_uint32 ifg_correction:SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_IFG_CORRECTION_WIDTH;                           //[23:16]
        jl_uint32 reserved:SWCORE_PORT_SHAPER_RATE_CONFIGURATION_OFFSET_RESERVED_WIDTH;                                       //[31:24]
    } BF;
    jl_uint32 val[SWCORE_PORT_SHAPER_RATE_CONFIGURATION_ENTRY_SIZE];
} SWCORE_PORT_SHAPER_RATE_CONFIGURATION_t;

#define SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION                                           ((jl_uint32)0x001225FCU)
#define SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION_NUM                                       ((jl_uint32)0x0000000BU)
#define SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE                                                     (1)
#define SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY                                         (0)
#define SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH                                  (16)
#define SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED                                               (16)
#define SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH                                         (16)
typedef union SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 bucket_capacity:SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_BUCKET_CAPACITY_WIDTH;              //[15: 0]
        jl_uint32 reserved:SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION_OFFSET_RESERVED_WIDTH;                            //[31:16]
    } BF;
    jl_uint32 val[SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION_ENTRY_SIZE];
} SWCORE_PORT_SHAPER_BUCKET_CAPACITY_CONFIGURATION_t;

#define SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION                                          ((jl_uint32)0x00122628U)
#define SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_NUM                                      ((jl_uint32)0x0000000BU)
#define SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE                                                    (1)
#define SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD                                              (0)
#define SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH                                       (16)
#define SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED                                              (16)
#define SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH                                        (16)
typedef union SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint32 threshold:SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_THRESHOLD_WIDTH;                         //[15: 0]
        jl_uint32 reserved:SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_OFFSET_RESERVED_WIDTH;                           //[31:16]
    } BF;
    jl_uint32 val[SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_ENTRY_SIZE];
} SWCORE_PORT_SHAPER_BUCKET_THRESHOLD_CONFIGURATION_t;

#define SWCORE_PORT_SHAPER_ENABLE                                                                  ((jl_uint32)0x00122654U)
#define SWCORE_PORT_SHAPER_ENABLE_NUM                                                              ((jl_uint32)0x00000001U)
#define SWCORE_PORT_SHAPER_ENABLE_ENTRY_SIZE                                                                            (1)
#define SWCORE_PORT_SHAPER_ENABLE_OFFSET_ENABLE                                                                         (0)
#define SWCORE_PORT_SHAPER_ENABLE_OFFSET_ENABLE_WIDTH                                                                  (11)
#define SWCORE_PORT_SHAPER_ENABLE_OFFSET_RESERVED                                                                      (11)
#define SWCORE_PORT_SHAPER_ENABLE_OFFSET_RESERVED_WIDTH                                                                (21)
typedef union SWCORE_PORT_SHAPER_ENABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 enable:SWCORE_PORT_SHAPER_ENABLE_OFFSET_ENABLE_WIDTH;                                                       //[10: 0]
        jl_uint32 reserved:SWCORE_PORT_SHAPER_ENABLE_OFFSET_RESERVED_WIDTH;                                                   //[31:11]
    } BF;
    jl_uint32 val[SWCORE_PORT_SHAPER_ENABLE_ENTRY_SIZE];
} SWCORE_PORT_SHAPER_ENABLE_t;

#define SWCORE_PB_PACKET_HEAD_COUNTER                                                              ((jl_uint32)0x00122658U)
#define SWCORE_PB_PACKET_HEAD_COUNTER_NUM                                                          ((jl_uint32)0x00000001U)
#define SWCORE_PB_PACKET_HEAD_COUNTER_ENTRY_SIZE                                                                        (1)
#define SWCORE_PB_PACKET_HEAD_COUNTER_OFFSET_PACKETS                                                                    (0)
#define SWCORE_PB_PACKET_HEAD_COUNTER_OFFSET_PACKETS_WIDTH                                                             (24)
#define SWCORE_PB_PACKET_HEAD_COUNTER_OFFSET_RESERVED                                                                  (24)
#define SWCORE_PB_PACKET_HEAD_COUNTER_OFFSET_RESERVED_WIDTH                                                             (8)
typedef union SWCORE_PB_PACKET_HEAD_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_PB_PACKET_HEAD_COUNTER_OFFSET_PACKETS_WIDTH;                                                 //[23: 0]
        jl_uint32 reserved:SWCORE_PB_PACKET_HEAD_COUNTER_OFFSET_RESERVED_WIDTH;                                               //[31:24]
    } BF;
    jl_uint32 val[SWCORE_PB_PACKET_HEAD_COUNTER_ENTRY_SIZE];
} SWCORE_PB_PACKET_HEAD_COUNTER_t;

#define SWCORE_PB_PACKET_TAIL_COUNTER                                                              ((jl_uint32)0x0012265CU)
#define SWCORE_PB_PACKET_TAIL_COUNTER_NUM                                                          ((jl_uint32)0x00000001U)
#define SWCORE_PB_PACKET_TAIL_COUNTER_ENTRY_SIZE                                                                        (1)
#define SWCORE_PB_PACKET_TAIL_COUNTER_OFFSET_PACKETS                                                                    (0)
#define SWCORE_PB_PACKET_TAIL_COUNTER_OFFSET_PACKETS_WIDTH                                                             (24)
#define SWCORE_PB_PACKET_TAIL_COUNTER_OFFSET_RESERVED                                                                  (24)
#define SWCORE_PB_PACKET_TAIL_COUNTER_OFFSET_RESERVED_WIDTH                                                             (8)
typedef union SWCORE_PB_PACKET_TAIL_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_PB_PACKET_TAIL_COUNTER_OFFSET_PACKETS_WIDTH;                                                 //[23: 0]
        jl_uint32 reserved:SWCORE_PB_PACKET_TAIL_COUNTER_OFFSET_RESERVED_WIDTH;                                               //[31:24]
    } BF;
    jl_uint32 val[SWCORE_PB_PACKET_TAIL_COUNTER_ENTRY_SIZE];
} SWCORE_PB_PACKET_TAIL_COUNTER_t;

#define SWCORE_DRAIN_PORT                                                                          ((jl_uint32)0x00122660U)
#define SWCORE_DRAIN_PORT_NUM                                                                      ((jl_uint32)0x00000001U)
#define SWCORE_DRAIN_PORT_ENTRY_SIZE                                                                                    (1)
#define SWCORE_DRAIN_PORT_OFFSET_DRAIN_MASK                                                                             (0)
#define SWCORE_DRAIN_PORT_OFFSET_DRAIN_MASK_WIDTH                                                                      (11)
#define SWCORE_DRAIN_PORT_OFFSET_RESERVED                                                                              (11)
#define SWCORE_DRAIN_PORT_OFFSET_RESERVED_WIDTH                                                                        (21)
typedef union SWCORE_DRAIN_PORT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 drain_mask:SWCORE_DRAIN_PORT_OFFSET_DRAIN_MASK_WIDTH;                                                       //[10: 0]
        jl_uint32 reserved:SWCORE_DRAIN_PORT_OFFSET_RESERVED_WIDTH;                                                           //[31:11]
    } BF;
    jl_uint32 val[SWCORE_DRAIN_PORT_ENTRY_SIZE];
} SWCORE_DRAIN_PORT_t;

#define SWCORE_DRAIN_PORT_DROP                                                                     ((jl_uint32)0x00122664U)
#define SWCORE_DRAIN_PORT_DROP_NUM                                                                 ((jl_uint32)0x0000000BU)
#define SWCORE_DRAIN_PORT_DROP_ENTRY_SIZE                                                                               (1)
#define SWCORE_DRAIN_PORT_DROP_OFFSET_PACKETS                                                                           (0)
#define SWCORE_DRAIN_PORT_DROP_OFFSET_PACKETS_WIDTH                                                                    (24)
#define SWCORE_DRAIN_PORT_DROP_OFFSET_RESERVED                                                                         (24)
#define SWCORE_DRAIN_PORT_DROP_OFFSET_RESERVED_WIDTH                                                                    (8)
typedef union SWCORE_DRAIN_PORT_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_DRAIN_PORT_DROP_OFFSET_PACKETS_WIDTH;                                                        //[23: 0]
        jl_uint32 reserved:SWCORE_DRAIN_PORT_DROP_OFFSET_RESERVED_WIDTH;                                                      //[31:24]
    } BF;
    jl_uint32 val[SWCORE_DRAIN_PORT_DROP_ENTRY_SIZE];
} SWCORE_DRAIN_PORT_DROP_t;

#define SWCORE_UNKNOWN_EGRESS_DROP                                                                 ((jl_uint32)0x00122690U)
#define SWCORE_UNKNOWN_EGRESS_DROP_NUM                                                             ((jl_uint32)0x0000000BU)
#define SWCORE_UNKNOWN_EGRESS_DROP_ENTRY_SIZE                                                                           (1)
#define SWCORE_UNKNOWN_EGRESS_DROP_OFFSET_PACKETS                                                                       (0)
#define SWCORE_UNKNOWN_EGRESS_DROP_OFFSET_PACKETS_WIDTH                                                                (24)
#define SWCORE_UNKNOWN_EGRESS_DROP_OFFSET_RESERVED                                                                     (24)
#define SWCORE_UNKNOWN_EGRESS_DROP_OFFSET_RESERVED_WIDTH                                                                (8)
typedef union SWCORE_UNKNOWN_EGRESS_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_UNKNOWN_EGRESS_DROP_OFFSET_PACKETS_WIDTH;                                                    //[23: 0]
        jl_uint32 reserved:SWCORE_UNKNOWN_EGRESS_DROP_OFFSET_RESERVED_WIDTH;                                                  //[31:24]
    } BF;
    jl_uint32 val[SWCORE_UNKNOWN_EGRESS_DROP_ENTRY_SIZE];
} SWCORE_UNKNOWN_EGRESS_DROP_t;

#define SWCORE_EGRESS_PORT_DISABLED_DROP                                                           ((jl_uint32)0x001226BCU)
#define SWCORE_EGRESS_PORT_DISABLED_DROP_NUM                                                       ((jl_uint32)0x0000000BU)
#define SWCORE_EGRESS_PORT_DISABLED_DROP_ENTRY_SIZE                                                                     (1)
#define SWCORE_EGRESS_PORT_DISABLED_DROP_OFFSET_PACKETS                                                                 (0)
#define SWCORE_EGRESS_PORT_DISABLED_DROP_OFFSET_PACKETS_WIDTH                                                          (24)
#define SWCORE_EGRESS_PORT_DISABLED_DROP_OFFSET_RESERVED                                                               (24)
#define SWCORE_EGRESS_PORT_DISABLED_DROP_OFFSET_RESERVED_WIDTH                                                          (8)
typedef union SWCORE_EGRESS_PORT_DISABLED_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_EGRESS_PORT_DISABLED_DROP_OFFSET_PACKETS_WIDTH;                                              //[23: 0]
        jl_uint32 reserved:SWCORE_EGRESS_PORT_DISABLED_DROP_OFFSET_RESERVED_WIDTH;                                            //[31:24]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_PORT_DISABLED_DROP_ENTRY_SIZE];
} SWCORE_EGRESS_PORT_DISABLED_DROP_t;

#define SWCORE_EGRESS_PORT_FILTERING_DROP                                                          ((jl_uint32)0x001226E8U)
#define SWCORE_EGRESS_PORT_FILTERING_DROP_NUM                                                      ((jl_uint32)0x0000000BU)
#define SWCORE_EGRESS_PORT_FILTERING_DROP_ENTRY_SIZE                                                                    (1)
#define SWCORE_EGRESS_PORT_FILTERING_DROP_OFFSET_PACKETS                                                                (0)
#define SWCORE_EGRESS_PORT_FILTERING_DROP_OFFSET_PACKETS_WIDTH                                                         (24)
#define SWCORE_EGRESS_PORT_FILTERING_DROP_OFFSET_RESERVED                                                              (24)
#define SWCORE_EGRESS_PORT_FILTERING_DROP_OFFSET_RESERVED_WIDTH                                                         (8)
typedef union SWCORE_EGRESS_PORT_FILTERING_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_EGRESS_PORT_FILTERING_DROP_OFFSET_PACKETS_WIDTH;                                             //[23: 0]
        jl_uint32 reserved:SWCORE_EGRESS_PORT_FILTERING_DROP_OFFSET_RESERVED_WIDTH;                                           //[31:24]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_PORT_FILTERING_DROP_ENTRY_SIZE];
} SWCORE_EGRESS_PORT_FILTERING_DROP_t;

#define SWCORE_EPP_PM_DROP                                                                         ((jl_uint32)0x00122714U)
#define SWCORE_EPP_PM_DROP_NUM                                                                     ((jl_uint32)0x00000001U)
#define SWCORE_EPP_PM_DROP_ENTRY_SIZE                                                                                   (1)
#define SWCORE_EPP_PM_DROP_OFFSET_PACKETS                                                                               (0)
#define SWCORE_EPP_PM_DROP_OFFSET_PACKETS_WIDTH                                                                        (24)
#define SWCORE_EPP_PM_DROP_OFFSET_RESERVED                                                                             (24)
#define SWCORE_EPP_PM_DROP_OFFSET_RESERVED_WIDTH                                                                        (8)
typedef union SWCORE_EPP_PM_DROP_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_EPP_PM_DROP_OFFSET_PACKETS_WIDTH;                                                            //[23: 0]
        jl_uint32 reserved:SWCORE_EPP_PM_DROP_OFFSET_RESERVED_WIDTH;                                                          //[31:24]
    } BF;
    jl_uint32 val[SWCORE_EPP_PM_DROP_ENTRY_SIZE];
} SWCORE_EPP_PM_DROP_t;

#define SWCORE_EPP_PACKET_HEAD_COUNTER                                                             ((jl_uint32)0x00122718U)
#define SWCORE_EPP_PACKET_HEAD_COUNTER_NUM                                                         ((jl_uint32)0x00000001U)
#define SWCORE_EPP_PACKET_HEAD_COUNTER_ENTRY_SIZE                                                                       (1)
#define SWCORE_EPP_PACKET_HEAD_COUNTER_OFFSET_PACKETS                                                                   (0)
#define SWCORE_EPP_PACKET_HEAD_COUNTER_OFFSET_PACKETS_WIDTH                                                            (24)
#define SWCORE_EPP_PACKET_HEAD_COUNTER_OFFSET_RESERVED                                                                 (24)
#define SWCORE_EPP_PACKET_HEAD_COUNTER_OFFSET_RESERVED_WIDTH                                                            (8)
typedef union SWCORE_EPP_PACKET_HEAD_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_EPP_PACKET_HEAD_COUNTER_OFFSET_PACKETS_WIDTH;                                                //[23: 0]
        jl_uint32 reserved:SWCORE_EPP_PACKET_HEAD_COUNTER_OFFSET_RESERVED_WIDTH;                                              //[31:24]
    } BF;
    jl_uint32 val[SWCORE_EPP_PACKET_HEAD_COUNTER_ENTRY_SIZE];
} SWCORE_EPP_PACKET_HEAD_COUNTER_t;

#define SWCORE_EPP_PACKET_TAIL_COUNTER                                                             ((jl_uint32)0x0012271CU)
#define SWCORE_EPP_PACKET_TAIL_COUNTER_NUM                                                         ((jl_uint32)0x00000001U)
#define SWCORE_EPP_PACKET_TAIL_COUNTER_ENTRY_SIZE                                                                       (1)
#define SWCORE_EPP_PACKET_TAIL_COUNTER_OFFSET_PACKETS                                                                   (0)
#define SWCORE_EPP_PACKET_TAIL_COUNTER_OFFSET_PACKETS_WIDTH                                                            (24)
#define SWCORE_EPP_PACKET_TAIL_COUNTER_OFFSET_RESERVED                                                                 (24)
#define SWCORE_EPP_PACKET_TAIL_COUNTER_OFFSET_RESERVED_WIDTH                                                            (8)
typedef union SWCORE_EPP_PACKET_TAIL_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_EPP_PACKET_TAIL_COUNTER_OFFSET_PACKETS_WIDTH;                                                //[23: 0]
        jl_uint32 reserved:SWCORE_EPP_PACKET_TAIL_COUNTER_OFFSET_RESERVED_WIDTH;                                              //[31:24]
    } BF;
    jl_uint32 val[SWCORE_EPP_PACKET_TAIL_COUNTER_ENTRY_SIZE];
} SWCORE_EPP_PACKET_TAIL_COUNTER_t;

#define SWCORE_EGRESS_PORT_CONFIGURATION                                                           ((jl_uint32)0x00122720U)
#define SWCORE_EGRESS_PORT_CONFIGURATION_NUM                                                       ((jl_uint32)0x0000000BU)
#define SWCORE_EGRESS_PORT_CONFIGURATION_ENTRY_SIZE                                                                     (2)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_COLOR_REMAP                                                             (0)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_COLOR_REMAP_WIDTH                                                       (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_VLAN_SINGLE_OP                                                          (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_VLAN_SINGLE_OP_WIDTH                                                    (3)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_TYPE_SEL                                                                (4)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_TYPE_SEL_WIDTH                                                          (2)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_VID_SEL                                                                 (6)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_VID_SEL_WIDTH                                                           (2)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_CFI_DEI_SEL                                                             (8)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_CFI_DEI_SEL_WIDTH                                                       (2)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_PCP_SEL                                                                (10)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_PCP_SEL_WIDTH                                                           (2)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_VID                                                                    (12)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_VID_WIDTH                                                              (12)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_CFI_DEI                                                                (24)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_CFI_DEI_WIDTH                                                           (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_PCP                                                                    (25)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_PCP_WIDTH                                                               (3)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DISABLED                                                               (28)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DISABLED_WIDTH                                                          (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_CTAGGED_VLANS                                                     (29)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_CTAGGED_VLANS_WIDTH                                                (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_STAGGED_VLANS                                                     (30)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_STAGGED_VLANS_WIDTH                                                (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_MORE_THAN_ONE_VLANS                                                    (31)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_MORE_THAN_ONE_VLANS_WIDTH                                               (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_UNTAGGED_VLANS                                                    (32)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_UNTAGGED_VLANS_WIDTH                                               (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_SINGLE_TAGGED_VLANS                                               (33)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_SINGLE_TAGGED_VLANS_WIDTH                                          (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_DUAL_TAGGED_VLANS                                                 (34)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_DUAL_TAGGED_VLANS_WIDTH                                            (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_CSTAGGED_VLANS                                                    (35)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_CSTAGGED_VLANS_WIDTH                                               (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_SCTAGGED_VLANS                                                    (36)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_SCTAGGED_VLANS_WIDTH                                               (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_CCTAGGED_VLANS                                                    (37)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_CCTAGGED_VLANS_WIDTH                                               (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_SSTAGGED_VLANS                                                    (38)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_SSTAGGED_VLANS_WIDTH                                               (1)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_RESERVED                                                               (39)
#define SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_RESERVED_WIDTH                                                         (25)
typedef union SWCORE_EGRESS_PORT_CONFIGURATION_u {
    struct __attribute__ ((packed)) {
        jl_uint64 color_remap:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_COLOR_REMAP_WIDTH;                                      //[ 0: 0]
        jl_uint64 vlan_single_op:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_VLAN_SINGLE_OP_WIDTH;                                //[ 3: 1]
        jl_uint64 type_sel:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_TYPE_SEL_WIDTH;                                            //[ 5: 4]
        jl_uint64 vid_sel:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_VID_SEL_WIDTH;                                              //[ 7: 6]
        jl_uint64 cfi_dei_sel:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_CFI_DEI_SEL_WIDTH;                                      //[ 9: 8]
        jl_uint64 pcp_sel:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_PCP_SEL_WIDTH;                                              //[11:10]
        jl_uint64 vid:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_VID_WIDTH;                                                      //[23:12]
        jl_uint64 cfi_dei:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_CFI_DEI_WIDTH;                                              //[24:24]
        jl_uint64 pcp:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_PCP_WIDTH;                                                      //[27:25]
        jl_uint64 disabled:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DISABLED_WIDTH;                                            //[28:28]
        jl_uint64 drop_ctagged_vlans:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_CTAGGED_VLANS_WIDTH;                        //[29:29]
        jl_uint64 drop_stagged_vlans:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_STAGGED_VLANS_WIDTH;                        //[30:30]
        jl_uint64 more_than_one_vlans:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_MORE_THAN_ONE_VLANS_WIDTH;                      //[31:31]
        jl_uint64 drop_untagged_vlans:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_UNTAGGED_VLANS_WIDTH;                      //[32:32]
        jl_uint64 drop_single_tagged_vlans:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_SINGLE_TAGGED_VLANS_WIDTH;            //[33:33]
        jl_uint64 drop_dual_tagged_vlans:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_DUAL_TAGGED_VLANS_WIDTH;                //[34:34]
        jl_uint64 drop_cstagged_vlans:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_CSTAGGED_VLANS_WIDTH;                      //[35:35]
        jl_uint64 drop_sctagged_vlans:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_SCTAGGED_VLANS_WIDTH;                      //[36:36]
        jl_uint64 drop_cctagged_vlans:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_CCTAGGED_VLANS_WIDTH;                      //[37:37]
        jl_uint64 drop_sstagged_vlans:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_DROP_SSTAGGED_VLANS_WIDTH;                      //[38:38]
        jl_uint64 reserved:SWCORE_EGRESS_PORT_CONFIGURATION_OFFSET_RESERVED_WIDTH;                                            //[63:39]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_PORT_CONFIGURATION_ENTRY_SIZE];
} SWCORE_EGRESS_PORT_CONFIGURATION_t;

#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT                                                        ((jl_uint32)0x00122778U)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_NUM                                                    ((jl_uint32)0x0000000BU)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_ENTRY_SIZE                                                                  (2)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_COLOR_MODE                                                           (0)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_COLOR_MODE_WIDTH                                                     (2)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_COLOR2_TOS                                                           (2)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_COLOR2_TOS_WIDTH                                                    (24)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_TOS_MASK_0_5                                                        (26)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_TOS_MASK_0_5_WIDTH                                                   (6)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_TOS_MASK_6_7                                                        (32)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_TOS_MASK_6_7_WIDTH                                                   (2)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_COLOR2_DEI                                                          (34)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_COLOR2_DEI_WIDTH                                                     (3)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_RESERVED                                                            (37)
#define SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_RESERVED_WIDTH                                                      (27)
typedef union SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_u {
    struct __attribute__ ((packed)) {
        jl_uint64 color_mode:SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_COLOR_MODE_WIDTH;                                     //[ 1: 0]
        jl_uint64 color2_tos:SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_COLOR2_TOS_WIDTH;                                     //[25: 2]
        jl_uint64 tos_mask_0_5:SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_TOS_MASK_0_5_WIDTH;                                 //[31:26]
        jl_uint64 tos_mask_6_7:SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_TOS_MASK_6_7_WIDTH;                                 //[33:32]
        jl_uint64 color2_dei:SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_COLOR2_DEI_WIDTH;                                     //[36:34]
        jl_uint64 reserved:SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_OFFSET_RESERVED_WIDTH;                                         //[63:37]
    } BF;
    jl_uint32 val[SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_ENTRY_SIZE];
} SWCORE_COLOR_REMAP_FROM_EGRESS_PORT_t;

#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL                                          ((jl_uint32)0x001227D0U)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_NUM                                      ((jl_uint32)0x00000010U)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_ENTRY_SIZE                                                    (2)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_ENABLE                                                 (0)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_ENABLE_WIDTH                                           (1)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_COLOR_MODE                                             (1)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_COLOR_MODE_WIDTH                                       (2)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_COLOR2_TOS                                             (3)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_COLOR2_TOS_WIDTH                                      (24)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_TOS_MASK_0_4                                          (27)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_TOS_MASK_0_4_WIDTH                                     (5)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_TOS_MASK_5_7                                          (32)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_TOS_MASK_5_7_WIDTH                                     (3)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_COLOR2_DEI                                            (35)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_COLOR2_DEI_WIDTH                                       (3)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_RESERVED                                              (38)
#define SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_RESERVED_WIDTH                                        (26)
typedef union SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_u {
    struct __attribute__ ((packed)) {
        jl_uint64 enable:SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_ENABLE_WIDTH;                               //[ 0: 0]
        jl_uint64 color_mode:SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_COLOR_MODE_WIDTH;                       //[ 2: 1]
        jl_uint64 color2_tos:SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_COLOR2_TOS_WIDTH;                       //[26: 3]
        jl_uint64 tos_mask_0_4:SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_TOS_MASK_0_4_WIDTH;                   //[31:27]
        jl_uint64 tos_mask_5_7:SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_TOS_MASK_5_7_WIDTH;                   //[34:32]
        jl_uint64 color2_dei:SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_COLOR2_DEI_WIDTH;                       //[37:35]
        jl_uint64 reserved:SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_OFFSET_RESERVED_WIDTH;                           //[63:38]
    } BF;
    jl_uint32 val[SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_ENTRY_SIZE];
} SWCORE_COLOR_REMAP_FROM_INGRESS_ADMISSION_CONTROL_t;

#define SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE                                       ((jl_uint32)0x00122850U)
#define SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_NUM                                   ((jl_uint32)0x00000008U)
#define SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_ENTRY_SIZE                                                 (1)
#define SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_OFFSET_CFI_DEI                                             (0)
#define SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_OFFSET_CFI_DEI_WIDTH                                       (1)
#define SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_OFFSET_PCP                                                 (1)
#define SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_OFFSET_PCP_WIDTH                                           (3)
#define SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_OFFSET_RESERVED                                            (4)
#define SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_OFFSET_RESERVED_WIDTH                                     (28)
typedef union SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 cfi_dei:SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_OFFSET_CFI_DEI_WIDTH;                          //[ 0: 0]
        jl_uint32 pcp:SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_OFFSET_PCP_WIDTH;                                  //[ 3: 1]
        jl_uint32 reserved:SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_OFFSET_RESERVED_WIDTH;                        //[31: 4]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_ENTRY_SIZE];
} SWCORE_EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_t;

#define SWCORE_OUTPUT_MIRRORING_TABLE                                                              ((jl_uint32)0x00122870U)
#define SWCORE_OUTPUT_MIRRORING_TABLE_NUM                                                          ((jl_uint32)0x0000000BU)
#define SWCORE_OUTPUT_MIRRORING_TABLE_ENTRY_SIZE                                                                        (1)
#define SWCORE_OUTPUT_MIRRORING_TABLE_OFFSET_OUTPUT_MIRROR_ENABLED                                                      (0)
#define SWCORE_OUTPUT_MIRRORING_TABLE_OFFSET_OUTPUT_MIRROR_ENABLED_WIDTH                                                (1)
#define SWCORE_OUTPUT_MIRRORING_TABLE_OFFSET_OUTPUT_MIRROR_PORT                                                         (1)
#define SWCORE_OUTPUT_MIRRORING_TABLE_OFFSET_OUTPUT_MIRROR_PORT_WIDTH                                                   (4)
#define SWCORE_OUTPUT_MIRRORING_TABLE_OFFSET_RESERVED                                                                   (5)
#define SWCORE_OUTPUT_MIRRORING_TABLE_OFFSET_RESERVED_WIDTH                                                            (27)
typedef union SWCORE_OUTPUT_MIRRORING_TABLE_u {
    struct __attribute__ ((packed)) {
        jl_uint32 output_mirror_enabled:SWCORE_OUTPUT_MIRRORING_TABLE_OFFSET_OUTPUT_MIRROR_ENABLED_WIDTH;                     //[ 0: 0]
        jl_uint32 output_mirror_port:SWCORE_OUTPUT_MIRRORING_TABLE_OFFSET_OUTPUT_MIRROR_PORT_WIDTH;                           //[ 4: 1]
        jl_uint32 reserved:SWCORE_OUTPUT_MIRRORING_TABLE_OFFSET_RESERVED_WIDTH;                                               //[31: 5]
    } BF;
    jl_uint32 val[SWCORE_OUTPUT_MIRRORING_TABLE_ENTRY_SIZE];
} SWCORE_OUTPUT_MIRRORING_TABLE_t;

#define SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG                                                   ((jl_uint32)0x0012289CU)
#define SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_NUM                                               ((jl_uint32)0x00000001U)
#define SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_ENTRY_SIZE                                                             (1)
#define SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_TYPE_VALUE                                                      (0)
#define SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_TYPE_VALUE_WIDTH                                               (16)
#define SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_RESERVED                                                       (16)
#define SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_RESERVED_WIDTH                                                 (16)
typedef union SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_u {
    struct __attribute__ ((packed)) {
        jl_uint32 type_value:SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_TYPE_VALUE_WIDTH;                                //[15: 0]
        jl_uint32 reserved:SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET_RESERVED_WIDTH;                                    //[31:16]
    } BF;
    jl_uint32 val[SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_ENTRY_SIZE];
} SWCORE_EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_t;

#define SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT                                                         ((jl_uint32)0x001228A0U)
#define SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT_NUM                                                     ((jl_uint32)0x00000001U)
#define SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT_ENTRY_SIZE                                                                   (1)
#define SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT_OFFSET_DISABLE                                                               (0)
#define SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT_OFFSET_DISABLE_WIDTH                                                         (1)
#define SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT_OFFSET_RESERVED                                                              (1)
#define SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT_OFFSET_RESERVED_WIDTH                                                       (31)
typedef union SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT_u {
    struct __attribute__ ((packed)) {
        jl_uint32 disable:SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT_OFFSET_DISABLE_WIDTH;                                            //[ 0: 0]
        jl_uint32 reserved:SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT_OFFSET_RESERVED_WIDTH;                                          //[31: 1]
    } BF;
    jl_uint32 val[SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT_ENTRY_SIZE];
} SWCORE_DISABLE_CPU_TAG_ON_CPU_PORT_t;

#define SWCORE_PS_ERROR_COUNTER                                                                    ((jl_uint32)0x001228A4U)
#define SWCORE_PS_ERROR_COUNTER_NUM                                                                ((jl_uint32)0x0000000BU)
#define SWCORE_PS_ERROR_COUNTER_ENTRY_SIZE                                                                              (2)
#define SWCORE_PS_ERROR_COUNTER_OFFSET_UNDERRUN                                                                         (0)
#define SWCORE_PS_ERROR_COUNTER_OFFSET_UNDERRUN_WIDTH                                                                  (24)
#define SWCORE_PS_ERROR_COUNTER_OFFSET_OVERFLOW_0_7                                                                    (24)
#define SWCORE_PS_ERROR_COUNTER_OFFSET_OVERFLOW_0_7_WIDTH                                                               (8)
#define SWCORE_PS_ERROR_COUNTER_OFFSET_OVERFLOW_8_23                                                                   (32)
#define SWCORE_PS_ERROR_COUNTER_OFFSET_OVERFLOW_8_23_WIDTH                                                             (16)
#define SWCORE_PS_ERROR_COUNTER_OFFSET_RESERVED                                                                        (48)
#define SWCORE_PS_ERROR_COUNTER_OFFSET_RESERVED_WIDTH                                                                  (16)
typedef union SWCORE_PS_ERROR_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint64 underrun:SWCORE_PS_ERROR_COUNTER_OFFSET_UNDERRUN_WIDTH;                                                     //[23: 0]
        jl_uint64 overflow_0_7:SWCORE_PS_ERROR_COUNTER_OFFSET_OVERFLOW_0_7_WIDTH;                                             //[31:24]
        jl_uint64 overflow_8_23:SWCORE_PS_ERROR_COUNTER_OFFSET_OVERFLOW_8_23_WIDTH;                                           //[47:32]
        jl_uint64 reserved:SWCORE_PS_ERROR_COUNTER_OFFSET_RESERVED_WIDTH;                                                     //[63:48]
    } BF;
    jl_uint32 val[SWCORE_PS_ERROR_COUNTER_ENTRY_SIZE];
} SWCORE_PS_ERROR_COUNTER_t;

#define SWCORE_PS_PACKET_HEAD_COUNTER                                                              ((jl_uint32)0x001228FCU)
#define SWCORE_PS_PACKET_HEAD_COUNTER_NUM                                                          ((jl_uint32)0x00000001U)
#define SWCORE_PS_PACKET_HEAD_COUNTER_ENTRY_SIZE                                                                        (1)
#define SWCORE_PS_PACKET_HEAD_COUNTER_OFFSET_PACKETS                                                                    (0)
#define SWCORE_PS_PACKET_HEAD_COUNTER_OFFSET_PACKETS_WIDTH                                                             (24)
#define SWCORE_PS_PACKET_HEAD_COUNTER_OFFSET_RESERVED                                                                  (24)
#define SWCORE_PS_PACKET_HEAD_COUNTER_OFFSET_RESERVED_WIDTH                                                             (8)
typedef union SWCORE_PS_PACKET_HEAD_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_PS_PACKET_HEAD_COUNTER_OFFSET_PACKETS_WIDTH;                                                 //[23: 0]
        jl_uint32 reserved:SWCORE_PS_PACKET_HEAD_COUNTER_OFFSET_RESERVED_WIDTH;                                               //[31:24]
    } BF;
    jl_uint32 val[SWCORE_PS_PACKET_HEAD_COUNTER_ENTRY_SIZE];
} SWCORE_PS_PACKET_HEAD_COUNTER_t;

#define SWCORE_PS_PACKET_TAIL_COUNTER                                                              ((jl_uint32)0x00122900U)
#define SWCORE_PS_PACKET_TAIL_COUNTER_NUM                                                          ((jl_uint32)0x00000001U)
#define SWCORE_PS_PACKET_TAIL_COUNTER_ENTRY_SIZE                                                                        (1)
#define SWCORE_PS_PACKET_TAIL_COUNTER_OFFSET_PACKETS                                                                    (0)
#define SWCORE_PS_PACKET_TAIL_COUNTER_OFFSET_PACKETS_WIDTH                                                             (24)
#define SWCORE_PS_PACKET_TAIL_COUNTER_OFFSET_RESERVED                                                                  (24)
#define SWCORE_PS_PACKET_TAIL_COUNTER_OFFSET_RESERVED_WIDTH                                                             (8)
typedef union SWCORE_PS_PACKET_TAIL_COUNTER_u {
    struct __attribute__ ((packed)) {
        jl_uint32 packets:SWCORE_PS_PACKET_TAIL_COUNTER_OFFSET_PACKETS_WIDTH;                                                 //[23: 0]
        jl_uint32 reserved:SWCORE_PS_PACKET_TAIL_COUNTER_OFFSET_RESERVED_WIDTH;                                               //[31:24]
    } BF;
    jl_uint32 val[SWCORE_PS_PACKET_TAIL_COUNTER_ENTRY_SIZE];
} SWCORE_PS_PACKET_TAIL_COUNTER_t;

#endif /* __JL_REG_SWCORE_H__ */

